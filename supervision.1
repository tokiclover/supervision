.\"
.\" CopyLeft (c) 2015-6 tokiclover <tokiclover@gmail.com>
.\"
.\" Distributed under the terms of the 2-clause BSD License
.\"
.pc
.TH SUPERVISION 1 "2016-05-05" "35" "Supervision Scripts Framework"
.SH NAME
Supervision \- Supervision Scripts Framework
.SH DESCRIPTION
.SS SUPERVISION
Supervision aim to provide an easy & efficient way to supervision;
Deamontools[-encore], Runit & S6 backends are actually supported.
Services use, by default, a single
.I sv/SERVICE/OPTIONS
file & \fI./{finish,run}\fR symlinked to \fIsv/.opt/cmd\fR.
The same goes for the log directory.
.I Envdir
variant with a global \fIsv/.env\fR & local \fIsv/SERVICE/env\fR is also supported.
.SS RUNSCRIPT
It also provide a simple run-script API usable in Stage-[0123] that can be used
to finely set up the system.
The same environment variables are used, minus that, almost only dependencies
and extra commands are usable in this context.
.SH OVERVIEW
.SS CONFIGURATION
Global configuration can be done with
.IR sv.conf
file. Do note that, this will affect every service.
Local, per service, configuration is done with
.IR OPTIONS
file. See
.BR OPTIONS
sub-section for more info.
.SS LSB COMMANDS
Standard LSB along with {restart,zap} and {add,desc,cgroup_remove_service}
extra commands are supported.
`@SBINDIR@/rs [OPTIONS] SERVICE COMMAND [ARGS]' can be used for any service
type and efficiency; or the following for a particular service type.
.TP
.B SUPERVISION
And
.R `@SYSCONFDIR@/SERVICE/run [OPTS] COMMAND [ARGS]'
for supervision services.
.TP
.B RUNSCRIPT
And
.R `@SYSCONFDIR@/rs.d/SERVICE COMMAND [ARGS]'
for runscript services.
.SS SERVICE INSTANCE
.TP
.B SUPERVISION
Service supporting many instances can be written in a short manner
like a virtual service backend with specific
.IR OPTIONS.instance
file, e.g.
.IR syslog
with
.IR socklog
backend (suporting extra {inet,ucspi} instances),
instead of duplicating unecessary directory and symbolic links;
And then a single extra instance->service symlink would suffice.
See also
.IR getty
for an example of multi-providers/instances with
.I only
a single symlink and a single service/OPTIONS file.
.B WARNING:
Making service instances with symlinks conflict with static /service/!
Obviously using a single directory for many instances will not work at all,
so make a copy of the whole directory instead.
.TP
.B RUNSCRIPT
Similarly, runscript service instances use a symlink to the service with an extra
.B OPTIONS.instance
configuration file if any.
.SS VIRTUAL SERVICE
.TP
.B SUPERVISION
Virtual service is done by making a symbolic link to a particular provider
e.g.
.IR net
symlinked to
.IR dhcp
service.
Second variant is made by using a single directory and a specific
.IR OPTIONS.provider
file for service that should be in a single instance mode, e.g. a logger (see
.IR syslog
service.)
WARNING: Explicite usage of
.IR name=CMD_NAME
and
.IR SVC_CMD=CMD_NAME
in
.IR OPTIONS[.backend]
file is required.
.TP
.B RUNSCRIPT
Similarly, runscript services use a symlink virtual->service to define a virtual
service; and an extra
.B OPTIONS.virtual
configuration file to define the real
.RB name=SVC_NAME
of the provider (e.g. dev virtual service use mdev as a provider.)
.SS SERVICE USAGE
Full {after,before,need,use} service dependencies is supported. See
.B DEPENDENCIES
and
.B INIT-STAGE
for more info.
.TP
.B SUPERVISION
If service dependencies matter, usage of Runit/S6 is recommanded.
Cold system boot should be fine because of priority level scheduling which start
services in parallele depending on the service dependencies; so, services with
dependencies would reliably wait enough if necessary, or else, SV_TRY (supervision)
limit configuration setting would restart (failed) services.
.TP
.B RUNSCRIPT
Runscript service can be used to finely bring up & shutdown a system.
Yet, runscript services do not support launching daemons because this is left
for supervision services. Launching daemons should be manually handled.
.SH OPTIONS
.SS ENVIRONMENT
The following environment variables are supported.
The default environment variables are defined in
.IR sv/.opt/SVC_OPTIONS
and can be defined in service OPTIONS file(s).
.TP
.B SUPERVISION
Supervision services use
.I sv/SERVICE/OPTIONS
file or provider file(s) to define environment variables if necessary.
.TP
.B RUNSCRIPT
Runscript services use
.IR rs.d/[OPTIONS.]SERVICE
script to define services dependencies and other environment variables or the
service configuration file for extra variables.
.RE
.TS
tab (@);
l lx.
\fBSVC_CONFIGFILE\fR@T{
Service configuration file
T}
\fBSVC_COMMANDS\fR@T{
Extra service commands
T}
\fBSVC_PIDFILE\fR@T{
PID file of (supervised) service
T}
\fBSVC_REQ_FILES\fR@T{
Service required file-s
T}
\fBSVC_DEBUG=Yes\fR@T{
To enable debug mode
T}
\fBSVC_DEPS=No\fR@T{
To disable (or to force for stop phase) dependencies
T}
\fBSVC_NAME\fR@T{
Service name (default to SERVICE directory)
T}
\fBSVC_CMD\fR@T{
Command name (default to SERVICE directory)
T}
\fBSVC_OPTS\fR@T{
Command arguments
T}
\fBSVC_AFTER\fR@T{
Start service after dependency services
T}
\fBSVC_BEFORE\fR@T{
Start service before dependency services
T}
\fBSVC_USE\fR@T{
Try-to-Start use dependency services if any
T}
\fBSVC_NEED\fR@T{
Require need dependency services to be started
T}
\fBSVC_USER\fR@T{
\fIUSER\fR to use to run commands
T}
\fBSVC_GROUP\fR@T{
\fIGROUP\fR to use to run commands
T}
\fBRC_OPTS=Yes\fR@T{
To enable OpenRC support mode
T}
\fBENV_DIR=Yes\fR@T{
To enable \fIenvdir\fR support mode
T}
\fBENV_CMD\fR@T{
Envdir command (default to [envdir sv/.env][envdir sv/SERVICE/env)
T}
\fBENV_OPTS\fR@T{
Envdir arguments
T}
\fBPRE_CMD\fR@T{
Pre-launch command
T}
\fBPRE_OPTS\fR@T{
Pre-launch arguments
T}
\fBFIN_CMD\fR@T{
Finish command
T}
\fBFIN_OPTS\fR@T{
Finish arguments
T}
\fBLOG_CMD\fR@T{
Log (run) command
T}
\fBLOG_OPTS\fR@T{
Log (run) arguments
T}
\fBLOG_FIN_CMD\fR@T{
Log (finish) command
T}
\fBLOG_FIN_OPTS\fR@T{
Log (finish) arguments
T}
\fBLOG_SIZE\fR@T{
File size limit for log rotation
T}
\fBLOG_PROC\fR@T{
Processor command to use for log rotation
T}
.TE
.SS FUNCTIONS
Extra service commands along with supported functions are defined as shell functions.
.TP
.B SUPERVISION
.TS
tab (@);
l lx.
\fBpre\fR@T{
Set up ./run
T}
\fBpost\fR@T{
Set up ./finish
T}
\fBlog_pre\fR@T{
Setup (log) ./run
T}
\fBlog_post\fR@T{
Set up (log) ./finish
T}
.TE

See
.R sv/.opt/SVC_OPTIONS
for the default and
.R OPTIONS
file for services like
.R acpid,
.R cron,
.R cgred,
.R dbus,
.R sshd
for practical examples.
.TP
.B RUNSCRIPT
Standard {restart,start,stop} along with st{art,op}_p{re,ost}
(set/clean up) functions are supported.
.TS
tab (@);
l lx.
\fBstart{,_{pre,post}}\fR@T{
Start command (preceded & followed by a set/clean up functions if any.)
T}
\fBstop{,_{pre,post}}\fR@T{
Same as above for stop command.
T}
\fBrestart\fR@T{
Custom stop/start command if any.
T}
.TE
.SS BUILTINS
.TS
tab (@);
l lx.
\fBinfo [MSG]\fR@T{
Print notice message to standard output
T}
\fBwarn [MSG]\fR@T{
Print warning message to standard output
T}
\fBerror [MSG]\fR@T{
Print error message to standard error
T}
\fBbegin [MSG]\fR@T{
Print beginning message to standard output
T}
\fBend [MSG]\fR@T{
Print ending message to standard output
T}
\fBmount_info [-f] DIR\fR@T{
Get mount/fstab status of a directory/device
T}
\fBSOURCE [-e|-d] FILES\fR@T{
Source wrapper (with file existance check)
T}
\fBenv_svc VARS\fR@T{
Save persistent environment variables
T}
\fBdel_env VARS\fR@T{
Remove persistent environment variables
T}
\fBsvc_down -d|-r\fR@T{
Set up a service as down (SUPERVISION)
T}
\fBsvc_mark [-Sdfsu]\fR@T{
Set defined service status
T}
\fBsvc_state [-defrs]\fR@T{
Get defined service status
T}
\fBsvc_del\fR@T{
Remove service from running directory
T}
\fBsvc_remove\fR@T{
Clean up service from running directory
T}
\fBsvc_zap\fR@T{
Remove temporary service files
T}
.TE
.TP
.B SUPERVISION
.TS
tab (@);
l lx.
\fBenv_sv\fR@T{
Save (global) persistent environment variables
T}
\fBsvc_cmd\fR@T{
Run a supervision service command
T}
.TE
.TP
.B RUNSCRIPT
.TS
tab (@);
l lx.
\fBenv_rs\fR@T{
Save (global) persistent environment variables
T}
\fBrs_cmd\fR@T{
Run a runscript service command
T}
.TE
.SS DEPENDENCIES
Standard {after,before,need,use} service dependencies is supported.
Still, supervision scan model has the major advantage of parallel
service management making it simple & cheap to implement but
.I before
dependencies.
And then, RS_PARALLEL configuration setting can be enabled to start everything
in parallel. This choice is practicable if before style dependency is not used;
because after counterpart can be used instead.

Mixed service dependencies is also supported. However, this is usable
only in stage-[12] because of svscan ties to stage-2, and, once stage-3
is reached, service shutdown is triggered.
Actually, svscan if executed as early as possible in stage-1 after starting
runscript services in stage-1 to fully bring up a usable system.
.SS INIT-STAGE
Superivision is organized in three distinct init-stage;
one for system boot; second for system running state;
third for system shutdown.
An extended stage-0 (system initialization) is also supported.
This is where {dev,sysfs} et al. runscript services should live in.
.SS RUNLEVELS
{boot,default,nonetwork,single} run levels are supported.
Extra services that should be started in {boot,single} run levels should be add
into SV_SERVICE/.LEVEL,
e.g. sulogin in single level.
.B WARING:
A static /service/ would require to manually remove sulogin (`sv/sulogin/run del')
service after using single run-level.
.SH CONTROL GROUPS RESOURCE MANAGEMENT
.SS OVERVIEW
Supervision Scripts Framework support CGroup. CGroup support is autodected on
start up on Linux. Just enable kernel CGroup support to benefit CGroup resource
management. Or else, forcibly disable in
.RB SVC_OPTIONS
by setting
.RB SV_CGROUP=No.
Set
.RB CGROUP_INHERIT=Yes
to inherit other CGroups, and/or
.RB CGROUP_CLEANUP=Yes
to clean up child processes of a \fIgroup\fR or supervised process (in ./finish.)

Global
.RB (SVC_OPTIONS/sv.conf)
& Local
.RB (OPTIONS)
Resource Management Settings is supported e.g.
.RB CGROUP_CPU='cpu.shares\ 256'.
Multi-value of a parameter is supported along with sets of multi-parameter-value.
.SS ENVIRONMENT
See the following table & Linux Documentation for more info on Resource Controllers.
.TS
tab (@);
l lx.
\fBCGROUP_BLKIO\fR@T{
Use Block IO Controller to manage resource for service(s)
T}
\fBCGROUP_CPU\fR@T{
Use CPU Controller to manage resource for service(s)
T}
\fBCGROUP_CPUACCT\fR@T{
Use CPU Accounting Controller to manage resource for service(s)
T}
\fBCGROUP_CPUSET\fR@T{
Use CPU Sets Controller to manage resource for service(s)
T}
\fBCGROUP_DEVICES\fR@T{
Use Device Whitlist Controller to manage resource for service(s)
T}
\fBCGROUP_MEMORY\fR@T{
Use Memory Controller to manage resource for service(s)
T}
\fBCGROUP_NET_CLS\fR@T{
Use Network Classifier to manage resource for service(s)
T}
\fBCGROUP_NET_PRIO\fR@T{
Use Network Priority to manage resource for service(s)
T}
.TE
.SS SERVICE
CGRED (CGroup Rules Engine Daemon) service is another alternative to CGroup
with finely grained rules & automatic PIDs classification.
However, libcgroup should be installed beforehand.

Something like the following can be used to put supervisor processes in CGroup:
.nf
--[cgconfig.conf]--
group supervisor {
  "name=supervision" {
  }
}
--[EOF]--
--[cgrules.conf]--
*:runsv  supervision   supervisor/
--[EOF]--
.fi
Replace
.IR runsv
with
.IR supervise
for daemontools[-encore] or
.IR s6-supervise
for S6.
See cgconfig.conf(5) & enable cgred service.

This is only necessary if not using the bundled Init-Stage-2 which have CGroup
support: child process (supervisor) will naturally inherit supervision CGroup.
.SH FILES
.SS @SBINDIR@
.TP
.RB rs
Multi-purpose binary to run either stage-[0123] or service command, e.g.
`rs -1 zram add', `rs acpid start' or `rs -0 stage' (to start sysinit/stage-0).
.SS @SYSCONFDIR@/rs.d/\ (RS_SVCDIR)
RUNSCRIPT service directory
(See RS_SVCDIR/stage-{0,1,2,3} for active services.)
.TP
.B SERVICES
.RB [\| devfs \|]\ \c
.RB [\| mdev \|]\ \c
.RB [\| squashdir \|]\ \c
.RB [\| sysfs \|]\ \c
.RB [\| tmpdir \|]\ \c
.RB [\| zram \|]
.SS @SYSCONFDIR@/sv/\ (SV_SVCDIR)
SUPERVISION service directory
(See SV_SERVICE for active service.)
.TP
.B SERVICES
.RB [\| acpid \|]\ \c
.RB [\| atd \|]\ \c
.RB [\| cgred \|]\ \c
.RB [\| cron \|]\ \c
.RB [\| cupsd \|]\ \c
.RB [\| dhcp \|]\ \c
.RB [\| dbus \|]\ \c
.RB [\| dns \|]\ \c
.RB [\| getty \|]\ \c
.RB [\| git-daemon \|]\ \c
.RB [\| gpm \|]\ \c
.RB [\| hostapd \|]\ \c
.RB [\| inetd \|]\ \c
.RB [\| initctl \|]\ \c
.RB [\| httpd \|]\ \c
.RB [\| ntp \|]\ \c
.RB [\| pcscd \|]\ \c
.RB [\| rsync-daemon \|]\ \c
.RB [\| saned \|]\ \c
.RB [\| sshd \|]\ \c
.RB [\| snmpd \|]\ \c
.RB [\| sulogin \|]\ \c
.RB [\| syslog \|]\ \c
.RB [\| udev \|]\ \c
.RB [\| wpa_supplicant \|]
.TP
.B .lib/
Symbolic link to SV_LIBDIR
.SS SV_SVCDIR/.opt/
.TP
.RB cmd
Default {,log/}{finish,run} commands
.TP
.TP
.RB SVC_BACKEND
Specific Backend Environment variable
.TP
.RB SVC_OPTIONS
Default service OPTIONS
.TP
.RB sv.conf
Supervision configuration file
.SS @SYSCONFDIR@/service/ (SV_SERVICE)
Default supervision '/service/' directory
.SS /run/service/ (SV_RUNDIR)
Default run time '/service/' directory
.SS @SYSCONFDIR@/runit/
.TP
.RB {1,2,3}
Init-Stage-{1,2,3} files to handle system boot/shutdown & supervisor.
.TP
.RB ctrlaltdel
C-ALT-DEL signal handler (shutdown/reboot)
.SS @SYSCONFDIR@/s6/
.TP
.RB init-stage-1
Init-Stage-{1,2} file to handle system boot with optional OpenRC support (by
setting RC_INIT_SYS=YES).
.TP
.RB {crash,finish}
OpenRC friendly Init-Stage-3 scripts to handle system shutdown & supervisor crashes.
.SS @SYSCONFDIR@/{conf,init}.d/supervision
.TP
Supervision init script service for OpenRC
.SS @LIBDIR@/sv/\ (SV_LIBDIR)
SUPERVISION library directory
.SS SV_LIBDIR/bin/
.TP
.RB checkpath
Simple & Cheap checkpath/mktemp script
.TP
.RB sp
`SV_SVCDIR=sv sv/.lib/bin/sp add --log SERVICE'
and to set up specific supervision Backend e.g.
`sp -S runit'
.TP
.RB sv-shutdown
Simple script to handle system halt
.TP
.B SYMLINKS\ (backend binary symlinks)
.RB \| envdir \|\ \c
.RB \| envuidgid \|\ \c
.RB \| fghack \|\ \c
.RB \| pgrphack \|\ \c
.RB \| setlock \|\ \c
.RB \| setuidgid \|\ \c
.RB \| softlimit \|
.SS SV_LIBDIR/sh/
.TP
.RB dep
Simple script to list dependencies
.TP
.RB cgroup-release-agent
CGroup Release Agent script
.TP
.RB init-stage
Init-Stage-[123] handler
.TP
.RB cgroup-functions
CGroup Functions/helper library
.TP
.RB functions
Generic Functions/Helpers library
.TP
.RB runscript
Run-script helper utility
.TP
.RB runscript-functions
Run-script Functions/helpers library
.TP
.RB supervision-functions
Supervision Functions/Helpers library
.SH "SEE ALSO"
.B Shell:
.BR sh (1p)
.B Deamontools[-encore]:
.BR \%svc (8),
.BR \%multilog (8),
.BR \%svscan (8).
.br
.B Runit:
.BR \%sv (8),
.BR \%svlogd (8),
.BR \%runsvdir (8).
.br
.B S6:
.BR \%s6-svc (8),
.BR \%s6-log (8),
.BR \%s6-svscan (8).
.SH AUTHORS
tokiclover <tokiclover@supervision.project>
.\"
.\" vim:fenc=utf-8:ft=groff:ci:pi:sts=2:sw=2:ts=2:expandtab:
.\"
