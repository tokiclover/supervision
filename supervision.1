.\"
.\" CopyLeft (c) 2015-6 tokiclover <tokiclover@gmail.com>
.\"
.\" Distributed under the terms of the 2-clause BSD License
.\"
.pc
.TH SUPERVISION 1 "2016-07-20" "0.12.0" "Supervision Framework"
.SH NAME
Supervision \- Supervision Framework
.SH DESCRIPTION
Supervision package aims to provide and easy, simple and efficient
service-manager and init-system build to function with a supervision suite.
Though the init-system part can be bypassed altogether by using only stage-2 and
thus benefit the easy to use the service-management framework for supervision.
.SS SUPERVISION
Supervision aims to provide an easy and efficient way to supervision;
Deamontools[-encore], Runit and S6 backends are actually supported.
(Supervision-)services use, by default, a single
.I sv/SERVICE/OPTIONS
file and \fI./{finish,run}\fR symlinked to \fIsv/.opt/cmd\fR.
The same goes for the log directory.
.I Envdir
variant with a global \fIsv/.env\fR and local \fIsv/SERVICE/env\fR is also supported.
.SS RUNSCRIPT
It also support runscript services usable in stage-[0123] that can be used
to finely set up and boot a full system.
The same environment variables are used, minus that, almost only dependencies
and extra commands are usable in this context.
(Runscript-)services use a single executable file with an optional configuration
file
.I sv/{OPTIONS.,}SERVICE
which uses the same formating and syntax as improved common
.B rc
script file (e.g. OpenRC.) Meaning that, only functions and dependency are
defined in the files. This is also true for supervision services.
.SH OVERVIEW
.SS CONFIGURATION
Global configuration can be done with
.I sv.conf
file. Do note that, this will affect every service.
Local, per service, configuration is done with
.I OPTIONS
files. See
.B OPTIONS
sub-section for more info.
.SS LSB COMMANDS
Standard LSB along with
.I {restart,zap}
and
.I {add,desc}
extra commands are supported.
Supervision-services also support
.I {new,remove,cgroup_remove_service}
command to create a new service with a template.
The other command remove the service from
.B SV_RUNDIR
(running /service/ directory.)
And the last to remove Control Group PIDs hierarchy.
`@SBINDIR@/rs [OPTIONS] SERVICE COMMAND [ARGS]' can be used for any service
type and efficiency; or the following for a particular service type.
Some commands, like
.I {add,del}
require a stage level
`-(0|1|2|3)' to get the appropriate result.
.TP
.B SUPERVISION
And
.B `@SYSCONFDIR@/sv/SERVICE/run [OPTS] COMMAND [ARGS]'
can be used instead for supervision services.
.TP
.B RUNSCRIPT
And
.B `@SYSCONFDIR@/sv/SERVICE COMMAND [ARGS]'
can be used instead for runscript services.
.SS SERVICE INSTANCE
.TP
.B SUPERVISION
Service supporting many instances can be written in a short manner
like a virtual service backend with specific
.B OPTIONS.INSTANCE
file, e.g.
.I syslog
with
.I socklog
backend (suporting extra
.I {inet,ucspi,unix}
instances),
instead of duplicating unecessary directory and symbolic links;
And then a single extra
.B INSTANCE->SERVICE
symbolic link would suffice.
See also
.I getty
for an example of multi-providers/instances with
.I only
a single symlink and a single
.B sv/SERVICE/OPTIONS
file.
.TP
.B RUNSCRIPT
Similarly, runscript service instances use a symlink to the service with an extra
.B OPTIONS.INSTANCE
configuration file if any.
See
.I networkfs
or
.I tmpfiles.setup
for actual examples for this.
.SS VIRTUAL SERVICE
.TP
.B SUPERVISION
Virtual service is done by making a symbolic link to a particular provider,
for example,
.I net
service is symlinked to
.I dhcp
service.
Second variant is made by using a single directory and a specific
.B OPTIONS.PROVIDER
file for service that should be in a single instance mode, like
.B syslog
(see
.I syslog
service.)
WARNING: Explicite usage of
.B name=CMD_NAME
and
.B SVC_CMD=CMD_NAME
in
.B sv/SERVICE/OPTIONS
file is required to get the expected behavior.
.TP
.B RUNSCRIPT
Similarly, runscript services use a symlink
.B VIRTUAL->SERVICE
to define a virtual
service; and an extra
.B OPTIONS.VIRTUAL
configuration file to define the real
.B name=SVC_NAME
of the provider (e.g. dev virtual service use mdev as a provider.)
.SS SERVICE USAGE
Full
.I {after,before,need,use}
service dependencies is supported. See
.B DEPENDENCIES
and
.B INIT-STAGE
for more info.
.TP
.B SUPERVISION
If service dependencies matter, usage of Runit/S6 is recommanded.
Cold system boot should be fine because of priority level scheduling which start
services in parallele depending on the service dependencies; so, services with
dependencies would reliably wait enough if necessary, or else,
.I SV_TRY
(supervision) limit configuration setting would restart (failed) services.
.TP
.B RUNSCRIPT
Runscript service are used to finely bring up and shutdown a system.
Yet, runscript services do not support launching daemons because this is left
for supervision services. Launching daemons should be manually handled.
.SH OPTIONS
.SS ENVIRONMENT
The following environment variables are supported.
The default environment variables are defined in
.I sv/.opt/SVC_OPTIONS
and can be defined in service OPTIONS file(s).
.TP
.B SUPERVISION
Supervision services use \fIsv/\fBSERVICE\fI/OPTIONS\fR
file or provider file(s) to define environment variables if necessary.
.TP
.B RUNSCRIPT
Runscript services use \fIsv/OPTIONS.\fBSERVICE\fR
script to define extra services dependencies and other environment variables
or the service configuration file for extra variables.
.RE
.TS
tab (@);
l lx.
\fBSVC_CONFIGFILE\fR@T{
Service configuration file
T}
\fBSVC_COMMANDS\fR@T{
Extra service commands
T}
\fBSVC_PIDFILE\fR@T{
PID file of (supervised) service
T}
\fBSVC_REQ_FILES\fR@T{
Service required file-s
T}
\fBSVC_DEBUG=Yes\fR@T{
To enable debug mode
T}
\fBSVC_DEPS=No\fR@T{
To disable (or to force for stop phase) dependencies
T}
\fBSVC_NAME\fR@T{
Service name (default to SERVICE directory)
T}
\fBSVC_CMD\fR@T{
Command name (default to SERVICE directory)
T}
\fBSVC_OPTS\fR@T{
Command arguments
T}
\fBSVC_AFTER\fR@T{
Start service after dependency services
T}
\fBSVC_BEFORE\fR@T{
Start service before dependency services
T}
\fBSVC_USE\fR@T{
Try-to-Start use dependency services if any
T}
\fBSVC_NEED\fR@T{
Require need dependency services to be started
T}
\fBSVC_USER\fR@T{
\fIUSER\fR to use to run commands
T}
\fBSVC_GROUP\fR@T{
\fIGROUP\fR to use to run commands
T}
\fBRC_OPTS=Yes\fR@T{
To enable OpenRC support mode
T}
\fBENV_DIR=Yes\fR@T{
To enable \fIenvdir\fR support mode
T}
\fBENV_CMD\fR@T{
Envdir command (default to [envdir sv/.env][envdir sv/SERVICE/env)
T}
\fBENV_OPTS\fR@T{
Envdir arguments
T}
\fBPRE_CMD\fR@T{
Pre-launch command
T}
\fBPRE_OPTS\fR@T{
Pre-launch arguments
T}
\fBFIN_CMD\fR@T{
Finish command
T}
\fBFIN_OPTS\fR@T{
Finish arguments
T}
\fBLOG_CMD\fR@T{
Log (run) command
T}
\fBLOG_OPTS\fR@T{
Log (run) arguments
T}
\fBLOG_FIN_CMD\fR@T{
Log (finish) command
T}
\fBLOG_FIN_OPTS\fR@T{
Log (finish) arguments
T}
\fBLOG_SIZE\fR@T{
File size limit for log rotation
T}
\fBLOG_PROC\fR@T{
Processor command to use for log rotation
T}
.TE
.SS FUNCTIONS
Extra service commands along with supported functions are defined as shell functions.
.B WARNING:
A few functions starting with 
.I (svc|rs)_
prefix are used for internal usage;
and thus are reserved for futur usage;
use `sv.vim' file type plugin or look at it to get a list of functions/keywords.
An then, a few functions name have special meaning; read the following for more
information.
.TP
.B SUPERVISION
.TS
tab (@);
l lx.
\fBpre\fR@T{
Set up ./run
T}
\fBpost\fR@T{
Set up ./finish
T}
\fBlog_pre\fR@T{
Setup (log) ./run
T}
\fBlog_post\fR@T{
Set up (log) ./finish
T}
.TE

See
.B sv/.opt/SVC_OPTIONS
for the default and
.B OPTIONS
file for services like
.I acpid,
.I cron,
.I cgred,
.I dbus,
.I sshd
for practical examples.
.TP
.B RUNSCRIPT
Standard
.I {restart,start,stop}
along with
.I st{art,op}_p{re,ost}
(set/clean up) functions are supported.
.TS
tab (@);
l lx.
\fBstart{,_{pre,post}}\fR@T{
Start command (preceded and followed by a set/clean up functions if any.)
T}
\fBstop{,_{pre,post}}\fR@T{
Same as above for stop command.
T}
\fBrestart\fR@T{
Custom stop/start command if any.
T}
.TE
.SS BUILTINS
.TS
tab (@);
l lx.
\fBinfo [MESSAGE]\fR@T{
Print notice message to standard output
T}
\fBwarn [MESSAGE]\fR@T{
Print warning message to standard output
T}
\fBerror [MESSAGE]\fR@T{
Print error message to standard error
T}
\fBbegin [MESSAGE]\fR@T{
Print beginning message to standard output
T}
\fBend [MESSAGE]\fR@T{
Print ending message to standard output
T}
\fBfstabinfo [OPTIONS] MOUNTPOINTS\fR@T{
Get information of fstab(5) entries
T}
\fBmountinfo [OPTIONS] MOUNTPOINTS\fR@T{
Get information of current mountpoints
T}
\fBdevice_info [-a|--all] DEVICES\fR@T{
Probe /proc/{devices,misc} device info
T}
\fBSOURCE [-e|-d] FILES\fR@T{
Source wrapper (with file existance check)
T}
\fBenv_svc VARS\fR@T{
Save persistent environment variables
T}
\fBdel_env VARS\fR@T{
Remove persistent environment variables
T}
\fBsvc_down -(d|r)\fR@T{
Set up a service as down (SUPERVISION)
T}
\fBsvc_mark -(S|d|f|s|u)\fR@T{
Set defined service status
T}
\fBsvc_state -(a|d|e|f|s)\fR@T{
Get defined service status
T}
\fBsvc_del\fR@T{
Remove service from running directory
T}
\fBsvc_remove\fR@T{
Clean up service from running directory
T}
\fBsvc_zap\fR@T{
Remove temporary service files
T}
.TE
.TP
.B SUPERVISION
.TS
tab (@);
l lx.
\fBenv_sv\fR@T{
Save (global) persistent environment variables
T}
\fBsvc_cmd\fR@T{
Run a supervision service command
T}
.TE
.TP
.B RUNSCRIPT
.TS
tab (@);
l lx.
\fBenv_rs\fR@T{
Save (global) persistent environment variables
T}
\fBrs_cmd\fR@T{
Run a runscript service command
T}
.TE
.SS DEPENDENCIES
Standard
.I {after,before,need,use}
service dependencies is supported.
Still, supervision scan model has the major advantage of parallel
service management making it simple and cheap to implement but
.I before
dependency type.
And then,
.B RS_PARALLEL
configuration setting can be enabled to start everything
in parallel. This choice is practicable if before style dependency is not used;
because after counterpart can be used instead. And this note is only valid when
starting a particular service individually, not when starting a stage level.

Mixed service dependencies is also supported. However, this is usable
only in stage-[12] because of
.B svscan
ties to stage-2, and, once stage-3
is reached, system shutdown is triggered; so, no dependency handling can be
done there without a running
.B svscan.
Actually,
.B svscan
if executed as early as possible in stage-1 after starting
runscript services in stage-0 to fully bring up an initialized and usable system.
.SS INIT-STAGE
Superivision is organized in three distinct init-stage;
one for system boot; second for system running state;
third for system shutdown.
An extended stage-0 (system initialization) is also supported.
This is where
.I {dev{,fs},sysfs}
et al. runscript services should live in.
Booting with
.B mdev
as device manager work as expected even with
.B device-mapper
and
.B dmcrypt
compiled with udev support. And then,
.B stage-0 (sysinit)
is very short before a supervised device manager is started. So, having, say,
.B udev
in stage-1 would still work as expected.
.SS RUNLEVELS
.I {boot,default,nonetwork,single}
run levels are supported.
Extra services that should be started in
.I single
run levels should be added into
.I SV_SVCDIR/.single
like
.I sulogin
service in single level.
In fact,
.B boot
runlevel is stage-0;
.B default
runlevel is stage-2;
.B nonetwork
is only a modified
.B default
runlevel without network services. So, in practice,
.B single
replaces
.B default
runlevel to be able to repair a system.
.SH CONTROL GROUPS RESOURCE MANAGEMENT
.SS OVERVIEW
Supervision Scripts Framework support CGroup. CGroup support is autodected on
start up on Linux. Just enable kernel CGroup support to benefit CGroup resource
management. Or else, forcibly disable in
.B SVC_OPTIONS
by setting
.RB SV_CGROUP=No.
Set
.B CGROUP_INHERIT=Yes
to inherit other CGroups, and/or
.B CGROUP_CLEANUP=Yes
to clean up child processes of a \fIgroup\fR or supervised process (in ./finish.)

Global
.B (SVC_OPTIONS/sv.conf)
and Local
.B (OPTIONS)
Resource Management Settings is supported e.g.
.RB CGROUP_CPU='cpu.shares\ 256'.
Multi-value of a parameter is supported along with sets of multi-parameter-value.
.SS ENVIRONMENT
See the following table and Linux Documentation for more info on Resource Controllers.
.TS
tab (@);
l lx.
\fBCGROUP_BLKIO\fR@T{
Use Block IO Controller to manage resource for service(s)
T}
\fBCGROUP_CPU\fR@T{
Use CPU Controller to manage resource for service(s)
T}
\fBCGROUP_CPUACCT\fR@T{
Use CPU Accounting Controller to manage resource for service(s)
T}
\fBCGROUP_CPUSET\fR@T{
Use CPU Sets Controller to manage resource for service(s)
T}
\fBCGROUP_DEVICES\fR@T{
Use Device Whitlist Controller to manage resource for service(s)
T}
\fBCGROUP_MEMORY\fR@T{
Use Memory Controller to manage resource for service(s)
T}
\fBCGROUP_NET_CLS\fR@T{
Use Network Classifier to manage resource for service(s)
T}
\fBCGROUP_NET_PRIO\fR@T{
Use Network Priority to manage resource for service(s)
T}
.TE
.SS SERVICE
CGRED (CGroup Rules Engine Daemon) service is another alternative to CGroup
with finely grained rules and automatic PIDs classification.
However, libcgroup should be installed beforehand.

Something like the following can be used to put supervisor processes in CGroup:
.nf
--[cgconfig.conf]--
group supervisor {
  "name=supervision" {
  }
}
--[EOF]--
--[cgrules.conf]--
*:runsv  supervision   supervisor/
--[EOF]--
.fi
Replace
.IR runsv
with
.IR supervise
for daemontools[-encore] or
.IR s6-supervise
for S6.
See cgconfig.conf(5) and enable cgred service.

This is only necessary if not using the bundled Init-Stage-2 which have CGroup
support: child process (supervisor) will naturally inherit supervision CGroup.
.SH FILES
.SS @SBINDIR@
.TP
.RB rs
Multi-purpose binary to run either stage-[0123] or service command, e.g.
`rs -1 zramfs add' to add
.B zramfs
service to stage-1 (boot run level); `rs acpid start' or `rs -2 stage' to start
daemons and default services (default run level.)
.SS @SYSCONFDIR@/sv/\ (SV_SVCDIR)
See RS_SVCDIR/.stage-{0,1,2,3} for active services.
Use `rs -(0|1|2|3) SERVICE add` to add a particular service to a particular
stage or runlevel.
.B Init-stage-0
is ready to use;
.B init-stage-1
can be modified to include services like
.B {zramfs,zfs,zpool,unionfs,device-mapper,raid}
and so on; likewise for
.B init-stage-2.
.TP
.B RUNSCRIPT SERVICES (included services)
.RB [\| clock \|]\ \c
.RB [\| console \|]\ \c
.RB [\| devfs \|]\ \c
.RB [\| device-mapper \|]\ \c
.RB [\| dmcrypt \|]\ \c
.RB [\| dmesg \|]\ \c
.RB [\| hostname \|]\ \c
.RB [\| ipset \|]\ \c
.RB [\| ip[6]tables \|]\ \c
.RB [\| kmod \|]\ \c
.RB [\| kmod-static-nodes \|]\ \c
.RB [\| localfs \|]\ \c
.RB [\| loopback \|]\ \c
.RB [\| lvm \|]\ \c
.RB [\| mdev \|]\ \c
.RB [\| miscfs \|]\ \c
.RB [\| mtab \|]\ \c
.RB [\| networkfs \|]\ \c
.RB [\| procfs \|]\ \c
.RB [\| raid \|]\ \c
.RB [\| rootfs \|]\ \c
.RB [\| squashdir \|]\ \c
.RB [\| swaps \|]\ \c
.RB [\| swapfiles \|]\ \c
.RB [\| sysctl \|]\ \c
.RB [\| sysfs \|]\ \c
.RB [\| tmpdirs \|]\ \c
.RB [\| tmpfiles.dev \|]\ \c
.RB [\| tmpfiles.setup \|]\ \c
.RB [\| zfs \|]\ \c
.RB [\| zpool \|]\ \c
.RB [\| zramfs \|]
.TP
.B SUPERVISION SERVICES (included service)
.RB [\| acpid \|]\ \c
.RB [\| atd \|]\ \c
.RB [\| cgred \|]\ \c
.RB [\| cron \|]\ \c
.RB [\| cupsd \|]\ \c
.RB [\| dhcp \|]\ \c
.RB [\| dbus \|]\ \c
.RB [\| dns \|]\ \c
.RB [\| getty \|]\ \c
.RB [\| git-daemon \|]\ \c
.RB [\| gpm \|]\ \c
.RB [\| hostapd \|]\ \c
.RB [\| inetd \|]\ \c
.RB [\| initctl \|]\ \c
.RB [\| httpd \|]\ \c
.RB [\| ntp \|]\ \c
.RB [\| pcscd \|]\ \c
.RB [\| rsync-daemon \|]\ \c
.RB [\| saned \|]\ \c
.RB [\| sshd \|]\ \c
.RB [\| snmpd \|]\ \c
.RB [\| sulogin \|]\ \c
.RB [\| syslog \|]\ \c
.RB [\| udev \|]\ \c
.RB [\| wpa_supplicant \|]
.RB [\| xdm \|]
.TP
.B .lib/
Symbolic link to
.B SV_LIBDIR
.SS SV_SVCDIR/.opt/
.TP
.RB cmd
Default sv/SERVICE/{,log/}{finish,run} commands
.TP
.TP
.RB SVC_BACKEND
Specific supervision (backend) environment
.TP
.RB SVC_OPTIONS
Default service (OPTIONS) environment
.TP
.RB sv.conf
Supervision configuration file
.SS @RUNDIR@/sv/ (SV_RUNDIR)
Default run time '/service/' directory
.SS @SYSCONFDIR@/runit/
.TP
.RB {1,2,3}
Init-Stage-{1,2,3} files to handle system boot/shutdown and supervisor.
.TP
.RB ctrlaltdel
C-ALT-DEL signal handler (shutdown/reboot)
.SS @SYSCONFDIR@/s6/
.TP
.RB init-stage-1
Init-Stage-{1,2} file to handle system boot
.TP
.RB {crash,finish}
Init-Stage-3 scripts to handle system shutdown and supervisor crashes.
.SS @SYSCONFDIR@/{conf,init}.d/supervision
.TP
Supervision init script service for OpenRC
.SS @LIBDIR@/sv/\ (SV_LIBDIR)
SUPERVISION library directory
.SS SV_LIBDIR/bin/
.TP
.RB checkpath
Simple and cheap checkpath/mktemp binary
.TP
.RB fstabinfo
Simple and cheap fstab(5) utility
.TP
.RB mountinfo
Simple and cheap mountpoints utility
.TP
.RB sv-config
`sv/.lib/bin/sv-config [--log] SERVICE new' to create a new supervision service;
and `sv-config -S runit' to set up specific supervision backend (supervision suite).
.TP
.RB sv-shutdown
Simple utility to handle system halt
.TP
.B SYMLINKS\ (backend binary symlinks)
.RB \| envdir \|\ \c
.RB \| envuidgid \|\ \c
.RB \| fghack \|\ \c
.RB \| pgrphack \|\ \c
.RB \| setlock \|\ \c
.RB \| setuidgid \|\ \c
.RB \| softlimit \|
.SS SV_LIBDIR/sh/
.TP
.RB dep
Simple script to list dependencies
.TP
.RB cgroup-release-agent
CGroup Release Agent script
.TP
.RB init-stage
Init-Stage-[123] handler with optional OpenRC support (by
setting
.B RC_INIT_SYS=YES
in the global configuration file).
.TP
.RB cgroup-functions
CGroup Functions/helper library
.TP
.RB functions
Generic Functions/Helpers library
.TP
.RB runscript
Run-script helper utility
.TP
.RB runscript-functions
Run-script Functions/helpers library
.TP
.RB supervision-functions
Supervision Functions/Helpers library
.TP
.RB tmpfiles
Tmpfiles utility for SystemD tmpfiles.d compatiblity
.SH "SEE ALSO"
.B Shell:
.BR sh (1p)
.B Deamontools[-encore]:
.BR \%svc (8),
.BR \%multilog (8),
.BR \%svscan (8).
.br
.B Runit:
.BR \%sv (8),
.BR \%svlogd (8),
.BR \%runsvdir (8).
.br
.B S6:
.BR \%s6-svc (8),
.BR \%s6-log (8),
.BR \%s6-svscan (8).
.SH AUTHORS
tokiclover <tokiclover@supervision.project>
.\"
.\" vim:fenc=utf-8:ft=groff:ci:pi:sts=2:sw=2:ts=2:expandtab:
.\"
