#!/bin/sh
#
# $Header:  /lib/sv/bin/sv-config                        Exp $
# $Author: (c) 2015-6 tokiclover <tokiclover@gmail.com>  Exp $
# $License: 2-clause/new/simplified BSD                  Exp $
# $Version: 1.1 2016/05/05 21:09:26                      Exp $
#

:	${name=${0##*/}}
:	${SV_LIBDIR:=${0%/bin/*}}
source "${0%/bin/*}"/sh/runscript-functions ||
	{ echo "Required file not found." >&2; exit 1; }

help_message()
{
	cat <<-EOH
 usage: sp [OPTIONS] [{SERVICE} {COMAND}] [ARGUMENTS]
   COMMAND: [add|del|remove|reload|start|stop|status|zap]
   COMMAND: (CGroup) cgroup_remove_service
   OPTIONS: add SERVICE [-cdls]
     -D, --nodeps     Disable dependencies
     -l, --log        Add log directory
     -s, --service    Add symlink to /service/
   OPTIONS: -S daemontools[-encore]|runit|s6
     -S, --set ARG    Set up backend
     -g, --debug      Enable debug
     -h, --help       Help/Exit
EOH
${1+exit ${1}}
}

sv_cmd()
{
	local cmd name svc="${1}"
	case "${2}" in
		(add) cmd=svc_cmd SVC_NAME="${svc}";;
		(*) cmd="${SV_SVCDIR}/${svc}/run"  ;;
	esac
	eval ${cmd} ${2} ${ARGS}
}

[ ${#} -ge 2 ] || help_message 2
ARGS="$(getopt -o DS:ghls -l debug,help,nodeps,log,service,set: \
	-s sh -n sp -- "${@}")"
[ ${?} -eq 0 ] || help_message 3
eval set -- ${ARGS}
ARGS= __SV_NAM__=

while true; do
	case "${1}" in
		(-D|--node*) SVC_DEPS=0 ;;
		(-g|--debug) set -x;;
		(-S|--set) __SV_NAM__="${2}"; shift 2; break;;
		(-[ls]*|--[ls]*) ARGS="${ARGS} ${1}";;
		(*) shift; break;;
		(-h|--help) help_message 0;;
	esac
	shift
done

sv_backend()
{
local BINS CMDS PREFIX SIGNALS bin env

SIGNALS='__SIGSTRT__ __SIGSTOP__ __SIGSONCE__ __SIGPAUSE__ __SIGCONT__ __SIGHUP__ __SIGALRM__ __SIGINT__
	__SIGTERM__ __SIGKILL__ __SIGEXIT__ __SIGQUIT__ __SIGUSR1__ __SIGUSR2__ __SIGWTUP__ __SIGWDWN__'
BINS='envdir envuidgid fghack pgrphack setlock setuidgid softlimit'
CMDS='__SV_CMD__ __SVCCMD__ __CHKCMD__ __STACMD__ __LOGCMD__'

case ${__SV_NAM__} in
	(daemontools)
		BIN='' PREFIX=''
		;;
	(daemontools-encore)
		BIN='' PREFIX=''
		__SIGQUIT__=-q __SIGUSR1__=-1 __SIGUSR2__=-2
		;;
	(runit)
		BIN=chpst CMDS="${CMDS} __PRECMD__ __SCANCMD__" PREFIX='' SIGNALS="${SIGNALS} __SIGRELD__"
		__SIGWTUP__="'-w 10 up'" __SIGWDWN__="'-w 10 down'" __SCANCMD__="'pkill -CONT runsvdir'"
		__SIGSTRT__=up __SIGSTOP__=down __SIGSONCE__=once __SIGPAUSE__=pause __SIGCONT__=cont
		__SIGHUP__=hup __SIGALRM__=alarm __SIGINT__=interrupt __SIGQUIT__=quit __SIGUSR1__=1
		__SIGUSR2__=2 __SIGTERM__=term __SIGKILL__=kill __SIGEXIT__=exit __SIGRELD__=reload
		__SV_CMD__=runsvdir __SVCCMD__=sv __CHKCMD__="'sv check'" __STACMD__=sv __PRECMD__=chpst __LOGCMD__=svlogd
		;;
	(s6)
		BIN='' PREFIX=s6- __SIGWTUP__="'-wU -T10000'" __SIGWDWN__="'-wD -T10000'"
		__SIGQUIT__=-q __SIGUSR1__=-1 __SIGUSR2__=-2
		CMDS="${CMDS} __SCANCMD__" __SCANCMD__='"s6-svscanctl -an ${SV_RUNDIR}"'
		__SV_CMD__=s6-svscan __SVCCMD__=s6-svc __CHKCMD__=s6-svok __STACMD__=s6-svsat __LOGCMD__=s6-log
		;;
	(*) die "Invalid supervision backend";;
esac

:	${__SIGSTRT__:=-u}
:	${__SIGSTOP__:=-d}
:	${__SIGSONCE__:=-o}
:	${__SIGPAUSE__:=-p}
:	${__SIGCONT__:=-c}
:	${__SIGHUP__:=-h}
:	${__SIGALRM__:=-a}
:	${__SIGINT__:=-i}
:	${__SIGTERM__:=-t}
:	${__SIGKILL__:=-k}
:	${__SIGEXIT__:=-x}
:	${__SVCCMD__:=svc}
:	${__SV_CMD__:=svscan}
:	${__CHKCMD__:=svok}
:	${__STACMD__:=svstat}
:	${__LOGCMD__:=multilog}

begin "Setting up ${__SV_NAM__} supervision backend..."
for bin in ${BINS}; do
	ln -f -s $(type -p ${PREFIX}${BIN:-${bin%:*}}) ${SV_LIBDIR}/bin/${bin#*:}
done
end ${?} Symlinks
for env in __SV_NAM__ ${CMDS} ${SIGNALS}; do
	eval echo ${env}=\"\${${env}}\"
	unset ${env}
done > "${SV_SVCDIR}"/.opt/SVC_BACKEND
end ${?} SVC_BACKEND
}

[ -n "${__SV_NAM__}" ] && sv_backend || sv_cmd "${@}"

#
# vim:fenc=utf-8:ft=sh:ci:pi:sts=0:sw=4:ts=4:
#
