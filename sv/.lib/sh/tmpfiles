#!/bin/sh
# This is a reimplementation of the systemd tmpfiles.d code
# Control creation, deletion, and cleaning of volatile and temporary files
#
# Copyright (c) 2012-2016 Gentoo Foundation
# Released under the 2-clause BSD license.
#
# This instance is a pure-POSIX sh version, written by Robin H Johnson
# <robbat2@gentoo.org>, based on the Arch Linux version as of 2012/01/01:
# http://projects.archlinux.org/initscripts.git/tree/arch-tmpfiles
#
# Integrated/cleaned for supervision by tokiclover <tokiclover@gmail.com>
#
# See the tmpfiles.d manpage as well:
# http://0pointer.de/public/systemd-man/tmpfiles.d.html
# This script should match the manpage as of 2012/03/12
#
# Original file: openrc-0.11.x
# https://github.com/OpenRC/openrc/blob/master/sh/tmpfiles.sh.in
#

if [ -n "${ZSH_VERSION}" ]; then
	emulate sh
	NULLCMD=:
	setopt NO_GLOB_SUBST SH_WORD_SPLIT NULLGLOB
elif [ -n "${BASH_VERSION}" ]; then
	shopt -qs nullglob
fi

SV_LIBDIR="${0%/sh/*}"
CHECKPATH="${SV_LIBDIR}/bin/checkpath"
NAME="${0##*/}"
NULL=/dev/null

_checkprefix()
{
	local prefix
	for prefix; do
		case "${path}" in
			(${prefix}*) return 0 ;;
		esac
	done
	return 1
}

_warninvalid()
{
	echo "${NAME}: invalid line -- num: ${LINENUM}: file ${FILE}" >&2
	ERROR=$((${ERROR}+1))
}

_relabel()
{
	[ -x /sbin/restorecon ] && ${DRYRUN} /sbin/restorecon $CHOPTS ${path}
	${DRYRUN} chown $CHOPTS "${uid}"  ${path}
	${DRYRUN} chgrp $CHOPTS "${gid}"  ${path}
	${DRYRUN} chmod $CHOPTS "${mode}" ${path}
}

_restorecon()
{
    if [ -x /sbin/restorecon ]; then
        ${DRYRUN} /sbin/restorecon -F ${path}
    fi
}

_b()
{
	# Create a block device node if it doesn't exist yet
	[ -e ${path} ] && return
	${DRYRUN} mknod -m "${mode}" ${path} b ${arg/:/ }
	_restorecon ${path}
	${DRYRUN} chown "${uid}:${gid}" ${path}
}

_c()
{
	# Create a character device node if it doesn't exist yet
	[ -e ${path} ] && return
	${DRYRUN} mknod -m "${mode}" ${path} c ${arg/:/ }
	_restorecon ${path}
	${DRYRUN} chown "${uid}:${gid}" ${path}
}

_C()
{
	# recursively copy a file or directory
	[ -e ${path} ] && return
	${DRYRUN} cp -r "${arg}" ${path}
	_restorecon
	${DRYRUN} chown "${uid}" ${path}
	${DRYRUN} chgrp "${gid}" ${path}
	${DRYRUN} chmod "${mode}" ${path}
}

_f()
{
	# Create a file if it doesn't exist yet
	${CREATE} || return 0

	[ -e ${path} ] && return
	${DRYRUN} ${CHECKPATH} -fq -m "${mode}" -o "${uid}:${gid}" ${path}
	[ -z "${arg}" ] || _w
}

_F()
{
	# Create or truncate a file
	${CREATE} || return 0

	${DRYRUN} ${CHECKPATH} -Fq -m "${mode}" -o "${uid}:${gid}" ${path}
	[ -z "${arg}" ] || _w
}

_d()
{
	# Create a directory if it doesn't exist yet
	${CREATE} || return 0

	[ -d ${path} ] && return
	${DRYRUN} mkdir -p -m "${mode}" ${path} 2>${NULL}
	${DRYRUN} ${CHECKPATH} -dq -m "${mode}" -o "${uid}:${gid}" ${path}
}

_D()
{
	# Create or empty a directory
	if [ -d ${path} ] && ${REMOVE}; then
		${DRYRUN} find ${path} -mindepth 1 -maxdepth 1 -xdev -exec rm -rf {} +
		_restorecon
	fi

	if ${CREATE}; then
		${DRYRUN} mkdir -p -m "${mode}" ${path} 2>${NULL}
		${DRYRUN} ${CHECKPATH} -Dq -m "${mode}" -o "${uid}:${gid}" ${path}
	fi
}

_L()
{
	# Create a symlink if it doesn't exist yet
	[ ! -e ${path} ] && ${DRYRUN} ln -s "${arg}" ${path}
	_restorecon
}

_p()
{
	# Create a named pipe (FIFO) if it doesn't exist yet
	${CREATE} || return 0

	[ -p ${path} ] && return
	${DRYRUN} ${CHECKPATH} -Pq -m ${mode} -o "${uid}:${gid}" ${path}
}

_x()
{
	# Ignore a path during cleaning. Use this type to exclude paths from clean-up as
	# controlled with the Age parameter. Note that lines of this type do not
	# influence the effect of r or R lines. Lines of this type accept shell-style
	# globs in place of of normal path names.
	:
	# XXX: we don't implement this
}

_X()
{
	# Ignore a path during cleanup. Use this type to prevent path
	# removal as controled with the age parameter. Note that if path is
	# a directory, the content of the directory is not excluded from
	# clean-up, only the directory itself.
	# Lines of this type accept shell-style globs in place of normal path names.
	:
	# XXX: we don't implement this
}

_r()
{
	# Remove a file or directory if it exists. This may not be used to remove
	# non-empty directories, use R for that. Lines of this type accept shell-style
	# globs in place of normal path names.
	local p

	${REMOVE} || return 0

	for p in ${path}; do
		if [ -f ${p} ]; then
			${DRYRUN} rm -f ${p}
		elif [ -d ${p} ]; then
			${DRYRUN} rmdir ${p}
		fi
	done
}

_R()
{
	# Recursively remove a path and all its subdirectories (if it is a directory).
	# Lines of this type accept shell-style globs in place of normal path names.
	${REMOVE} || return 0

	${DRYRUN} rm -rf --one-file-system ${path}
}

_w()
{
	# Write the argument parameter to a file, if it exists.
	if [ -f ${path} ]; then
		if [ -n "${DRYRUN}" ]; then
			echo "echo \"${arg}\" >>${path}"
		else
			echo "${arg}" >>${path}
		fi
	fi
}

_z()
{
	# Set ownership, access mode and relabel security context of a file or
	# directory if it exists. Lines of this type accept shell-style globs in
	# place of normal path names.
	${CREATE} || return 0

	_relabel
}

_Z()
{
	# Recursively set ownership, access mode and relabel security context of a
	# path and all its subdirectories (if it is a directory). Lines of this type
	# accept shell-style globs in place of normal path names.
	${CREATE} || return 0

	CHOPTS=-R _relabel
}

help_message()
{
	echo "Usage: ${NAME} [--exclude-prefix=path] [--prefix=path] [--boot] [--create] [--remove] [--clean] [--verbose] [--dryrun]"
	exit "${1:-1}"
}

BOOT=false CREATE=false REMOVE=false CLEAN=false VERBOSE=false LINENO=false
EXCLUDE= PREFIX= FILE= DRYRUN=
# XXX: The harcoding of /usr/lib/ is an explicit choice by upstream
tmpfiles_dirs='/usr/lib/tmpfiles.d/ /run/tmpfiles.d/ /etc/tmpfiles.d/'
tmpfiles_names= tmpfiles_d=

# Build a list of sorted unique basenames
# directories declared later in the tmpfiles_d array will override earlier
# directories, on a per file basename basis.
# `/etc/tmpfiles.d/foo.conf' supersedes `/usr/lib/tmpfiles.d/foo.conf'.
# `/run/tmpfiles/foo.conf' will always be read after `/etc/tmpfiles.d/bar.conf'
for d in ${tmpfiles_dirs}; do
	[ -d "${d}" ] && for f in ${d}*.conf ; do
		case "${f}" in
			*/systemd.conf|*/systemd-*.conf) continue ;;
		esac
		[ -f "${f}" ] && tmpfiles_names="${tmpfiles_names}\n${f##*/}"
	done # for f in ${d}
done # for d in ${tmpfiles_dirs}
tmpfiles_names="$(printf "${tmpfiles_names}\n" | sort -u)"

for b in ${tmpfiles_names}; do
	real_f=
	for d in ${tmpfiles_dirs}; do
		f=${d}${b}
		[ -f ${f} ] && real_f=${f}
	done
	tmpfiles_d="${tmpfiles_d} ${real_f}"
done

while [ "${#}" -gt 0 ]; do
	case "${1}" in
		(--boot)    BOOT=true    ;;
		(--create)  CREATE=true  ;;
		(--remove)  REMOVE=true  ;;
		(--clean)   CLEAN=true   ;; # TODO: Not implemented
		(--verbose) VERBOSE=true ;;
		(--dryrun)  DRYRUN=echo  ;;
		(--exclude-prefix=*) EXCLUDE="${EXCLUDE}${1#--exclude-prefix=} ";;
		(--prefix=*) PREFIX="${PREFIX}${1#--prefix=} " ;;
		(--help) help_message 0 ;;
		(*) echo "${NAME}: invalid argument -- ${1}" >&2; help_message ;;
	esac
	shift
done

if ${CLEAN}; then
	echo "${NAME} clean mode is not implemented" >&2
	exit 1
fi

${CREATE} || ${REMOVE} || help_message

ERROR=0

# loop through the gathered fragments, sorted globally by filename.
# `/run/tmpfiles/foo.conf' will always be read after `/etc/tmpfiles.d/bar.conf'
for FILE in ${tmpfiles_d}; do
	LINENUM=0

	### FILE FORMAT ###
	# XXX: We ignore the 'Age' parameter
	# 1    2              3    4    5    6   7
	# Cmd  Path           Mode UID  GID  Age Argument
	# d    /run/user      0755 root root 10d -
	# Mode, UID, GID, Age, Argument may be omitted!
	# If Cmd ends with !, the line is only processed if --boot is passed

	# XXX: Upstream says whitespace is NOT permitted in the Path argument.
	# But IS allowed when globs are expanded for the x/r/R/z/Z types.
	while read cmd path mode uid gid age arg; do
		LINENUM=$((${LINENUM}+1))
		FORCE=false

		# Unless we have both command and path, skip this line.
		[ -n ${path} ] || continue
		case "${cmd}" in
			([#]*|'') continue ;;
		esac

		while [ "${#cmd}" -gt 1 ]; do
			case "${cmd}" in
				(*!) cmd=${cmd%!}; ${BOOT} || continue 2 ;;
				(*+) cmd=${cmd%+}; FORCE=true ;;
				(*) _warninvalid ; continue 2 ;;
			esac
		done

		# whine about invalid entries
		case "${cmd}" in
			([fFwdDpLcCbxXrRzZ]) ;;
			(*) _warninvalid ; continue ;;
		esac

		# fall back on defaults when parameters are passed as '-'
		case "${mode}" in
			(-|'')
			case "${cmd}" in
				([pfF]) mode=0644 ;;
				([dD])  mode=0755 ;;
			esac
			;;
		esac

		case "${uid}" in
			(-|'') uid=0 ;;
		esac
		case "${gid}" in
			(-|'') gid=0 ;;
		esac
		case "${age}" in
			(-|'') age=0 ;;
		esac
		case "${arg}" in
			(-|'') arg= ;;
		esac

		[ -n "${EXCLUDE}" ] &&   _checkprefix ${EXCLUDE} && continue
		[ -n "${PREFIX}"  ] && ! _checkprefix ${PREFIX}  && continue

		if ${FORCE}; then
			case "${cmd}" in
				([pLcb]) [ -f ${path} ] && ${DRYRUN} rm -f "${path}"
			esac
		fi

		${VERBOSE} && echo ${cmd} "${path}" "${mode}" "${uid}" "${gid}" "${age}" "${arg}"
		_${cmd}
		case "${?}" in
			(0) ;;
			(*) [ -z "${DRYRUN}" ] && ERROR=$((${ERROR}+1)) ;;
		esac
	done <${FILE}
done

exit ${ERROR}

# vim:fenc=utf-8:ts=2:sw=2:sts=2:noet:ft=sh:
