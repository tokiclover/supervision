#
# $Header:  /lib/sv/sh/sv-backend                        Exp $
# $Author: (c) 2015-6 tokiclover <tokiclover@gmail.com>  Exp $
# $License: 2-clause/new/simplified BSD                  Exp $
# $Version: 1.2 2016/05/01 21:09:26                      Exp $
#

:	${SV_LIBDIR:=/lib/sv}
:	${RS_SVCDIR:=/etc/rs.d}
:	${SV_SVCDIR:=/etc/sv}
:	${SV_RUNDIR:=/run/service}
:	${SV_TMPDIR:=${SV_RUNDIR}/.tmp}
:	${SV_SERVICE:=/etc/service}
:	${NULL=/dev/null}
:	${SV_SRT_DEP_ORD=need:NEED use:USE before:BEFORE after:AFTER}
:	${SV_SOP_DEP_ORD=after:AFTER after:AFTER use:USE need:NEED}

#
# ZSH compatibility
#
if [ -n "${ZSH_VERSION}" ]; then
	emulate sh
	setopt SH_WORD_SPLIT
	disable -r end
fi

svc_backend()
{
	local CG PP STG args
	args="$(getopt -o 0123CPi -l init,nocgroup,nopath -n backend -s sh -- "${@}")"
	eval set -- ${args}

	while true; do
	case "${1}" in
		(-i|--init)
			for arg in ${SV_LIBDIR}/sh/*functions \
				${SV_SVCDIR}/.opt/sv.conf ${SV_SVCDIR}/.opt/SVC_BACKEND; do
				source ${arg}
			done;;
		(-C|--nocg*) CG=No ;;
		(-P|--nopa*) PP=No ;;
		(*-[0123]) STG=${1};;
		(*) shift; break ;;
	esac
	shift
	done

	if [ -z "${PP}" ]; then
		umask 022
		PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/X11R6/bin
		PATH=${SV_LIBDIR}/bin:${PATH}:/usr/local/bin:/usr/local/sbin
	fi
	#
	# Bring run level or stage up
	#
	case "${STG}" in
		(*-[0123]) rs ${STG} -r stage;;
	esac

	[ -n "${CG}"  ] && return 0
	case "${RS_TYPE}" in
		(sv)
	SOURCE "${SV_TMPDIR}"/SV_OPTIONS
		;;
		(rs)
	SOURCE "${SV_TMPDIR}"/RS_OPTIONS
		;;
	esac
	#
	# Set up CGroup
	#
	case "${OS_NAME}" in
		(Linux)
		SVC_NAME="${SVC_NAME:-${SV_CMD}}" cgroup_add_service
		;;
	esac
}

svc_shutdown()
{
	#
	# Service halt
	#
	begin "Stopping Stage-2"
	rs -2 stage stop
	case ${?} in
		(0)
		;;
		(*)
	eval ${SVCCMD} ${SIGWDWN-${SIGEXIT}} ${SV_RUNDIR}/*
		;;
	esac
	end ${?}
	#
	# CGroup clean up
	#
	case "${OS_NAME}" in
		(Linux)
		SVC_NAME="${SVC_NAME:-${SV_CMD}}" cgroup_remove_service
		;;
	esac
	#
	# System halt
	#
	begin "Stopping Stage-1"
	rs -1 stage stop
	end ${?}
	begin "Starting Stage-3"
	rs -3 --rs stage
	end ${?}
}

tmp_service()
{
	#
	# Handle read-only root-FS and/or static /service/
	#
	case "${SV_RUNDIR}" in
		("${SV_SERVICE}")
		;;
		(*/run/*|*/tmp/*)
		rm -f -r "${SV_RUNDIR}"
		mkdir -p "${SV_RUNDIR}"
		cp -LRpu "${SV_SERVICE}"/.[eol]* "${SV_RUNDIR}"
		;;
	esac
	svc_tmpdir
}
svc_tmpdir()
{
	rm -f -r "${SV_TMPDIR}"
	mkdir -p "${SV_TMPDIR}"/pids "${SV_TMPDIR}"/wait
	mkdir -p "${SV_TMPDIR}"/down "${SV_TMPDIR}"/fail "${SV_TMPDIR}"/star
	#
	# Initialization
	#
	echo "${SV_OPT}" >"${SV_TMPDIR}"/sv
	OS_NAME=$(uname -s)
	env_sv OS_NAME

	#
	# Set up CGroup
	#
	if yesno ${SV_CGROUP:-YES}; then
		cgroup_start_sys
		case ${?} in
			(0) SV_CGROUP=Yes;;
			(*) SV_CGROUP=No ;;
		esac
		env_sv SV_CGROUP
	fi
}

#
# vim:fenc=utf-8:ft=sh:ci:pi:sts=0:sw=4:ts=4:
#
