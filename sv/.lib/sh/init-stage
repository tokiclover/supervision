#!/bin/sh
#
# $Header:  /lib/sv/sh/init-stage                        Exp $
# $Author: (c) 2015-6 tokiclover <tokiclover@gmail.com>  Exp $
# $License: 2-clause/new/simplified BSD                  Exp $
# $Version: 1.0 2016/05/25                               Exp $
#

:	${name=${0##*/}}
:	${SV_LIBDIR:=${0%/sh/*}}
source "${0%/*}"/runscript-functions ||
	{ echo "Required file not found." >&2; exit 1; }
source ${SV_SVCDIR}/.opt/SVC_BACKEND
source ${SV_SVCDIR}/.opt/sv.conf
umask 022

svc_init()
{
	local dir opt procfs OS_NAME="$(uname -s)"
	[ -w /etc/mtab ] || opt=-n

	procfs=proc
	case "${OS_NAME}" in
		(GNU/kFreeBSD) procfs=linprocfs;;
	esac

	if ! mount_info /proc; then
		begin "Mounting /proc"
		mount ${opt} -t ${procfs} -o ${SYSFS_OPTS:-nodev} proc /proc
		end ${?}
	fi

	case "${OS_NAME}" in
		(Linux)
	if [ ! -d /run ]; then
		begin "Creating /run"
		mkdir -m 0755 -p /run
		end ${?}
	fi
	if ! mount_info /run; then
		begin "Mounting /run"
		mount ${opt} -t tmpfs -o nodev,mode=755,size=${RUN_FS_SIZE:-1%} run /run
		end ${?}
	fi
	for dir in /var/*; do
		[ -L "${dir}" ] || continue
		dir="$(readlink ${dir})"
		case "${dir}" in
			(/run*)
			begin "Creating ${dir}"
			mkdir -m 0755 -p "${dir}"
			end ${?}
			;;
		esac
	done
		;;
	esac

}

svc_level()
{
	case "${1}" in
		(-0) ACTION=sysinit LEVEL=S;;
		(-1) ACTION=boot    LEVEL=S;;
		(-2)
		case "$(cat /proc/cmdline)" in
			(*nonetwork*) ACTION=nonetwork LEVEL=2;;
			(*single*)    ACTION=single  LEVEL=1;;
			(*default*|*) ACTION=default LEVEL=3;;
		esac;;
		(-3) ACTION=${ACTION:=shutdown} LEVEL=${LEVEL:=0};;
		(*) return;;
	esac

	if yesno ${RC_INIT_SYS:-YES}; then
		begin "${MSG:-System ${ACTION}}\n"
		RUNLEVEL=${LEVEL} rc ${ACTION}
		end ${?}
	fi
	[ -d "${SV_RUNDIR}" ] || svc_tmpdir

	case "${ACTION}" in
		(single|boot)
			${SV_LIBDIR}/sh/dep -v ${1} -d "${SV_SERVICE}/.${ACTION}"
			;;
	esac
}

svc_rsh()
{
:	${RS_SHELL:=${SHELL:-sh}}
	case "${RS_SHELL}" in
		(*sulogin) exec ${RS_SHELL} -p /dev/tty8;;
		(*sh) exec 2>&1; exec ${RS_SHELL} -aim  ;;
	esac
}

svc_shutdown()
{
	#
	# Service halt
	#
	begin "Stopping Stage-2"
	rs -2 stage stop
	case ${?} in
		(0)
		;;
		(*)
	eval ${__SVCCMD__} ${__SIGWDWN__-${__SIGEXIT__}} ${SV_RUNDIR}/*
		;;
	esac
	end ${?}
	#
	# CGroup clean up
	#
	case "${OS_NAME}" in
		(Linux)
		SVC_NAME="${__SV_CMD__}" cgroup_remove_service
		;;
	esac
	#
	# System halt
	#
	begin "Stopping Stage-1"
	rs -1 stage stop
	end ${?}
	begin "Starting Stage-3"
	rs -3 --rs stage
	end ${?}
}

svc_tmpdir()
{
	#
	# Handle read-only root-FS and/or static /service/
	#
	case "${SV_RUNDIR}" in
		("${SV_SERVICE}")
		;;
		(*/run/*|*/tmp/*)
		rm -f -r "${SV_RUNDIR}"
		mkdir -p "${SV_RUNDIR}"
		cp -LRpu "${SV_SERVICE}"/.[eol]* "${SV_RUNDIR}"
		;;
	esac
	mkdir -p "${SV_TMPDIR}"/down "${SV_TMPDIR}"/fail \
		"${SV_TMPDIR}"/star "${SV_TMPDIR}"/wait
	#
	# Initialization
	#
	echo "${__SV_NAM__}:${__SV_CMD__}" >"${SV_TMPDIR}"/sv
	OS_NAME=$(uname -s)
	env_sv OS_NAME

	#
	# Set up CGroup
	#
	if yesno ${SV_CGROUP:-YES}; then
		cgroup_start_sys
		case ${?} in
			(0) SV_CGROUP=Yes;;
			(*) SV_CGROUP=No ;;
		esac
		env_sv SV_CGROUP
	fi
}

begin "Starting Init-Stage${1}\n"
case "${1}" in
	(-0)
	svc_tmpdir
	echo $$ >${SV_TMPDIR}/${__SV_CMD__}.pid
	${__SV_CMD__} ${SV_RUNDIR} "${SV_OPTS}" &
	;;
	(-1)
	svc_init
	svc_level -0
	rs -0 --rs stage
	svc_level -1
	rs -1 --rs stage
	;;
	(-2)
	#
	# Set up CGroup
	#
	case "${OS_NAME}" in
		(Linux)
		SVC_NAME="${__SV_CMD__}" cgroup_add_service
		;;
	esac
	svc_level -2
	#
	# Bring up what left and stage-2 assuming `svcscan'
	# is ready when the following pidfile is present
	#
	sh -c "source ${SV_LIBDIR}/sh/runscript-functions;
		svc_wait -E 10000 ${__SV_CMD__} ${SV_TMPDIR}/${__SV_CMD__}.pid;
		rs -1 stage; rs -2 stage;" &

	echo $$ >${SV_TMPDIR}/${__SV_CMD__}.pid
	exec ${__SV_CMD__} ${SV_RUNDIR} "${SV_OPTS}"
	#
	# Drop into a rescue shell
	#
	svc_rsh
	;;
	(-3)
	svc_shutdown
	svc_level -3
	;;
esac
ret="${?}"
end "${ret}"
exit "${ret}"

#
# vim:fenc=utf-8:ft=sh:ci:pi:sts=0:sw=4:ts=4:
#
