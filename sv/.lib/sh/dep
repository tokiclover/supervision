#!/bin/sh
#
# $Header:  /lib/sv/sh/dep                               Exp $
# $Author: (c) 2015-6 tokiclover <tokiclover@gmail.com>  Exp $
# $License: 2-clause/new/simplified BSD                  Exp $
# $Version: 0.4 2016/07/01 21:09:26                      Exp $
#

export LC_ALL=C

:	${name=${0##*/}}
:	${SV_LIBDIR:=${0%/sh/*}}
source "${0%/*}"/runscript-functions ||
	{ echo "Required file not found." >&2; exit 1; }

umask 022
mkdir -p ${SV_TMPDIR}/deps

while [ ${#} -gt 0 ]; do
case "${1}" in
	(-r|--rs) RS_TYPE=rs;;
	(-v|--sv) RS_TYPE=sv;;
	(-[0123]) RS_STAGE="${1#*-}";;
	(-d|--dir) DIR="${2}" ;;
	(*) error "illegal option -- ${@}"; exit 1;;
esac
shift
done

:	${RS_STAGE:=2}
SV_DEPDIR=${SV_TMPDIR}/deps/stage-${RS_STAGE}
SV_CGROUP=0
mkdir -p ${SV_DEPDIR}
:	${RS_RUNDIR:=${RS_SVCDIR}/stage-${RS_STAGE}}
:	${RS_TYPE:=sv}

if (eval "var=1; var+=2; test x${var} = x12 2>${NULL}"); then
append()
{
	local var="${1}"
	shift
	eval "${var}+=\" ${*}\""
}
else
append()
{
	local var="${1}"
	shift
	eval "${var}=\"\${$var} ${*}\""
}
fi
append_unique()
{
	local val var="${1}"
	shift
	for val; do
		eval is_in "${val} \${$var}" || append "${var}" "${val}"
	done
}

remove()
{
	local list val="${2}" var="${1}"
	shift 2
	eval list="\" \$${var} \""
	list="${list// ${val} / }"
	list="${list# }"
	eval "${var}='${list% }'"
}
remove_all()
{
	local val var="${1}"
	shift
	for val; do
		remove "${var}" "${val}"
	done
}
is_in()
{
	local val="${1}"
	shift
	case " ${*} " in
		(*" ${val} "*) return 0;;
		(*)            return 1;;
	esac
}

add_dep()
{
	local svc="${1}" dep="${2%:*}" DEP="${2#*:}"
	shift 2
	if [ "${#}" -gt 0 ]; then
		append "${dep}_1" "${svc}"
		append_unique "${dep}_2" "${@}"
		eval "${DEP}=\"\$${DEP}\n${svc}:${@}\""
	fi
}
dep_gen()
{
	local RC_OPTS SVC_DEBUG SVC_NAME SVC_NEED SVC_USE SVC_BEFORE SVC_AFTER name
	local dep

	case "${RS_TYPE}" in
		(sv) SVC_DIR=${SV_SVCDIR}/${1};;
	esac
	SERVICE_LIST="${SERVICE_LIST} ${1}"
	SVC_NAME="${1}"
	source ${SV_SVCDIR}/.opt/SVC_OPTIONS

	for dep in ${__SV_SRT_DEP_ORD__}; do
		eval add_dep "${SVC_NAME}" "${dep}" \${SVC_${dep#*:}}
	done
}

rm -f ${SV_DEPDIR}/${RS_TYPE}_*
[ -n "${DIR}" -a -d "${DIR}" ] ||
case "${RS_TYPE}" in
	(rs) DIR=${RS_RUNDIR} ;;
	(sv) DIR=${SV_SERVICE};;
esac

cd ${DIR}
for svc in *; do
	[ "${svc}" = "*" ] && continue
	dep_gen ${svc##*/}
done

for dep in ${__SV_SRT_DEP_ORD__}; do
	DEP="${dep#*:}"
	dep="${dep%:*}"
	FILE=${SV_DEPDIR}/${RS_TYPE}_${dep}

	#
	# Swap dependency order to get a natural order like 'after'
	#
	case ${dep} in
		(before)
		eval dep_1="\"\$${dep}_2\""
		eval "${dep}_2=\"\$${dep}_1\""
		eval "${dep}_1=\"${dep_1}\""
		;;
	esac

	eval echo -e "\$${DEP}" >${FILE}

	eval "${dep}_0='${SERVICE_LIST}'"
	eval remove_all "${dep}_0" "\$${dep}_1" "\$${dep}_2"
	#
	# Move up dependency priority if necessary
	#
	for val in $(eval echo "\$${dep}_1"); do
		if eval is_in "${val}" "\$${dep}_2"; then
			append_unique "${dep}_3" "${val}"
			remove "${dep}_1" "${val}"
			remove "${dep}_2" "${val}"
		fi
	done
	#
	# Print dependency list
	#
	for i in 0 1 2 3; do
		eval echo "${dep}_${i}=\\\" \$${dep}_${i} \\\""
	done
done >${SV_DEPDIR}/${RS_TYPE}

#
# vim:fenc=utf-8:ft=sh:ci:pi:sts=0:sw=4:ts=4:
#
