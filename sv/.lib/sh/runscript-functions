#
# $Header:  /lib/sv/sh/runscript-functions               Exp $
# $Author: (c) 2015-6 tokiclover <tokiclover@gmail.com>  Exp $
# $License: 2-clause/new/simplified BSD                  Exp $
# $Version: 1.4 2016/12/18 21:09:26                      Exp $
#

__RUNSCRIPT_FUNCTIONS__=1

:	${SV_LIBDIR:=/lib/sv}
:	${SV_SVCDIR:=/etc/sv}
:	${SV_RUNDIR:=/run/sv}
:	${SV_TMPDIR:=${SV_RUNDIR}/.tmp}
NETWORKFS='afs ceph cifs coda davfs fuse fuse.sshfs gfs glusterfs lustre ncpfs nfs nfs4 ocfs2 shfs smbfs'
NULL='/dev/null'
__SV_DEPS_ORDER__='need:NEED use:USE before:BEFORE after:AFTER'

__ERR_END__='{ end 0; return; };'
__ERR_BUSY__='{ end 1 busy; return 16; };'
PATH=${SV_LIBDIR}/bin:${SV_LIBDIR}/sbin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

export PATH SV_LIBDIR RS_RUNDIR SV_SVCDIR SV_TMPDIR

[ -n "${__FUNCTIONS__}"              ] || . "${SV_LIBDIR}"/sh/functions
[ -n "${__SUPERVISIONS_FUNCTIONS__}" ] || . "${SV_LIBDIR}"/sh/supervision-functions
[ -n "${__CGROUP_FUNCTIONS__}"       ] || . "${SV_LIBDIR}"/sh/cgroup-functions

checkpath()
{
	${SV_LIBDIR}/bin/checkpath "${@}"
}
fstabinfo()
{
	${SV_LIBDIR}/bin/fstabinfo "${@}"
}
mountinfo()
{
	${SV_LIBDIR}/bin/mountinfo "${@}"
}
service()
{
	${SV_LIBDIR}/sbin/service "${@}"
}
waitfile()
{
	${SV_LIBDIR}/bin/waitfile "${@}"
}

rs_status()
{
	local msg
	svc_state -s && msg=started || msg=stopped
	echo -n ${msg}
	[ "${msg}" = "started" ]
}

svc_add()
{
	[ -n "${RS_STAGE}" ] || return
	svc_state -e && ln -fns ${SV_SVCDIR}/${SVC_NAME} ${RS_RUNDIR}
}

svc_del()
{
	[ -n "${RS_STAGE}" ] || return
	rm -fr "${RS_RUNDIR}/${SVC_NAME}"
}
svc_zap()
{
	rm -f ${SV_TMPDIR}/*/${SVC_NAME}
}

rs_cmd()
{
	local ARGS CMD cmd="${1}" val

	case "${cmd}" in
		(start|stop)
			if [ "${cmd}" = "start" ]; then
				svc_config || return 4
				svc_depend "${cmd}" || return 3
			fi
			CMD="${cmd}_pre ${cmd} ${cmd}_post";;
		(restart) command -v ${cmd} >${NULL} 2>&1 ||
			CMD="stop_pre stop stop_post
			   start_pre start start_post";;
		(add|status) CMD=rs_${cmd} ;;
		(*) svc_cmd "${@}"; return ;;
	esac

	begin "service ${cmd}: "
	for cmd in ${CMD}; do
		command -v ${cmd} >${NULL} 2>&1 || continue
		eval ${cmd} ${ARGS}
		case ${?} in
			(0) ;;
			(*) val=2; break;;
		esac
	done
	end ${val-${?}}
}

svc_sig()
{
	if [ -z "${1}" ]; then
		error "insufficient/invalid argument"
		return 1
	fi

	if [ -n "${SVC_PIDFILE}" -a -e "${SVC_PIDFILE}" ]; then
		pkill -${1} -F ${SVC_PIDFILE}
	else
		error "no pidfile (SVC_PIDFILE) defined"
		return 1
	fi
}

svc_wait()
{
	local file limit opt val=0

	case "${1}" in
		(-[E]) opt="${1}"; shift;;
	esac
	limit="${1:-60}"
	file=${2:-${SV_TMPDIR}/down/${SVC_NAME}}

	while [ ${val} -le ${limit} ]; do
		val=$((${val}+1))
		waitfile ${opt} 1 ${file} && return 0
		if [ $((${val}%2)) -eq 0 ]; then
			info "Waiting for ${file} (${val} seconds)"
		fi
	done
	return 1
}

start()
{
	[ -n "${SVC_CMD}" ] || return 0

	#
	# Set up CGroup
	#
	if [ "${OS_NAME}" = "Linux" ]; then
		if yesno "${SV_CGROUP}"; then
			cgroup_add_service
		fi
	fi
	#
	# Use ENV dir(s) if requested
	#
	cd ${SV_SVCDIR}
	yesno "${ENV_DIR}" && svc_environ

	eval ${ENV_CMD} ${ENV_OPTS} ${PRE_CMD} ${PRE_OPTS} ${SVC_CMD:-${SVC_NAME}} ${SVC_OPTS}
}
stop()
{
	[ -n "${SVC_CMD}" ] || return 0

	if [ "${OS_NAME}" = "Linux" ]; then
		if yesno "${SV_CGROUP}"; then
			cgroup_remove_service && return
		fi
	fi
	[ -n "${SVC_PIDFILE}" -a -f "${SVC_PIDFILE}" ] &&
		pkill -TERM -F ${SVC_PIDFILE}
}


#
# vim:fenc=utf-8:ft=sh:ci:pi:sts=0:sw=4:ts=4:
#
