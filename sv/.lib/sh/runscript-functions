#
# $Header:  /lib/sv/sh/runscript-functions               Exp $
# $Author: (c) 2015-6 tokiclover <tokiclover@gmail.com>  Exp $
# $License: 2-clause/new/simplified BSD                  Exp $
# $Version: 1.2 2016/05/05 21:09:26                      Exp $
#

__RUNSCRIPT_FUNCTIONS__=1

:	${SV_LIBDIR:=/lib/sv}
:	${RS_SVCDIR:=/etc/rs.d}
:	${SV_SVCDIR:=/etc/sv}
:	${SV_RUNDIR:=/run/service}
:	${SV_TMPDIR:=${SV_RUNDIR}/.tmp}
:	${SV_SERVICE:=/etc/service}
:	${NETWORKFS=afs ceph cifs coda davfs fuse fuse.sshfs gfs glusterfs lustre ncpfs nfs nfs4 ocfs2 shfs smbfs}
:	${NULL=/dev/null}
:	${__SV_SRT_DEP_ORD__=need:NEED use:USE before:BEFORE after:AFTER}
:	${__SV_SOP_DEP_ORD__=after:AFTER before:BEFORE use:USE need:NEED}

__ERR_END__='{ end 0; return; };'
__ERR_BUSY__='{ end 1 busy; return 16; };'
PATH=${SV_LIBDIR}/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

export PATH RS_SVCDIR SV_LIBDIR SV_RUNDIR SV_SERVICE SV_SVCDIR SV_TMPDIR

[ -n "${__FUNCTIONS__}"              ] || source "${SV_LIBDIR}"/sh/functions
[ -n "${__SUPERVISIONS_FUNCTIONS__}" ] || source "${SV_LIBDIR}"/sh/supervision-functions
[ -n "${__CGROUP_FUNCTIONS__}"       ] || source "${SV_LIBDIR}"/sh/cgroup-functions

env_rs()
{
	[ -n "${*}" ] && set_env "RS_OPTIONS" "${@}"
}

rs_status()
{
	local msg
	svc_state -s && msg=started || msg=stopped
	echo -n ${msg}
	[ "${msg}" = "started" ]
}

rs_add()
{
	svc_state -e && ln -fns ${RS_SVCDIR}/${SVC_NAME} ${RS_RUNDIR}
}

svc_del()
{
	eval rm -fr "\${${SV_TYPE}_RUNDIR}/${SVC_NAME}"
}
svc_zap()
{
	rm -f ${SV_TMPDIR}/${SVC_NAME}_OPTIONS ${SVC_PIDFILE} \
		${SV_TMPDIR}/*/${SVC_NAME}
}

rs_cmd()
{
	local ARGS CMD cmd="${1}" val

	case "${cmd}" in
		(start|stop) CMD="${cmd}_pre ${cmd} ${cmd}_post";;
		(restart) command -v ${cmd} >${NULL} 2>&1 ||
			CMD="stop_pre stop stop_post
			   start_pre start start_post";;
		(add|status) CMD=rs_${cmd} ;;
		(*) svc_cmd "${@}"; return ;;
	esac

	begin "service ${cmd}: "
	for cmd in ${CMD}; do
		command -v ${cmd} >${NULL} 2>&1 || continue
		eval ${cmd} ${ARGS}
		case ${?} in
			(0) ;;
			(*) val=2; break;;
		esac
	done
	end ${val-${?}}
	return ${val}
}

svc_wait()
{
	local FILE LIMIT NAME OPT VAL

	case "${1}" in
		(-E) OPT='!'; shift;;
	esac
	LIMIT=${1:-6000} NAME=${2:-${SVC_NAME}}
	FILE=${3:-${SV_TMPDIR}/down/${NAME}}

	while [ ${OPT} -e ${FILE} ]; do
		VAL=$((${VAL}+1)); sleep 0.01s
		case ${VAL} in
			(*00|*000) info "Waiting for ${NAME}...(${VAL%00} seconds)";;
		esac
		[ ${VAL} -eq ${LIMIT} ] && return 1
	done
	return 0
}

#
# vim:fenc=utf-8:ft=sh:ci:pi:sts=0:sw=4:ts=4:
#
