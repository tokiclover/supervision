#!/sbin/sv-run
#
# $Id: @(#) /etc/sv/dmcrypt    2017/01/12                             Exp $
# $L$: 2-clause/new/simplified BSD License                            Exp $
# $C$: (c) 2016 tokiclover <tokiclover@gmail.com>                     Exp $
#

description="Set up (dm-crypt) crypted devices"
SVC_AFTER="dev mdev udev kmod"
SVC_BEFORE="checkfs"
SVC_KEYWORD="docker jail openvz prefix systemd-nspawn timeout uml vserver xenu lxc"

blkid="$(command -v blkid 2>${NULL})"
crypttab="/etc/crypttab"
cryptsetup="$(command -v cryptsetup 2>${NULL})"

MKSWAP()
{
	[ -e "${1}" ] || return

	begin "Setting up ${1} swap device"
	mkswap ${1} >${NULL} 2>&1
	end "${?}"

	if [ "${?}" = 0 ]; then
		begin "Enabling ${1} swap volume"
		swapon ${1}
		end "${?}"
	fi
}

get_device()
{
	local blkid_opts

	case "${1}" in
		(*[Uu][Uu][Ii][Dd]=*)     blkid_opts="-U";;
		(*[Ll][Aa][Bb][Ee][Ll]=*) blkid_opts="-L";;
		(*) echo "${1}"; return;;
	esac
	echo "$(${blkid} ${blkid_opts} ${1#*=} 2>${NULL})"
}

#
# Clean up remdev mount point and LUKS keyfiles
#
crypt_cleanup()
{
	local dir map

	for dir in ${SV_TMPDIR}/${SVC_NAME}:*; do
		[ -d "${dir}" ] || continue
		begin "Umounting ${dir} (removable device)"
		umount "${dir}" >${NUL} 2>&1
		end "${?}"
	done

	for map in /dev/mapper/${SVC_NAME}:*; do
		[ -e "${map}" ] || continue
		${cryptsetup} close "${map##*/}" >${NULL} 2>&1
	done
}

#
# Build an entry list beforehand
#
crypt_entry()
{
	[ -f "${crypttab}" ] || return

	while read volume device keyfile options; do
		case "${volume}" in
			([a-zA-Z]*)
			DMCRYPT_DEVICE_LIST="${DMCRYPT_DEVICE_LIST}\n${volume};${device};${keyfile};${options}\n"
			;;
		esac
	done <${crypttab}
}

#
# LUKS Detached header setup handler
#
crypt_header()
{
	[ -e "${header}" ] && return
	header="$(get_device "${header}")"
}

mount_remdev()
{
	local mnt_dir dir_tail=${1##*/}
	mnt_dir=${SV_TMPDIR}/${SVC_NAME}:${dir_tail##*=}

	if [ ! -d ${mnt_dir} ]; then
		mkdir -p -m 0700 ${mnt_dir}
		if ! mount -r ${1} ${mnt_dir} >${NULL} 2>&1; then
			error "Failed to mount ${1} (removable device)"
			return 1
		fi
	fi
	echo "${mnt_dir}"
}

nofail()
{
	if [ -z "${nofail}" ]; then
		[ "${1}" = 0 ] || retval=$((${retval}+1))
	fi
	return ${1}
}

start_pre()
{
	[ -n "${blkid}" -a -x "${blkid}" ] && [ -f "${crypttab}" ] &&
		[ -n "${cryptsetup}" -a -x "${cryptsetup}" ]
}

start()
{
	local NOFAIL='nofail 1; continue;'
	local retval=0 crypt_opts crypt_type crypt_precmd keymode luks_key
	local volume device keyfile options ifs="${IFS}" entry
	local discard cipher hash header offset skip keyfile_offset keyfile_size
	local key_slot noauto nofail key_size tcrypt_hidden tcrypt_keyfile
	local tcrypt_system readonly timeout tmp tries verify
	local var val

	crypt_entry
	IFS='
'
	for entry in $(printf "${DMCRYPT_DEVICE_LIST}"); do
		IFS=';'
		eval set -- ${entry}
		volume="${1}" device="${2}" keyfile="${3}" options="${4}"
		#
		# Check availability of the volume
		#
		${cryptsetup} status "${volume}" >${NULL} 2>&1 && continue

		#
		# Setup the environment for this entry
		#
		IFS=",${IFS}"
		eval set -- ${options}
		IFS="${ifs}"
		while [ "${#}" -gt 0 ]; do
			var="${1%%=*}" val="${1#*=}"
			case "${1}" in
				(tcrypt-keyfile=*)
					tcrypt_keyfile="${tcrypt_keyfile} --key-file ${1#*=}" ;;
				(luks|loopaes|plain|swap|tcrypt)
					crypt_type="${1}" ;;
				(discard|noauto|nofail|tcrypt-hidden|tcrypt-system|verify)
					eval "${1/-/_}=1" ;;
				([chkost]*=*)
					eval "${var//-/_}='${val}'" ;;
			esac
			shift
		done
		#
		# Setup the keyfile
		#
		case "${keyfile}" in
			(-|none|pwd) keyfile=;;
			(/[a-zA-Z]*)
			eval set -- ${keyfile/:/ }
			keyfile="${1}" keymode="${2}"

			#
			# Removable device is only supported for {reg,gpg} keymode
			#
			if [ -n "${remdev}" ]; then
				keyfile="$(mount_remdev "${remdev}")${keyfile}"
			fi
			if [ ! -e "${keyfile}" ]; then
				error "No keyfile found for ${volume} volume"
				eval ${NOFAIL}
			fi

			case "${keymode}" in
				(''|reg) ;;
				(gpg)
				:	${gpg:=$(command -v gpg 2>${NULL})}
				if [ -z "${gpg}" ]; then
					error "No gpg binary found (skippping ${volume} volume)"
					eval ${NOFAIL}
				fi
				crypt_precmd="${gpg} --quiet --decrypt ${keyfile} |"
				keyfile=-
				;;
				(luks)
				luks_key="/dev/mapper/${SVC_NAME}:${keyfile##*/}"
				[ -e "${luks_key}" ] ||
				if ${cryptsetup} open --type luks \
					"${keyfile}" "${luks_key##*/}" --readonly; then
					keyfile="${luks_key}"
				else
					error "Failed to decrypt LUKS keyfile (skipping ${volume} volume)"
					eval ${NOFAIL}
				fi
				;;
				(*)
				error "Invalid keymode (skipping ${volume} volume)"
				eval ${NOFAIL}
				;;
			esac
			;;
			(*)
			error "Invalid keyfile (skipping ${volume} volume)"
			eval ${NOFAIL}
			;;
		esac

		#
		# Setup cryptsetup arguments
		#
		device="$(get_device "${device}")"
		crypt_opts="open ${device} ${volume}"

		if cryptsetup isLuks ${device} >${NULL} 2>&1; then
			crypt_type=LUKS
			if [ -n "${swap}" ]; then
				warn "LUKS header detected and swap mode is enabled (skipping ${volume} volume)"
				eval ${NOFAIL}
			fi
		fi

		case "${crypt_type}" in
			(luks|LUKS)
			if [ "${crypt_type}" != "LUKS" ]; then
				error "Invalid LUKS device (skipping ${volume} volume)"
				eval ${NOFAIL}
			fi
			if [ -n "${header}" ]; then
				crypt_header
				if [ -z "${header}" ]; then
					error "Failed to get header for ${volume} volume"
					eval ${NOFAIL}
				fi
			fi
			crypt_type=luks
			skip=
			crypt_opts="${crypt_opts} --type luks ${header:+--header} ${header} \
	${keyfile_size:+--keyfile-size} ${keyfile_size} \
	${key_slot:+--key-slot} ${key_slot}"
			;;
			(plain|swap)
			crypt_opts="${crypt_opts} --type plain \
	${cipher:+--cipher} ${cipher} ${hash:+--hash} ${hash} \
	${kek_size:+--key-size} ${key_size}"
			;;
			(tcrypt)
			if [ "${keyfile}" = "/dev/null" ]; then
				crypt_precmd='echo "" |'
			fi
			#
			# Required when tcrypt-system is enabled for an image file
			#
			if [ -f "${device}" ]; then
				if [ -n "${tcrypt_system}" ]; then
								local loop=$(losetup -f)
					if losetup -P ${loop} ${device}; then
						device=${loop}
					else
						error "Failed to setup a loop device (skipping ${volume} volume)"
						eval ${NOFAIL}
					fi
				fi
			fi
			crypt_opts="${crypt_opts} --type tcrypt ${tcrypt_keyfile} \
	${tcrypt_system:+--tcrypt-system} \
	${tcrypt_hidden:+--tcrypt-hidden}"
			[ -n "${tcrypt_hidden}" ] && discard=
			;;
			(loopaes)
			if [ -n "${keyfile}" ]; then
				crypt_precmd="cat ${keyfile} |"
				keyfile=-
			fi
			crypt_opts="${crypt_opts} --type loopaes \
			${hash:+--hash} ${hash}"
			keyfile_offset=
			;;
			(*)
			warn "Missing type argument for ${volume}"
			continue
		esac

		case "${crypt_type}" in
			(loopaes|luks|plain|swap)
			crypt_opts="${crypt_opts} ${keyfile:+--key-file} ${keyfile} \
	${keyfile_offset:+--keyfile-offset} ${keyfile_offset} \
	${offset:+--offset} ${offset} ${skip:+--skip} ${skip}"
			;;
		esac

		crypt_opts="${crypt_opts} \
	${timeout:+--timeout} ${timeout} ${tries:+--tries} ${tries} \
	${discard:+--allow-discards} ${readonly:+--readonly}"

		#
		# Decrypt the device dependig on the options
		#
		begin "Setting up ${volume} volume ${keymode:-\n}"
		eval ${crypt_precmd} ${cryptsetup} ${crypt_opts}
		end "${?}"
		nofail "${?}"

		if [ "${?}" = 0 -a "${crypt_type}" = "swap" ]; then
			MKSWAP /dev/mapper/${volume}
			nofail "${?}"
		fi

		#
		# Unset everything for next entry
		#
		crypt_type= keymode= crypt_precmd= readonly=
		discard= cipher= hash= header= offset= skip= keyfile_offset=
		keyfile_size= key_slot= noauto= nofail= key_size= tcrypt_hidden=
		tcrypt_keyfile= tcrypt_system= timeout= tmp= tries= verify=
	done

	crypt_cleanup
	return ${retval}
}

stop()
{
	[ "${SV_INITLEVEL}" = "${SV_SHUTDOWN_LEVEL}" ] || return
	local retval=0
	local volume device keyfile options entry ifs="${IFS}"

	crypt_entry
	IFS='
'
	for entry in $(printf "${DMCRYPT_DEVICE_LIST}"); do
		IFS=';'
		eval set -- ${entry}
		volume="${1}" device="${2}" keyfile="${3}" options="${4}"
		IFS="${ifs}"

		#
		# Check availability of the volume
		#
		if ${cryptsetup} status "${volume}" >${NULL} 2>&1; then
			case ",${options}," in
				(*,swap,*)
				begin "Disabling ${volume} swap volume"
				swapoff /dev/mapper/${volume}
				end "${?}"
				[ "${?}" = 0 ] || continue
				;;
			esac

			begin "Closing ${volume} volume"
			${cryptsetup} close "${volume}" >${NULL} 2>&1
			end "${?}"
			nofail "${?}"
		fi
	done

	return ${retval}
}

#
# vim:fenc=utf-8:ft=sv:ci:pi:sts=0:sw=4:ts=4:
#
