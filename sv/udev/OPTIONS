#
# $Id: @(#) /etc/sv/udev/OPTIONS                                      Exp $
# $L$: 2-clause/new/simplified BSD License                            Exp $
#

SVC_CMD=/sbin/udevd
SVC_OPTS=
SVC_BEFORE='checkfs device-mapper dmcrypt dmraid kmod lvm lvmetad mdadm udev-monitor'
SVC_NEED='devfs sysfs logger'
SVC_PROVIDE='dev'
SVC_STARTED_COMMANDS='reload'
SVC_KEYWORD="lxc supervision vserver"
description="udev device manager daemon"
description_reload="Reload the udev rules and databases"
#
# Set up udev debug level from empty to (emerg|alert|crit|err|warning|notice|info|debug)
#
UDEV_DEBUG="info"
#
# Extra udev debug options can be added
#
UDEV_DEBUG_OPTS=""
udevadm="$(command -v udevadm 2>${NULL})"


reload()
{
	${udevadm} control --reload
}

start_pre()
{
	if ! grep -q devtmpfs /proc/filesystems; then
		if yesno "${USE_MDEV:-YES}"; then
			sv-run mdev start
		fi
		error "DevtmpFS is not supported"
		return 1
	fi
	if ! mountinfo -q -t devtmpfs /dev; then
		mount -t devtmpfs -o nosuid,mode=755,size=${DEV_FS_SIZE:-10M} \
			dev /dev >${NULL} 2>&1 ||
			{ error "Failed to setup devtmpfs"; return 2; }
		mkdir -p /dev/pts /dev/shm
	fi
	if [ ! -e /proc/net/unix ]; then
		if ! modprobe unix; then
			error "Failed to load unix domain socket module"
			return 3
		fi
	fi
	if [ -e /proc/sys/kernel/hotplug ]; then
		echo '' >/proc/sys/kernel/hotplug
	fi
	if [ -n "${UDEV_DEBUG}" ]; then
		SVC_OPTS="${SVC_OPTS} --debug 2>/run/udevdebug.log"
		PRE_CMD=/usr/bin/env
		PRE_OPTS="- UDEV_DEBUG=${UDEV_DEBUG}"
	fi
	if [ -e ${SV_RUNDIR}/udev-monitor ]; then
		sv-run -q udev-monitor up >${NULL} 2>&1
		UDEV_MONITOR=true
	else
		begin "Starting udev-monitor"
		sv-run -q udev-monitor start >${NULL} 2>&1
		end "${?}"
		UDEV_MONITOR=false
	fi
	ENV_SET UDEV_MONITOR

	return 0
}

start_post()
{
	if ! [ -n "${udevadm}" -a -x "${udevadm}" ]; then
		error "No udevadm/udev command found"
		return 1
	fi
	begin "Starting to execute queue events"
	${udevadm} control --start-exec-queue --timeout=${UDEV_START_TIMEOUT:-60}
	end "${?}"

	if yesno "${DEV_ROOT_SYMLINK:-1}"; then
		local RULESDIR=/run/udev/rules.d
		mkdir -p ${RULESDIR}
		eval $(udevadm info --export --export-prefix=ROOT_ --device-id-of-file=/)
		if [ -n "${ROOT_MAJOR}" -a -n "${ROOT_MINOR}" -a "${ROOT_MAJOR}" != 0 ]; then
			echo 'ACTION=="add|change", SUBSYSTEM=="block", ENV{MAJOR}=="'${ROOT_MAJOR}'", ENV{MINOR}=="'${ROOT_MINOR}'", SYMLINK+="root"' >${RULESDIR}/61-dev-root-link.rules
		fi
	fi

	begin "Populating /dev with uevents"
	${udevadm} trigger --type=subsystems --action=add
	${udevadm} trigger --type=devices --action=add
	end "${?}"

	begin "Waiting uevents to be processed"
	${udevadm} settle --timeout=${UDEV_SETTLE_TIMEOUT:-60}
	end "${?}"

	if ! ${UDEV_MONITOR}; then
		begin "Stopping udev-monitor"
		sv-run -q udev-monitor stop >${NULL} 2>&1
		end "${?}"
	fi

	return 0
}

stop_pre()
{
	${udevadm} control --exit
}

#
# vim:fenc=utf-8:ft=sv:ci:pi:sts=0:sw=4:ts=4:
#
