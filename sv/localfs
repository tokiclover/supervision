#!/sbin/rs
#
# $Id: @(#) /etc/sv/localfs    2017/01/12                             Exp $
# $L$: 2-clause/new/simplified BSD License                            Exp $
# $C$: Copyright (c) 2015-2017 tokiclover <tokiclover@gmail.com>      Exp $
# $C$: Copyright (c) 2007-2008 Roy Marples <roy@marples.name>         Exp $
#

description="Mount ${SVC_NAME%fs} filesystems"
SVC_KEYWORD="docker jail lxc prefix supervision systemd-nspawn uml vserver"

if [ "${SVC_NAME}" = localfs ]; then
	SVC_AFTER='kmod lvm device-mapper dmcrypt dmraid mdadm'
	SVC_BEFORE='miscfs unionfs'
	SVC_NEED='checkfs rootfs'
	SVC_USE='kmod lvm device-mapper dmcrypt dmraid mdadm mtab'
elif [ "${SVC_NAME}" = networkfs ]; then
	SVC_USE='dns'
else
	error "invalid service name"
	exit 1
fi

mount_command()
{
	local fusr_cmd fusr_opts='-c -m' fusr_opt='-s ' fusr_sig=TERM
	local i mnt_cmd=umount mnt_dir mnt_opt

	case "${1}" in
		([ru]*mount) mnt_cmd="${1}"; shift;;
	esac
	mnt_dir="${1}"

	[ "${OS_NAME}" = Linux ] && fusr_opt='-'
	fusr_cmd=$(command -v fuser 2>${NULL})

	#
	# Send SIGTERM and then SIGKILL to PIDs if necessary between sleep(1)
	#
	for i in 1 2 3 4; do
		mountinfo -q ${mnt_dir} || return 0

		begin "${mnt_cmd}ing ${mnt_dir}"
		if ${mnt_cmd} ${mnt_opt} ${mnt_dir} >${NULL} 2>&1; then
			end 0
			return 0
		elif [ -z "${fusr_cmd}" ]; then
			end 1 "No fuser command found"
			return 1
		elif [ "${i}" = 4 -o "${mnt_cmd}" = remount ]; then
			end 1
			return 1
		fi

		case " $(${fusr_cmd} ${fusr_opts} ${mnt_dir}) " in
			(*" $$ "*|*" $$"[cer]*)
				end 1 "filesystem is being used"
				return 1
				;;
			("  ")
				end 1 "no PID found in filesystem"
				return 1
				;;
		esac

		if [ "${i}" = 3 ]; then
			fusr_sig=KILL
			[ "${mnt_cmd}" = umount ] && mnt_opt='-r'
		fi
		${fusr_cmd} ${fusr_opt}${fusr_sig} ${mnt_dir} >${NULL} 2>&1
		sleep 1
	done
}

start()
{
	#
	# XXX: start the service only when appropriate;
	#      permit other services to start
	#
	[ "${SV_STAGE}" = "${SV_SYSBOOT_LEVEL}" ] || return 0

	local netfs exclude fs mnt_opts

	if [ "${SVC_NAME}" = localfs ]; then
		netfs=noproc exclude=no
	fi
	for fs in ${NETWORKFS} ${EXTRA_NETWORKFS}; do
		netfs="${netfs},${exclude}${fs}"
	done

	if [ "${OS_NAME}" = Linux ]; then
		mnt_opts="-O ${exclude}_netddev"
	fi
	begin "Mounting ${SVC_NAME%fs} filesystem"
	mount -at ${netfs#,} ${mnt_opts}
	end "${?}"

	return 0
}

stop()
{
	#
	# XXX: stop the service only when appropriate
	#
	[ "${SV_STAGE}" = "${SV_SHUTDOWN_LEVEL}" ] || return 1

	local i mnt_args mnt_point mnt_fstype=rootfs mountpoints net_fstype
	mnt_point="/|/dev|/dev/.*|/proc|/proc/.*|/sys|/sys/.*|/run|/usr|/.?bin|/lib.*|/tmp"

	for i in ${NETWORKFS} ${EXTRA_NETWORKFS}; do
		net_fstype="${net_fstype},${i}"
		mnt_fstype="${mnt_fstype}|${i}"
	done

	for i in ${SV_NO_UMOUNT}; do
		mnt_point="${mnt_point}|${i}"
	done

	if [ "${SVC_NAME}" = networkfs ]; then
		begin "Unmounting network filesystem"
		umount -at "${net_fstype#,}"
		end "${?}"

		if [ "${OS_NAME}" = Linux ]; then
			umount -a -O _netdev
			end "${?}" "Linux"
		fi
	fi

	if [ "${SVC_NAME}" = "networkfs" ]; then
		mnt_args=-t
	else
		mnt_args=-T
	fi

	for i in $(mountinfo --reverse --mpoint-skip-regex "^(${mnt_point})$" \
		${mnt_args} "^(${mnt_fstype})$"); do
		mount_command ${i}
	done
}

#
# vim:fenc=utf-8:ft=sv:ci:pi:sts=0:sw=4:ts=4:
#
