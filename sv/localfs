#!/sbin/rs
#
# $Header: /etc/sv/localfs                               Exp $
# $License: 2-clause/new/simplified BSD                    Exp $
# $Copyright: (c) 2007-2008 Roy Marples <roy@marples.name> Exp $
#

description="Mount ${SVC_NAME%fs} filesystems"

if [ "${SVC_NAME}" = localfs ]; then
	SVC_AFTER='kmod lvm device-mapper dmcrypt raid'
	SVC_BEFORE='miscfs unionfs'
	SVC_NEED='checkfs rootfs'
	SVC_USE='kmod lvm device-mapper dmcrypt raid mtab'
elif [ "${SVC_NAME}" = networkfs ]; then
	SVC_USE='dns'
else
	error "invalid service name"
	exit 1
fi

mount_command()
{
	local fusr_cmd fusr_opts='-c -m' fusr_opt='-s ' fusr_sig=TERM
	local i mnt_cmd=umount mnt_dir mnt_opt

	case "${1}" in
		([ru]*mount) mnt_cmd="${1}"; shift;;
	esac
	mnt_dir="${1}"

	[ "${OS_NAME}" = Linux ] && fusr_opt='-'
	fusr_cmd=$(command -v fuser 2>${NULL})

	#
	# Send SIGTERM and then SIGKILL to PIDs if necessary between sleep(1)
	#
	for i in 1 2 3 4; do
		mountinfo -q ${mnt_dir} || return 0

		begin "${mnt_cmd}ing ${mnt_dir}"
		if ${mnt_cmd} ${mnt_opt} ${mnt_dir} >${NULL} 2>&1; then
			end 0
			return 0
		elif [ -z "${fusr_cmd}" ]; then
			end 1 "No fuser command found"
			return 1
		elif [ "${i}" = 4 -o "${mnt_cmd}" = remount ]; then
			end 1
			return 1
		fi

		case " $(${fusr_cmd} ${fusr_opts} ${mnt_dir}) " in
			(*" $$ "*|*" $$"[cer]*)
				end 1 "filesystem is being used"
				return 1
				;;
			("  ")
				end 1 "no PID found in filesystem"
				return 1
				;;
		esac

		if [ "${i}" = 3 ]; then
			fusr_sig=KILL
			[ "${mnt_cmd}" = umount ] && mnt_opt='-r'
		fi
		${fusr_cmd} ${fusr_opt}${fusr_sig} ${mnt_dir} >${NULL} 2>&1
		sleep 1
	done
}

start()
{
	local netfs exclude fs mnt_opts

	if [ "${SVC_NAME}" = localfs ]; then
		netfs=noproc exclude=no
	fi
	for fs in ${NETWORKFS} ${EXTRA_NETWORKFS}; do
		netfs="${netfs},${exclude}${fs}"
	done

	if [ "${OS_NAME}" = Linux ]; then
		mnt_opts="-O ${exclude}_netddev"
	fi
	begin "Mounting ${SVC_NAME%fs} filesystem"
	mount -at ${netfs#,} ${mnt_opts}
	end "${?}"

	return 0
}

stop()
{
	[ "${RS_STAGE}" = 3 ] || return 1

	local mnt_dev mnt_dir mnt_fstype mnt_opts mnt_extra mountpoints netfs
	local exclude_fstype=rootfs exclude_dir AND_OR
	exclude_dir="/|/dev|/dev/*|/proc|/proc/*|/sys|/sys/*|/run|/usr|/*bin|/lib*|/tmp"

	for mnt_fstype in ${NETWORKFS} ${EXTRA_NETWORKFS}; do
		netfs="${netfs},${mnt_fstype}"
		exclude_fstype="${exclude_fs}|${mnt_fstype}"
	done

	for mnt_dir in ${RS_NO_UMOUNT}; do
		exclude_dir="${exclude_dir}|${mnt_dir}"
	done

	if [ "${SVC_NAME}" = networkfs ]; then
		begin "Unmounting network filesystem"
		umount -at "${netfs#,}"
		end "${?}"

		if [ "${OS_NAME}" = Linux ]; then
			umount -a -O _netdev
			end "${?}" "Linux"
		fi
	fi

	while read mnt_dev mnt_dir mnt_fstype mnt_opts mnt_extra; do
		eval "case ${mnt_dir} in (${exclude_dir}) continue ;; esac"
		if [ "${SVC_NAME}" = "networkfs" ]; then
			AND_OR="||"
		else
			AND_OR="&&"
			eval "case ${mnt_fstype} in (${exclude_fstype}) continue ;; esac"
		fi
		eval mountinfo -qn ${mnt_dir} ${AND_OR} continue
		mountpoints="${mountpoints} ${mnt_dir}"
	done </proc/mounts

	for mnt_dir in ${mountpoints}; do
		mount_command ${mnt_dir}
	done
}

#
# vim:fenc=utf-8:ft=sv:ci:pi:sts=0:sw=4:ts=4:
#
