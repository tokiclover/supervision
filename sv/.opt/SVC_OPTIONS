#
# $Id:  @(#) SVC_OPTIONS    0.0 2017/01/12 21:09:26                   Exp $
# $L$:  2-clause/new/simplified BSD License                           Exp $
#

#
# Set a few default env variables
#
:	${SV_LIBDIR:=/lib/sv}
:	${SV_SVCDIR:=/etc/sv}
:	${SV_RUNDIR:=/run/sv}
:	${SV_TMPDIR:=${SV_RUNDIR}/.tmp}
:	${SV_CFGDIR:=${SV_SVCDIR}.conf.d}
:	${name:=${SVC_NAME}}
:	${__cmd__:=${0##*/}}
:	${__cmd_args__:="${@}"}
:	${COLOR:=Yes}
:	${LOGDIR:=/var/log}

[ -n "${__RUNSCRIPT_FUNCTIONS__}" ] ||
	. "${SV_LIBDIR}"/sh/runscript-functions ||
	{ echo "Required file not found." >&2; exit 1; }
. ${SV_SVCDIR%/*}/sv.conf
umask 022

#
# Use RC config file if requested
#
if yesno "${RC_OPTS}"; then
:	${RC_CONFDIR:=/etc/conf.d}
:	${RC_INITDIR:=/etc/init.d}
	SOURCE ${RC_CONFDIR}/${SVC_NAME}
fi

env_run()
{
	#
	# migrate to new sub-dirs
	#
	if [ ! -d ${SV_TMPDIR}/opts ]; then
		mkdir -p ${SV_TMPDIR}/opts ${SV_TMPDIR}/envs
		mv -f ${SV_TMPDIR}/SV_OPTIONS ${SV_TMPDIR}/env
		for a in ${SV_TMPDIR}/*_OPTIONS; do
			b="${a##*/}"
			mv -f ${a} ${SV_TMPDIR}/opts/${b%_*}
		done
		unset a b
	fi

	SOURCE ${SV_TMPDIR}/opts/${SVC_NAME}
	SOURCE ${SV_TMPDIR}/envs/${SVC_NAME}
	SOURCE ${SV_TMPDIR}/env
	SOURCE ${SV_TMPDIR}/environ

	#
	# Setup a few environment variables beforehand
	#
	:	${COLUMNS:=$(tput cols)}
	if ! [ "${__cmd__}" = "run" -o "${__cmd__}" = "finish" ]; then
	trap ': COLUMNS="$(tput cols)"' WINCH
	#
	# save environment file for supervision
	#
	if [ -d "${__svc__}" ]; then
	:	${SV_TYPE:=sv}
		while read line; do
			printf "${line}\n"
		done <${SV_TMPDIR}/environ >${SV_TMPDIR}/envs/${SVC_NAME}
	else
	:	${SV_TYPE:=rs}
	fi
	fi
}

#
# Set up runscript environment
#
if   [ "${SV_TYPE}" = "rs" ]; then

	SOURCE "${SV_CFGDIR}"/${SVC_NAME}
	if [ "${name}" != "${SVC_NAME}" ]; then
	SOURCE "${SV_CFGDIR}"/${name}
	fi
	SOURCE ${SRC_OPTS} ${__svc__}
	env_run

#
# Set up supervision environment
#
elif [ "${SV_TYPE}" = "sv" ]; then
	SVC_DIR="${__svc__}"
	SOURCE ${SRC_OPTS} "${SVC_DIR}"/OPTIONS

	#
	# Handle specific (virtual) service backend/instance
	#
	if [ "${name}" = "${SVC_NAME}" ]; then
	SOURCE "${SVC_DIR}"/OPTIONS.${SVC_NAME}
	else
	SOURCE "${SVC_DIR}"/OPTIONS.${name}
	fi
	env_run

	SVC_PIDFILE="${SV_TMPDIR}/pids/${SVC_NAME}"
	SOURCE -d ${SV_SVCDIR}/.opt/SVC_BACKEND

	if [ "${__cmd__}" = "run" ]; then
	#
	# Use ENV dir(s) if requested
	#
	yesno "${ENV_DIR}" && svc_environ

	#
	# Set default getty options
	#
	case "${SVC_NAME}" in # SVC_NAME=$GETTY_TTY
	(*getty-tty*)
:	${PRE_CMD:=${__PRECMD__}}
	if [ "${__SV_NAM__}" = "runit" ]; then
	:	${PRE_OPTS:=-P}
	:	${FIN_CMD:=utmpset}
	:	${FIN_OPTS:=-w ${SVC_NAME#*-}}
	fi
	;;
	esac # SVC_NAME=$GETTY_TTY
	fi # __cmd__=run

	#
	# Set a few specific log env variables
	#
	if [ "${__cmd_dir__}" = "log" ]; then

:	${SVC_LOGDIR:=${LOGDIR}/${SVC_NAME}}
:	${SVC_USER:=root}
:	${SVC_GROUP:=root}
:	${LOG_MODE:=0755}
:	${LOG_PROC:=gzip -nq}
:	${LOG_SIZE:=2048000}
:	${LOG_STAT:=}
:	${LOG_PREFIX:=${SVC_NAME}}
:	${LOG_CMD:=${__LOGCMD__}}
	#
	# Set default log options
	#
		if [ "${__SV_NAM__}" = "runit" ]; then
	:	${LOG_ARGS:="p${LOG_PREFIX}\ns${LOG_SIZE}\n!'${LOG_PROC}'"}
	:	${LOG_OPTS:=-tt ${SVC_LOGDIR}}
		else
	:	${LOG_ARGS:="s${LOG_SIZE} !'${LOG_PROC}'"}
	:	${LOG_OPTS:="T ${LOG_STAT:++^${LOG_STAT} =${SVC_LOGDIR}/status} ${LOG_ARGS}"}
		fi # __SV_NAM__
	unset LOG_PROC LOG_PREFIX LOG_STAT LOG_SIZE

	fi # __cmd_dir__=log
fi # SV_TYPE=sv

#
# Set debug options
#
if yesno "${SVC_DEBUG}"; then
	set -x
fi

#
# vim:fenc=utf-8:ft=sh:ci:pi:sts=0:sw=4:ts=4:
#
