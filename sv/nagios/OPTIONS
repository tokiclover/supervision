#
# $Id: @(#) /etc/sv/nagios/OPTIONS                                    Exp $
# $L$: 2-clause/new/simplified BSD License                            Exp $
#

#
# Setup SSH-Agent for the daemon to speed SSH connections for service checks
# with Check_MK for example; and add keychain to keep up idendities for an
# addtional SSH connection optimization.
SSH_SETUP=true
KEYCHAIN_SETUP=true

SVC_STARTED_COMMANDS="reload"
SVC_COMMANDS="checkconfig ssh_agent_setup"
SVC_CONFIGFILE="/etc/nagios/nagios.cfg"
SVC_CMD="/usr/sbin/nagios"
SVC_OPTS="${SVC_CONFIGFILE}"
SVC_USER=nagios
SVC_GROUP=nagios
PRE_CMD="/usr/bin/env"
HOME=/var/nagios/home
PRE_OPTS="- HOME=${HOME} USER=${SVC_USER}"

tmpdir="/var/nagios"
live_socket=${tmpdir}/rw/live
cmdfile="${tmpdir}/rw/nagios.cmd"
SVC_PIDFILE="${tmpdir}/nagios.lock"
logfile="${tmpdir}/status.log"
tmpfile="${tmpdir}/nagios.tmp"

SVC_NEED=net
SVC_USE="dns logger firewall npcd rrdcached.nagios"
SVC_AFTER="mysql postgresqli npcd rrdcached.nagios"

reload()
{
	checkconfig || return 1
	rm -f ${live_socket}
	svc_sig HUP
	live_socket
}

checkconfig()
{
	${SVC_CMD} -v ${SVC_CONFIGFILE} >${NULL} 2>&1 ||
	${SVC_CMD} -v ${SVC_CONFIGFILE}
}
live_socket()
{
	#
	# Coment this out if mk-livestatus is used
	#
	return 0

	svc_wait 10 ${live_socket}
	if [ -e ${live_socket} ]; then
		chgrp apache ${live_socket}
	else
		return 0
	fi
}
ssh_agent_setup()
{
	yesno "${SSH_SETUP}" || [ "${__cmd__}" = "ssh_agent_setup" ] || return 0
	yesno "${SSH_SETUPED}" && return 0

	export HOME=/var/nagios/home USER="${SVC_USER}"
	local envfile=${HOME}/.ssh-agent-env sudo=/usr/bin/sudo
	local ssh_agent=/usr/bin/ssh-agent
	local timeout=/usr/bin/timeout keychain=/usr/bin/keychain
	SSH_AGENT_PID= SSH_AGENT_PID=

	#
	# Setup SSH-Agent
	#
	[ -e ${envfile} ] && source ${envfile}
	if [ -n "${SSH_AUTH_SOCK}" -a -e "${SSH_AUTH_SOCK}" ]; then
		export SSH_AUTH_SOCK="${SSH_AUTH_SOCK}" SSH_AGENT_PID="${SSH_AGENT_PID}"
	else
		eval export $(${sudo} -u "${SVC_USER}" -g "${SVC_GROUP}" ${ssh_agent} -s)
		printf "SSH_AUTH_SOCK=${SSH_AUTH_SOCK}\nSSH_AGENT_PID=${SSH_AGENT_PID}\n" >${envfile}
	fi

	#
	# Save environment
	#
	SSH_SETUPED=true
	ENV_SET SSH_SETUPED

	#
	# Setup Keychain
	#
	yesno "${KEYCHAIN_SETUP}" || return 0
	if [ ! -x ${keychain} ]; then
		error "no binary found -- ${keychain}"
		return 1
	fi
	local key keys
	for key in id_dsa id_ecdsa id_rsa "${@}"; do
		[ -e "${HOME}/.ssh/${key}" ] && keys="${keys} ${HOME}/.ssh/${key}"
	done
	if [ -z "${keys}" ]; then
		error "no SSH key found"
		return 2
	fi
	${sudo} -u "${SVC_USER}" -g "${SVC_GROUP}" ${timeout} --foreground \
		--preserve-status  --kill-after=5 --signal=SIGKILL 5 ${keychain} \
		--env ${envfile} --nogui --quiet ${keys}
}

start_pre()
{
	checkpath -qd -o nagios:nagios ${tmpdir} ${tmpdir}/perfdata ${tmpdir}/rw
	checkpath -qf -o nagios:nagios ${tmpfile} ${tmpdir}/status.sav
	checkconfig || return 1
	rm -f ${cmdfile}

	ssh_agent_setup
	live_socket
}
start_post()
{
	live_socket
}

stop_post()
{
	rm -f ${tmpfile} ${logfile} ${SVC_PIDFILE} ${cmdfile}
}

#
# vim:fenc=utf-8:ft=sv:ci:pi:sts=0:sw=4:ts=4:
#
