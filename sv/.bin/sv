#!/bin/sh
#
# $Header:  /etc/sv/.bin/sv                              Exp $
# $Author: (c) 2015 -tclover <tokiclover@gmail.com>      Exp $
# $License: 2-clause/new/simplified BSD                  Exp $
# $Version: 1.0 2015/04/20 21:09:26                      Exp $
#

:	${name=sv}
:	${SV_BACKEND:=/etc/sv/.opt/sv-backend}

source "${SV_BACKEND}" || { echo "Required file not found." >&2; exit 1; }
svc_backend -C -i

usage()
{
	cat <<-EOH
 usage: sv [OPTIONS] [SERVICE COMAND] [ARGUMENTS]
   COMMAND: [add|remove|reload|start|stop|status]
   COMMAND: (CGroup) cgroup_remove_service
   OPTIONS: add SERVICE [-cdls]
     -D, --nodeps     Disable dependencies
     -c, --check      Enable binary check
     -d, --down       Start service as down
     -l, --log        Add log directory
     -s, --service    Add symlink to /service/
   OPTIONS: -S daemontools[-encore]|runit|s6
     -S, --set ARG    Set up backend
     -g, --debug      Enable debug
     -h, --help       Help/Exit
EOH
${1+exit ${1}}
}

sv_cmd()
{
	local cmd name svc
	for svc; do
		case "${CMD}" in
			(add) cmd=svc_cmd SVC_NAME="${svc}";;
			(*) cmd="${SV_SVCDIR}/${svc}/run"  ;;
		esac
		eval ${cmd} ${CMD} ${ARGS}
	done
	exit
}

[ ${#} -ge 2 ] || usage 2
ARGS="$(getopt \
	-o DS:cdghls \
	-l check,debug,down,help,nodeps,log,service,set: \
	-s sh -n sv -- "${@}")"
[ ${?} -eq 0 ] || usage 3
eval set -- ${ARGS}
ARGS= SV_OPT=

while true; do
	case "${1}" in
		(-D|--node*) SVC_NODEPS=0 ;;
		(-g|--debug) set -x;;
		(-[cdls]*|--[cdls]*) ARGS="${ARGS} ${1}";;
		(-S|--set) SV_OPT="${2}"; shift 2; break;;
		(*) CMD="${2}"; shift 2; break;;
		(-h|--help) usage 0;;
	esac
	shift
done
[ -n "${SV_OPT}" ] || sv_cmd "${@}"

SIGNALS='SIGSTRT SIGSTOP SIGONCE SIGPAUSE SIGCONT SIGHUP SIGALRM SIGINT
	SIGTERM SIGKILL SIGEXIT SIGQUIT SIGUSR1 SIGUSR2 SIGWTUP SIGWDWN'
BINS='envdir envuidgid fghack pgrphack setlock setuidgid softlimit'
CMDS='SV_CMD SVCCMD CHKCMD STACMD LOGCMD'

case ${SV_OPT} in
	(daemontools)
		BIN='' PREFIX=''
		;;
	(daemontools-encore)
		BIN='' PREFIX=''
		SIGQUIT=-q SIGUSR1=-1 SIGUSR2=-2
		;;
	(runit)
		BIN=chpst CMDS="${CMDS} PRECMD SCANCMD" PREFIX='' SIGNALS="${SIGNALS} SIGRLD"
		SIGWTUP="'-w 10 up'" SIGWDWN="'-w 10 down'" SCANCMD="'pkill -CONT runsvdir'"
		SIGSTRT=up SIGSTOP=down SIGONCE=once SIGPAUSE=pause SIGCONT=cont
		SIGHUP=hup SIGALRM=alarm SIGINT=interrupt SIGQUIT=quit SIGUSR1=1
		SIGUSR2=2 SIGTERM=term SIGKILL=kill SIGEXIT=exit SIGRLD=reload
		SV_CMD=runsvdir SVCCMD=sv CHKCMD="'sv check'" STACMD=sv PRECMD=chpst LOGCMD=svlogd
		;;
	(s6)
		BIN='' PREFIX=s6- SIGWTUP="'-U -T 10000'" SIGWDWN="'-D -T 10000'"
		SIGQUIT=-q SIGUSR1=-1 SIGUSR2=-2
		CMDS="${CMDS} SCANCMD" SCANCMD='"s6-svscanctl -an ${SV_RUNDIR}"'
		SV_CMD=s6-svscan SVCCMD=s6-svc CHKCMD=s6-svok STACMD=s6-svsat LOGCMD=s6-log
		;;
	(*) die "Invalid supervision backend";;
esac

:	${SIGSTRT:=-u}
:	${SIGSTOP:=-d}
:	${SIGONCE:=-o}
:	${SIGPAUSE:=-p}
:	${SIGCONT:=-c}
:	${SIGHUP:=-h}
:	${SIGALRM:=-a}
:	${SIGINT:=-i}
:	${SIGTERM:=-t}
:	${SIGKILL:=-k}
:	${SIGEXIT:=-x}
:	${SVCCMD:=svc}
:	${SV_CMD:=svscan}
:	${CHKCMD:=svok}
:	${STACMD:=svstat}
:	${LOGCMD:=multilog}

begin "Setting up ${SV_OPT} supervision backend..."
for bin in ${BINS}; do
	ln -f -s $(type -p ${PREFIX}${BIN:-${bin%:*}}) ${SV_SVCDIR}/.bin/${bin#*:}
done
end ${?} Symlinks
for env in SV_OPT ${CMDS} ${SIGNALS}; do
	eval echo ${env}=\"\${${env}}\"
	unset ${env}
done > "${SV_SVCDIR}"/.opt/SVC_BACKEND
end ${?} SVC_BACKEND

unset BINS CMDS PREFIX SIGNALS bin env

#
# vim:fenc=utf-8:ft=sh:ci:pi:sts=0:sw=4:ts=4:
#
