#!/sbin/rs
#
# $Header: /etc/sv/ipset                               Exp $
# $License: 2-clause/new/simplified BSD                  Exp $
#

description="Set up IPSet rules"
description_check="Check IP sets rules file"
description_reload="Reload IP sets rules file"
description_save="Save IP sets rules to file"

SVC_AFTER="kmod"
SVC_BEFORE="iptables ip6tables"
SVC_NEED="localfs"
SVC_COMMANDS="check"
SVC_STARTED_COMMANDS="reload save"
:	${IPSET_RULES_FILE:=/var/lib/ipset/rules-save}
ipset="$(command -v ipset 2>${NULL})"

check()
{
	if [ -f "${IPSET_RULES_FILE}" ]; then
		checkpath -qf -m 0600 "${IPSET_RULES_FILE}"
	else
		error "Create some rules before starting this service"
		error "And then run \`rs ${SVC_NAME} save' to save the rules"
		return 1
	fi
}

start_pre()
{
	[ -n "${ipset}" -a -x "${ipset}" ] ||
		{ error "No IPTables binary found"; return 1; }

	local action set type extra modules
	[ -f "${IPSET_RULES_FILE}" ] && [ -d /proc/modules ] &&
	while read action set type extra; do
		case "${action}" in
			(create) modules="${modules} ip_set_${type/:/_}";;
		esac
	done <${IPSET_RULES_FILE}
	[ -n "${modules}" ] && modprobe -a ${modules} >${NULL} 2>&1

	checkpath -qd "${IPSET_RULES_FILE%/*}"
}

start()
{
	check && ${ipset} restore <"${IPSET_RULES_FILE}"
}

stop()
{
	#
	# XXX: Check for IPTables references before anything else;
	# if some sets are referenced in IPTables, do nothing.
	#
	if ! ${ipset} list | gawk '
        ($1 == "References:") { refcount += $2 }
        ($1 == "Type:" && $2 == "list:set") { listset = 1 }
        (scanlist) { if ($0 != "") setcount++;
        	else { scanlist = 0; listset = 0 } }
        (listset && $1 == "Members:") { scanlist = 1 }
        END { exit (refcount - setcount) }
        '; then
        error "IPSet rules are being used"
        return 1
    fi
    if yesno "${SAVE_ON_STOP}"; then
		save || return 1
	fi
	${ipset} flush
	${ipset} destroy
}

reload()
{
	svc_state -s || return
	#
	# XXX: There is no way to reload IP sets if used in IPTables;
	# so, remain only trying to swap existant rules if possible
	# from temporary sets.
	#
	local running_sets="$(ipset save | awk '/^create/{ printf "%s|", $2}')"
	begin "Reloading IPSets rules"
	sed -r "s/^(create|add) (${running_sets%|}) /\1 \2_temp /g" ${IPSET_RULES_FILE} \
		| ${ipset} reload
	end "${?}" "IPSets rules"

	local set
	for set in ${running_sets//|/ }; do
		${ipset} swap ${set} ${set}_temp || end "${?}" "swap ${set} IP set"
		${ipset} destroy ${set}_temp     || end "${?}" "destroy ${set}_temp IP set"
	done
}

save()
{
	${ipset} save >${IPSET_RULES_FILE}
	check
}

#
# vim:fenc=utf-8:ft=sv:ci:pi:sts=0:sw=4:ts=4:
#
