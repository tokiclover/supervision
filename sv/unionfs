#!/sbin/rs
#
# $Id: @(#) /etc/sv/unionsfs    0.22.0 2016/07/20                     Exp $
# $L$: 2-clause/new/simplified BSD License                            Exp $
# $C$: (c) 2012-2016 tokiclover <tokiclover@gmail.com>                Exp $
#

description="Set up (AUFS|OverlayFS+SquashFS) union filesystems"

mount="$(command -v mount 2>${NULL})"
umount="$(command -v umount 2>${NULL})"
:	${sdr:=$(command -v sdr 2>${NULL})}
:	${unionfs_rootdir:=/unionfs}
case "${unionfs_filesystem}" in
	(aufs|overlay) ;;
	(*) unionfs_filesystem=;;
esac

SVC_AFTER=localfs
SVC_BEFORE='console miscfs'

start_pre()
{
	local mod
	begin "Setting up kernel modules"
	for mod in ${unionfs_filesystem:-aufs overlay} squashfs; do
		grep -q ${mod} /proc/filesystems || modprobe ${mod} >${NULL} 2>&1 ||
			case "${mod}" in
				(overlay|squashfs) { end 1 ${mod}; return 1; };;
				(aufs) continue;;
			esac
		case "${mod}" in
			(aufs|overlay) unionfs_filesystem="${mod}"; break;;
		esac
	done
	end ${?}
}

start()
{
	local dir
	for dir in ${unionfs_sysdir} ${unionfs_localdir}; do
		unionfs_mount "${unionfs_rootdir}" "${dir}"
	done
	return 0
}

stop()
{
	local dir
	for dir in ${unionfs_localdir}; do
		unionfs_umount "${unionfs_rootdir}" "${dir}"
	done
	for dir in ${unionfs_sysdir}; do
		unionfs_remount "${dir}" "ro"
	done
	return 0
}

restart()
{
	stop
	start
	local dir
	for dir in ${unionfs_sysdir}; do
		unionfs_remount "${dir}" "rw"
	done
	return 0
}

stop_pre()
{
	local mod
	for mod in ${squash_filesystem:-aufs overlay}; do
		grep -q ${mod} /proc/filesystems &&
			{ squash_filesystem="${mod}"; break; }
	done
	[ -n "${unionfs_filesystem}" ] || return
	[ -n "${unionfs_rebuilddir}" ] || return 0
	[ -n "${sdr}" -a -x "${sdr}" ] || { warn "No suitable sdr found."; return; }

	begin "Rebuilding ${unionfs_rebuilddir}"
	${sdr} -o${offset:-5} -f${unionfs_filesystem} ${unionfs_rebuilddir} >${NULL} 2>&1
	end ${?}
}

unionfs_mount()
{
	local DIR message mnt_opts
	DIR="${1}/${2#/}" dir="/${2#/}"
	mountinfo -q -t ${unionfs_filesystem} ${dir} && return
	[ -f ${DIR}.squashfs ] || return

	case "${unionfs_filesystem}" in
		(aufs)
			mkdir -p -m 0755 "${DIR}"/rr "${DIR}"/rw
			mnt_opts="nodev,udba=reval,br:${DIR}/rw:${DIR}/rr"
			message=AUFS;;
		(overlay)
			mkdir -p -m 0755 "${DIR}"/rr "${DIR}"/up "${DIR}"/wk
			mnt_opts="nodev,upperdir=${DIR}/up,lowerdir=${DIR}/rr,workdir=${DIR}/wk"
			message=OverlayFS;;
	esac

	begin "Mounting ${unionfs_filesystem}:${dir}"
	if ! mountinfo -q ${DIR}/rr; then
		${mount} -t squashfs -o nodev,ro ${DIR}.squashfs ${DIR}/rr \
			>${NULL} 2>&1 || { end 1 SquashFS; return 1; }
	fi
	${mount} -t ${unionfs_filesystem} -o ${mnt_opts} \
		${unionfs_filesystem}:${dir} ${dir} >${NULL} 2>&1
	end "${?}" "${message}"
}

unionfs_umount()
{
	local DIR mnt_opts message
	DIR="${1}/${2#/}" dir="/${2#/}"
	mountinfo -q -t ${unionfs_filesystem} ${dir} || return

	if [ "${OS_NAME}" = "Linux" ]; then
		mnt_opts="-O no_netdev"
	fi
	case "${unionfs_filesystem}" in
		(aufs) auplink ${dir} flush >${NULL} 2>&1
			message=AUFS;;
		(*) message=OverlayFS;;
	esac
	begin "Umounting ${unionfs_filesystem}:${dir}"
	${umount} -l ${mnt_opts} ${unionfs_filesystem}:${dir} >${NULL} 2>&1 ||
		{ end 1 ${message}; return 1; }
	${umount} -l ${mnt_opts} ${DIR}/rr   >${NULL} 2>&1
	end "${?}" SquashFS
}

unionfs_remount()
{
	local message mnt_opts="${2:-ro}"
	dir="/${1#/}"
	if [ "${mnt_opts}" = "ro" ]; then
		message=read-only
	else
		message=read-write
	fi
	mountinfo -q -t ${unionfs_filesystem} ${dir} || return
	begin "Remounting ${unionfs_filesystem}:${dir} (${message})"
	${mount} -o remount,${mnt_opts} ${unionfs_filesystem}:${dir} >${NULL} 2>&1
	end "${?}"
}

#
# vim:fenc=utf-8:ft=sv:ci:pi:sts=0:sw=4:ts=4:
#
