#!/sbin/rs
#
# $Header: /etc/rs.d/iptables                            Exp $
# $License: 2-clause/new/simplified BSD                  Exp $
#

description="Set up IPTables rules"
description_check="Check IPTables rules file"
description_reload="Reload IPTables rules file"
description_save="Save IPTables rules to file"

SVC_AFTER="kmod ipset"
SVC_BEFORE="net"
SVC_USE="syslog"
SVC_NEED="localfs"
SVC_COMMANDS="check reload save"

case "${SVC_NAME}" in
	(iptables|ip6tables) iptables_name="${SVC_NAME}";;
	(*) iptables_name="iptables";;
esac
iptables_bin="$(command -v ${iptables_name} 2>${NULL})"

case "${IPTABLES_NAME}" in
	(iptables)
	iptables_proc="/proc/net/ip_tables_names"
	iptables_file="${IPTABLES_RULES_FILE:=/var/lib/${iptables_name}/rules-save}"
	iptables_mods="iptable_filter iptable_mangle iptable_raw iptable_nat \
		ipt_MASQUERADE ipt_REDIRECT ipt_REJECT"
	;;
	(ip6tables)
	iptables_proc="/proc/net/ip6_tables_names"
	iptables_file="${IP6TABLES_RULES_FILE:=/var/lib/${iptables_name}/rules-save}"
	iptables_mods="ip6table_filter ip6table_mangle ip6table_raw ip6table_nat \
		ip6t_MASQUERADE ip6t_REDIRECT ip6t_REJECT"
	;;
esac

check()
{
	if [ -f "${iptables_file}" ]; then
		checkpath -qf -m 0600 "${iptables_file}"
	else
		error "Create some rules before starting this service"
		error "And then run \`rs ${SVC_NAME} save' to save the rules"
		return 1
	fi
	${iptables_bin}-restore --test ${SAVE_RESTORE_OPTIONS} <"${iptables_file}"
}

start_pre()
{
	[ -n "${iptables_bin}" -a -x "${iptables_bin}" ] ||
		{ error "No IPTables binary found"; return 1; }

	if [ -d /proc/modules ]; then
		modprobe ipt_LOG ${iptables_mods} >${NULL} 2>&1
	fi

	if [ ! -e "${iptables_proc}" ]; then
		error "Kernel lacks basic IPTables support"
		return 1
	fi

	checkpath -qd "${iptables_file%/*}"
}

start()
{
	check && ${iptables_bin}-restore ${SAVE_RESTORE_OPTIONS} <"${iptables_file}"
}

stop()
{
	if yesno "${SAVE_ON_STOP}"; then
		save || return 1
	fi
	set_policy ACCEPT
}

set_policy()
{
	local chain policy="${1}"
	[ -n "${1}" ] || return

	${iptables_bin} -w -F
	${iptables_bin} -w -X

	for chain in PREROUTING INPUT FORWARD OUTPUT POSTROUTING; do
		${iptables_bin} -w -P "${chain}" "${policy}"
	done
}

reload()
{
	if svc_state -s && check; then
		begin "Reloading IP tables rules"
		set_policy DROP
		start
		end "${?}"
	fi
}

save()
{
	${iptables_bin}-save ${SAVE_RESTORE_OPTIONS} >${iptables_file}
	checkpath -qf -m 0600 "${iptables_file}"
}

#
# vim:fenc=utf-8:ft=sv:ci:pi:sts=0:sw=4:ts=4:
#
