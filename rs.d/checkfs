#!/sbin/rs
#
# $Header: /etc/rs.d/checkfs                               Exp $
# $License: 2-clause/new/simplified BSD                    Exp $
# $Copyright: (c) 2007-2008 Roy Marples <roy@marples.name> Exp $
#

description='Check filesystems'
SVC_USE='dev kmod clock dmcrypt lvm raid'

REBOOT_COMMAND='[ "${RS_STAGE}" = 1 ] && sv-shutdown --force --reboot'
SHUTDOWN_COMMAND='[ "${RS_STAGE}" = 1 ] && sv-shutdown --force --shutdown'

start()
{
	local exclude_fs fsck_opts fs

	for fs in ${NETWORKFS} ${EXTRA_NETWORKFS}; do
		exclude_fs="${exclude_fs},no${fs}"
	done

	if [ -e /fastboot ]; then
		warn "Skipping filesystems check (enabled by /fastboot)"
		rm -f /fastboot
		return 0
	fi

	if [ -e /forcefsck ]; then
		case " $(cat /proc/cmdline) " in
			(*" forcefsck "*) fsck_opts="-f ${fsck_opts}";;
		esac
		rm -f /forcefsck
	fi

	if [ "${OS_NAME}" = Linux ]; then
		fsck_opts="${fsck_opts} -C -T -t opts=no_netdev${exclude_fs}"
		if echo > /${SVC_NAME}.$$ 2>&1; then
			rm /${SVC_NAME}.$$
			fsck_opts="${fsck_opts} -R"
		fi
	fi

	trap : SIGINT SIGQUIT
	fsck ${FSCK_OPTS:--p} ${fsck_opts}
	case "${?}" in
		(0) return 0;;
		(1) warn "Filesystems repaired"; return 0;;
		(2|3)
			if [ "${OS_NAME}" = Linux ]; then
				error "Filesystems repaired"
				warn "System reboot"
				eval ${REBOOT_COMMAND}
			else
				error "Filesystems have errors"
				error "Mmanual filesystem check required"
				eval ${SHUTDOWN_COMMAND}
			fi
			;;
		(4)
			if [ "${OS_NAME}" = Linux ]; then
				error "Filesystem errors left uncorrected"
				warn "System shutdown"
				eval ${SHUTDOWN_COMMAND}
			else
				error "Filesystems repaired"
				warn "System reboot"
				eval ${REBOOT_COMMAND}
			fi
			;;
		(8) error "Operational error";;
		(*) error "Filesystems could not be repaired";;
	esac
	warn "System shutdown"
	eval ${SHUTDOWN_COMMAND}
}

stop()
{
	[ "${RS_STAGE}" = 3 ] || return
	yesno "${CHECKFS_SHUTDOWN}" || return 0
	start
}

#
# vim:fenc=utf-8:ft=sv:ci:pi:sts=0:sw=4:ts=4:
#
