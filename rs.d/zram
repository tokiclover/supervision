#!/etc/sv/.bin/rs
#
# $Header: /etc/rs.d/zram                                Exp $
# $Author: (c) 2012-2015 -tclover <tokiclover@gmail.com> Exp $
# $License: 2-clause/new/simplified BSD                  Exp $
# $Version: 0.20.0 2015/04/18 12:33:03                   Exp $
#

description="Set up & initialize ZRAM devices"
description_reset="Reset ZRAM devices"

SVC_BEFORE=bootmisc
SVC_COMMANDS=reset
:	${ZRAM_DEV:=4}

start()
{
	local dev fs mode dir num opt ret; num=0

	while true; do
		dev=/dev/zram${num}
		[ -b ${dev} ] || break
		eval set -- \${ZRAM_DEV_${num}}
		fs="${2}" dir="${3}" opt="${4}" mode="${5}"
		[ -n "${fs}" ] || continue
		
		case "${fs}" in
			(swap)
			begin "Activating ${dev} swap device"
			mkswap ${dev} >${NULL} 2>&1 &&
			swapon ${dev} >${NULL} 2>&1
			end ${?};;
			(*)
			begin "Formating ${dev} for ${fs} filesystem"
			mkfs -t ${fs} ${dev} >${NULL} 2>&1
			ret=${?}; end ${ret}

			if [ ${ret} = 0 ] && [ -n "${dir}" ]; then
				[ -d "${dir}" ] || mkdir -p "${dir}"

				begin "Mounting ${dev} on ${dir}"
				mount -t ${fs} ${opt+-o} ${opt} ${dev} "${dir}"
				end ${?}
				[ -n "${mode}" ] && chmod ${mode} "${dir}"
			fi;;
		esac
		num=$((${num}+1))
	done
	return 0
}

start_pre()
{
	local dev num size
	yesno ${ZRAM_INIT} || return 0

	if grep -q zram /proc/modules; then
		if ! rmmod zram >${NULL} 2>&1; then
			reset && rmmod zram >${NULL} 2>&1
		fi
	fi
	modprobe zram num_devices=${ZRAM_DEV} >${NULL} 2>&1 || reset

	case "${ZRAM_COMP}" in
		(lz4|lzo)     ;;
		(*) ZRAM_COMP=;;
	esac
	dev=/sys/block/zram0 num=0
	[ -w ${dev}/comp_algorithm    ] || ZRAM_COMP=
	[ -w ${dev}//max_comp_streams ] || ZRAM_STREAM=

	while true; do
		dev=/sys/block/zram$num
		[ -d ${dev} ] || break
		eval set -- \${ZRAM_DEV_${num}}
		size=${1}; [ -n "${size}" ] || continue

		[ -n "${ZRAM_COMP}"   ] && echo ${ZRAM_COMP}   >${dev}/comp_algorithm
		[ -n "${ZRAM_STREAM}" ] && echo ${ZRAM_STREAM} >${dev}/max_comp_streams
		echo ${size} >${dev}/disksize
		num=$((${num}+1))
	done
}

stop()
{
	local dev fs dir num; num=0
	while true; do
		dev=/dev/zram${num}
		[ -b ${dev} ] || break
		eval set -- \${ZRAM_DEV_${num}}
		fs="${2}" dir="${3}"
		[ -n "${fs}" ] || continue

		case "${fs}" in
			(swap)
			begin "De-Activating ${dev} swap device"
			swapoff "${dev}" >${NULL} 2>&1
			end ${?};;
			(*)
		case "${dir}" in
			(*/run|*/tmp) ;;
			(*)
			begin "Unmounting ${dir}"
			umount -l "${dir}" >${NULL} 2>&1
			end ${?};;
		esac;;
		esac
		num=$((${num}+1))
	done
	return 0
}

reset()
{
	local dev force ret
	svc_state -s || force=1

	for dev in /dev/zram[0-9]*; do
		grep -q ${dev} /proc/mounts || continue
		case ${force-0} in
			(1)
			begin "Umounting ${dev}"
			umount -l ${dev}
			end ${?};;
			(0)
			warn "${dev} zram device is mounted"
			ret=$((${ret}+1))
			continue;;
		esac
		echo 1 >/sys/block/${dev#/dev}reset
	done
	return ${ret}
}

restart()
{
	start
}

#
# vim:fenc=utf-8:ft=sh:ci:pi:sts=0:sw=4:ts=4:
#
