#!/sbin/rs
#
# $Header: /etc/rs.d/zramfs                              Exp $
# $Author: (c) 2012-6 tokiclover <tokiclover@gmail.com>  Exp $
# $License: 2-clause/new/simplified BSD                  Exp $
# $Version: 0.22.1 2016/06/06 12:33:03                   Exp $
#

description="Initialize ZRAM devices and filesystems"
description_reset="Reset ZRAM devices"

SVC_BEFORE=miscfs
SVC_COMMANDS=reset

:	${ZRAM_DEVICE_NUMBER:=4}

start()
{
	local DEV dev fs mode dir num=0 offset=0 opt ret
	local CONTINUE='{ num=$((${num}+1)); continue; }'

	while true; do
		#
		# Find the first free device
		#
		dev=/dev/zram$((${num}+${offset}))
		[ -b ${dev} ] || break
		if [ "$(cat /sys/block/${dev##*/}/size)" != 0 ]; then
			offset=$((${offset}+1)); continue;
		fi
		eval set -- \${ZRAM_DEVICE_${num}}
		size="${1}" fs="${2}" dir="${3}" opt="${4}" mode="${5}"
		#
		# Initialize device if defined
		#
		DEV="/sys/block/${dev##*/}"
		[ -n "${size}" ] || break
		[ -n "${ZRAM_COMPRESSOR}"    ] && echo ${ZRAM_COMPRESSOR}    >${DEV}/comp_algorithm
		[ -n "${ZRAM_STREAM_NUMBER}" ] && echo ${ZRAM_STREAM_NUMBER} >${DEV}/max_comp_streams
		echo ${size} >${DEV}/disksize
		#
		# Setup device if requested
		#
		[ -n "${fs}" ] || eval ${CONTINUE}
		case "${fs}" in
			(swap)
			begin "Activating ${dev} swap device"
			mkswap ${dev} >${NULL} 2>&1 &&
			swapon ${dev} >${NULL} 2>&1
			end ${?};;
			(*)
			begin "Formating ${dev} for ${fs} filesystem"
			mkfs -t ${fs} ${dev} >${NULL} 2>&1
			ret=${?}; end ${ret}

			if [ ${ret} = 0 ] && [ -n "${dir}" ]; then
				[ -d "${dir}" ] || mkdir -p "${dir}"

				begin "Mounting ${dev} on ${dir}"
				mount -t ${fs} ${opt+-o} ${opt} ${dev} "${dir}"
				end ${?}
				[ -n "${mode}" ] && chmod ${mode} "${dir}"
			fi;;
		esac
		eval ${CONTINUE}
	done
	return 0
}

start_pre()
{
	case "${ZRAM_COMPRESSOR}" in
		(lz4|lzo)     ;;
		(*) ZRAM_COMPRESSOR=;;
	esac
	[ -w /sys/block/zram0/comp_algorithm   ] || ZRAM_COMPRESSOR=
	[ -w /sys/block/zram0/max_comp_streams ] || ZRAM_STREAM_NUMBER=

	if grep -qw zram /proc/modules; then
		if ! rmmod zram >${NULL} 2>&1; then
			reset && rmmod zram >${NULL} 2>&1 ||
				{ warn "Cannot initialize kernel module"; return; }
		fi
	fi
	modprobe zram num_devices=${ZRAM_DEVICE_NUMBER} >${NULL} 2>&1 || reset
}

stop()
{
	local dev fs dir num=0
	while true; do
		fs="${2}" dir="${3}"
		case "${fs}" in
			(swap) ;;
			([a-z]*)
			case "${dir}" in
				(*/run|*/tmp) ;;
				(*)
				if mountinfo -q "${dir}"; then
					begin "Unmounting ${dir}"
					umount -l "${dir}" >${NULL} 2>&1
					end ${?}
				fi;;
			esac;;
			(*) break;;
		esac
		num=$((${num}+1)); continue;
	done
	return 0
}

reset()
{
	local dev ret=0
	for dev in /dev/zram[0-9]*; do
		if grep -qw "${dev} " /proc/mounts || grep -qw "${dev} " /proc/swaps; then
			warn "${dev} is mounted"
			ret=$((${ret}+1))
			continue
		fi
		echo 1 >/sys/block/${dev##*/}/reset
	done
	return ${ret}
}

restart()
{
	start
}

#
# vim:fenc=utf-8:ft=sv:ci:pi:sts=0:sw=4:ts=4:
#
