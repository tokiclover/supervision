#
# $Id: /etc/sv.conf.d/qemu-vlan.vnet0, 2018/07/08           Exp $
# 
# Reference:
#    http://www.linux-kvm.org/page/Networking
#    https://en.wikibooks.org/wiki/QEMU/Networking
# Concept:
#    http://wiki.libvirt.org/page/VirtualNetworking
#
# Setup a virtual (private) network which can be used with IPtables and DHCP;
# which means private network are isolated from each other; and then,
# routing is necessary like real LAN network similar to VMware network
# vmnet[0-8]:
#
#   * Adding DNS server for each subnet using dnsmasq DHCP and DNS serer:
#     - add name_servers=172.16.x.1 for persistent configuration in
#       /etc/resolvconf.conf;
#     - add 172.16.x.1 to /etc/resolv.conf to not have to restart dnsmasq;
#     *x* is usually *1i* *i* the virtual network number e.g. 10 for vnet0.
#
#     Use dnsmasq as a DHCP server for virtual network which have access to
#     outside world; or ISC dhcpd for private network by supplying
#     QEMU_VLAN_DHCP="(dnsmask|dhcpd)" command line argument; and then
#     add 172.16.10.1 if vnet0 is configured to run a DNS and DHCP server.
#
#     QEMU_VLAN_DHCP="dhcpcd|dhclient" can be used to start a DHCP client for
#     bridged network to set up a dynamic IP address for the bridge (vnet${i}.)
#
#   * And then setting up iptables rules for internal interfaces and NAT
#     is required as well. See, ~/bin/ipr for a complete statefull firewll
#     setup, e.g. `~/bin/ipr -e eth0 -d -i vnet1,vnet2,vnet3' for exmaple.
#
#   * And finaly use ether=/etc/qemu/vnet${i}/ether.conf hwaddr to provide
#     mac=${ether}_$j to qemu for persistent network and unique hwaddr.
#     Of course, that configuration file--`/etc/qemu/${br}/${br}.conf` can be used
#     to configure the virtual LAN; or extra DHCP server options can be added
#     to ${ether%/*}/dhcp(d).conf for dnsmasq or dhcpcd.
#
#   * Redirect ports for (non bridged) virtual network can be done using
#     iptables's DNAT and SNAT targets. PREROUTING and POSTROUTING chains are supported
#     for VMs providing web services. The format is as the following:
#
#QEMU_VLAN_PREROUTING_RULSES="interface,proto,port,address:port[/4|6] interface,proto,..."
#QEMU_VLAN_POSTROUTING_RULSES="interface,proto,port,address:port[/4|6] interface,proto,..."
#
# interface   : external network interface to use for external traffic
# proto       : network protocol to use for redirect (tcp, udp,...)
# port        : incoming port on the host machine to use
# address:port: network address and port of the guest to send traffic to
# /4 or /6    : redirect IPv4 or IPv6 traffic (default to IPv4)
#
#    which are translated to the following rules for example:
#
# ${iptables} -A PREROUTING  -t nat -d 192.168.x.y --dport 8080  -j DNAT --to-destination 172.16.u.v:80
# ${iptables} -A POSTROUTING -t nat -s 172.16.u.v  --sport 80    -j SNAT --to-source   192.168.x.y:8080
#
#    `u' is the virtual LAN (`0' for `vnet0', `4' for `vnet4');
#    `v' is the lower address byte of the machine.
#
# Examples:
#
# XXX: NAT virtual network
#
#QEMU_VLAN_NUM="4"
#QEMU_VLAN_DHCP="dnsmasq"
#
#    to setup a virtual LAN with dnsmasq as DHCP and DNS server (4 interfaces)
#    VMs will not be reachable from the outside world unless [DS]SNAT routing
#    is used to redirect ports to VMs for particular services; or else, use a
#    bridged virtual LAN by defining
#
#QEMU_VLAN_IF="eth0"
#
#    argument... and then switch
#    dnsmasq for a DHCP client (dhclient or dhcpcd) instead of a server.
#
# XXX: host-only private network
#
#QEMU_VLAN_NUM="8"
#QEMU_VLAN_DHCP="dhcpd"
#
#    to setup a private LAN with ISC dhcpd as DHCP server (8 interfaces)
#    with no access to outside world; and then use to start VMs:
#
#    `-netdev tap,id=vnet2_1,ifname=vnet2_1,script=no,downscript=no'
#
# XXX: DO NOT USE `-netdev tap,...,fd=$(</sys/class/net/vnet2_1/iflink)'
#      because it does not work at all as normal user or root; use the previous
#      construct instead.
#
# NOTE: No privileged users cannot safely use the first variant without an issue
# because qemu would fail to open `/dev/net/tun'; the second form is problematic
# because the tap device is not connected to the right NIC.
#
# SOLUTION: RUN VMs as SUPERUSER!!
#
# XXX: bridged network
#
#QEMU_VLAN_NUM="8"
#QEMU_VLAN_IF="eth0"
#
#    for a bridged virtual LAN (no need for DHCP server for a bridged setup)
#    and then use: `-netdev bridge,br=vnet2,id=vnet2_4' to start VMs.
#    See `/etc/sysctl.d/10-disable-firewall-on-bridge.conf` if each guest provide
#    a firewall.
#
# XXX: NAT network with VDE switches
#
#QEMU_VLAN_NUM="4"
#QEMU_VLAN_VDE="true"
#QEMU_VLAN_DHCP="dnsmasq"
#
#    to setup a virtual LAN with a VDE switch with a DHCP/DNS server 128 VMs
#    can be connected to vitual LAN with defaults settings; and then use:
#
#   `-netdev vde,id=vnet3_2,sock=/var/run/vnet3_2.vde_switch,group=qemu,mode=660'
#
#    VDE connection sockets are created like `/var/run/vnet3_${i}.vde_switch` for each
#    instance or per tap device; so using any instance is easy and can be scripted.
#
# WARN: Do not forget to use as many `-device e1000,mac=${ether}_2,netdev=vnet2_2'
# as necessary for each NIC, first. Second, append a hardware MAC address for
# each NIC; hardware address can be generated by passing `hwaddr' command,
# and then source `/etc/qemu/${br}/ether.conf'--br being vnet[0-9]?.
#
# Or else, use VDE switches instead which can be used by unprivileged users!
# `-device virtio-net,mac=${ether}_2,id=vnet3_2 -netdev vde,...'
#
# Just do not forget to define QEMU_VLAN_VDE=true argument to attach VDE switches
# to tap network devices. And this has the advantage to multiply the possible network
# port to x32 (unless VDE_SWITCH_ARGS is configured otherwise in the configuration
# /etc/qemu/vnet3/vnet3.conf file, for this example with `vde_switch_args=-n64').
# However defining
#
#QEMU_VLAN_DHCP="dnsmasq"
#QEMU_VLAN_VDE="true"
#QEMU_VLAN_NUM="4"
#
# would provide 32x4=128
# dynamicaly allocated IP address by DHCP server, up to 128+94, 30 are rserved
# for static address. Either, set up DNSMASQ_ARGS in the configuration with
# --dhcp-host=ARG, or use /etc/qemu/vnet3/dhcp.host host file instead.
#
# XXX: Another issue will rise when using DHCP client localy to configure internal
# interface which can grap an interface opened by qemu.
#
# SOLUTION: issue `ifconfig vnet3_$j 0.0.0.0 up' in the host to allow the guest
# to configure the interface with `dhclient|dhcpcd IFACE' in the guest.
#
# Need hardware address for persistent network? Use `hwaddr' service command.
# would generate hardware address (QEMU_VLAN_VDE=true multiply  by 32,
# the default factor is 8.)
# 
# REQUIREMENTS:
#
#   ip [iproute2](https://wiki.linuxfoundation.org/networking/iproute2),
#   ifconfig, sed, md5sum,
#   [vde](http://vde.sourceforge.net/),
#   [dhcpd](http://roy.marples.name/projects/dhcpcd/),
#   [dnsmasq](http://www.thekelleys.org.uk/dnsmasq/doc.html),
#   [dhcpcd](http://www.isc.org/products/DHCP)
#   [iptables](http://www.netfilter.org/projects/iptables/)
#

#
# vim:fenc=utf-8:ft=sh:ci:pi:sts=0:sw=4:ts=4:
#
