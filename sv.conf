#
# $Id:  @(#) /etc/sv.conf    (0.13.0) 2017/01/18   Exp $
#

#
# Enable logging (to /var/log/sv.log)
#
SV_LOGGER="No"

#
# Enable debugging service globally
#
SV_DEBUG="No"

#
# Enable logging information level message
#
SV_DEBUG_INFO="No"

#
# Enable logging to system logger syslog(3); SV_SYSLOG_INFO log info level
# messages to system logger.
#
SV_SYSLOG="No"
SV_SYSLOG_INFO="No"

#
# Enable nohang detection for service; service will recieve a SIGTERM after the
# timeout; SIGQUIT after a second timeout; and then SIGKILL. Default timeout is
# 60 seconds; service can change this setting by setting SVC_TIMEOUT or disable
# the timeout by setting SVC_KEYWORD=timeout (like checkfs).
#
# Alernatively, use SVC_TIMEOUT instead per service basis.
#
#SV_TIMEOUT="60"

#
# Start/Stop every dependency priority level in parallel
#
SV_PARALLEL="Yes"

#
# Specify a shell to be used when need be; else, /bin/sh would be
# used; sulogin can be used with Linux.
#
#SV_SHELL="/sbin/sulogin"

#
# Extra mount points list not to umount in shutdown/reboot runlevel
#
#SV_NO_UMOUNT=""

#
# Number of tty to setup in console service (consolefont, keymap, encoding)
#
SV_TTY_NUMBER="12"
#
# Enable or disable unicode console setup
#
SV_TTY_UNICODE="YES"

#
# Number of attempts to start a supervised service
# or use SVC_TRY per service basis.
#
SV_TRY="3"

#
# Timeout in seconds to wait for supervision services to be up or down
#
# This is only limited to wait that a child process appeared as the process to
# be executed, so the timeout should not be too great because the start up of
# default runlevel will be much longer. When the pidfile scpecific to the process
# itself should be checked, a {stop,start}_post() shell function should be used
# instead with a specific timeout like:
#
#     start_post()
#     {
#     	svc_wait "${SVC_TIMEOUT_UP:-${SV_TIMEOUT_UP}}" "${PIDFILE}"
#     }
#
# See, apache service for paratical examples.
#
SV_TIMEOUT_UP="10"
SV_TIMEOUT_DOWN="30"

#
# Subsystem or envirionment the services are used for.
#
# If this package is used only to supervise daemons, set SV_SYSTEM="supervision";
# If used in docker container, set SV_SYSTEM="docker"; etc.
# This is not a *capabilty* because any supported subsystem can be used!
#
# This setting is rather used to isolate and start/stop only services
# relevant to a particular environment or subsystem.
#
# Valid subsystem keywords are: "docker", "jail", "lxc", "openvz", "prefix",
#   "supervision", "systemd-nspawn", "uml", "vserver", "xen0", "xenu".
#
# Jus set the `container=${CONTAINER}' environment to PID 1; or just setup the
# container to set up that environment variable--add `--env "container=docker"'
# to docker-run(1) and be done with it; then autodection will go fine for those
# subsystems. A XEN, VServer of Jailed environment should be detected with no
# additional steps.
#
#SV_SYSTEM="supervision"

#
# Prefix to use when SV_SYSTEM="prefix".
#
# The default prefix used is the one used for compilation passed to `--prefix'
# command line argument to the configure script. However, this prefix is not
# used to setup a prefix installation on Linux systems, only on BSD systems.
#
# Setting up a prefix service directory is rather simple: install the (compiled)
# package to a particular destination directory by using PREFIX make variable;
# and then edit this file to set SV_PREFIX="${PREFIX}" and SV_SYSTEM="prefix".
# And then remove the default services in runlevels (but miscfs):
#     `rm /etc/sv.init.d/{sysboot,sysinit,single,shutdown,default}/*'
# Removing the services is only optional due to the usage of keywords to isolate
# services from subsystems or a PREFIX installation.
#
# If the subsystem is more like a virtual machine rather than a minimal container
# {miscfs,tmpfiles.setup} should be left in sysboot runlevel.
#
# Alternatively, this setting can be used for service look up in another
# directory; e.g. in BSD system such as FreeBSD, user services are installed in
# `/usr/local/etc/sv' instead of `/etc'. So, this add another service directory.
#
#SV_PREFIX="/usr/local"

#
# CGroup (DISABLED when SV_SYSTEM subsystem is enabled)
#
# Disable Control Group alltogether
#SV_CGROUP=No
#
# Enable inheriting from other subsystem controllers
#CGROUP_INHERIT="Yes"
# Enable child processes clean up
#CGROUP_CLEANUP="Yes"
# Enable/Use any or all subsystem resource management controller
#CGROUP_BLKIO=""
#CGROUP_CPU="cpu.share 512"
#CGROUP_CPUACCT=""
#CGROUP_DEVICES=""
#CGROUP_FREEZER=""
#CGROUP_HUGELTB=""
#CGROUP_MEMORY=""
#CGROUP_NET_CLS=""
#CGROUP_NET_PRIO=""
#CGROUP_PIDS=""
#CGROUP_RDMA=""

#
# Extra network filesystem besides:
#   afs, ceph, cifs, coda, davfs, fuse, fuse.sshfs, gfs, glusterfs, lustre,
#   ncpfs, nfs, nfs4, ocfs2, shfs, smbfs
#
EXTRA_NETWORKFS=""

#
# Disbale/enable ANSI colors
#
#COLOR=No

#
# vim:fenc=utf-8:ft=sh:ci:pi:sts=0:sw=4:ts=4:
#
