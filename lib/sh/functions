#
# $Id:  @(#) shfunctions    2.2 2018/08/24 21:09:26                   Exp $
# $C$:  Copyright (c) 2015-2018 tokiclover <tokiclover@gmail.com>     Exp $
# $L$:  2-clause/new/simplified BSD License                           Exp $
#

if [ -z "${__FUNCTIONS__}" ]; then
__FUNCTIONS__=1
__eol_print__="\n"

:	${NULL:=/dev/null}
[ -x /usr/bin/logger ] && __SVC_LOGGER__=true || __SVC_LOGGER__=false

#
# ZSH compatibility
#
if [ -n "${ZSH_VERSION}" ]; then
	emulate sh
	NULLCMD=:
	setopt SH_WORD_SPLIT
	disable -r end
fi

#
# @FUNCTION: Print message to system logger(1)
logger()
{
	if ${__SVC_LOGGER__}; then
		/usr/bin/logger "${@}"
	fi
}

#
# @FUNCTION: Print error message to stderr
#
error()
{
	local message="${*}"
	if ${__SVC_SYSLOG__:-false}; then
		logger "${name}[$$]: error: ${@}"
	fi
	if ${__SVC_DEBUG_INFO__:-flase}; then
		printf "${name}[$$]: error: ${@}\n" >&${__SV_DEBUG_FD__}
	fi
	__print_len__=$((${#name}+3+${#message}))
	local prefix="${name:+${color_fg_mag}${name}}"
	printf "${__print_eol__}${prefix} ${color_fg_red}error${color_rst}: ${message}${__eol_print__}" >&2
}

#
# @FUNCTION: Print info message to stdout
#
info()
{
	local message="${*}"
	if ${__SVC_SYSLOG_INFO__:false}; then
		logger "${name}[$$]: info: ${message}"
	fi
	if ${__SVC_DEBUG_INFO__:-false}; then
		printf "${name}[$$]: info: ${@}\n" >&${__SV_DEBUG_FD__}
	fi
	__print_len__=$((${#name}+3+${#message}))
	local prefix="${name:+${color_fg_ylw}${name}}"
	printf "${__print_eol__}${prefix} ${color_fg_blu}info${color_rst}: ${message}${__eol_print__}"
}

#
# @FUNCTION: Print warn message to stdout
#
warn()
{
	local message="${*}"
	if ${__SVC_SYSLOG__:-false}; then
		logger "${name}[$$]: warning: ${message}"
	fi
	if ${__SVC_DEBUG_INFO__:-false}; then
		printf "${name}[$$]: warn: ${@}\n" >&${__SV_DEBUG_FD__}
	fi
	__print_len__=$((${#name}+3+${#message}))
	local prefix="${name:+${color_fg_red}${name}}"
	printf "${__print_eol__}${prefix} ${color_fg_ylw}warning${color_rst}: ${message}${__eol_print__}" >&2
}

#
# @FUNCTION: Print begin message to stdout
#
begin()
{
	local message="${*}"
	if ${__SVC_SYSLOG_INFO__:-false}; then
		logger "${name}[$$]: notice: ${message}"
	fi
	if ${__SVC_DEBUG_INFO__:-false}; then
		printf "${name}[$$]: notice: ${@}\n" >&${__SV_DEBUG_FD__}
	fi
	printf "${__print_eol__}"
	__eol_print__=
	__print_eol__="\n"
	__print_len__=$((${#name}*2+6+${#message}))
	local prefix="${name:+${color_fg_mag}[${color_fg_blu}${name}${color_fg_mag}]${color_rst}}"
	printf "${prefix} ${message}"
}

#
# @FUNCTION: Print end message to stdout
#
end()
{
	local suffix ret="${1:-0}"
	shift
	local message="${*}"
	if ${__SVC_SYSLOG_INFO__:-false}; then
		logger "${name}[$$]: notice: ${message} [${ret}]"
	fi
	if ${__SVC_DEBUG_INFO__:-false}; then
		printf "${name}[$$]: notice: ${@} [${ret}]\n" >&${__SV_DEBUG_FD__}
	fi
	case "${ret}" in
		(0) suffix="${color_fg_blu}(${name}) [${color_fg_grn}ok${color_fg_blu}]${color_rst}";;
		(*) suffix="${color_fg_ylw}(${name}) [${color_fg_red}no${color_fg_ylw}]${color_rst}";;
	esac
	__print_len__=$((${COLUMNS}-${__print_len__}))
	printf "%*b\n" "${__print_len__}" "${message} ${suffix}"
	__eol_print__="\n"
	__print_eol__=
	__print_len__=0
	return "${ret}"
}

#
# @FUNCTION: YES or NO helper
#
yesno()
{
	case "${1:-NO}" in
	(0|[Dd][Ii][Ss][Aa][Bb][Ll][Ee]|[Oo][Ff][Ff]|[Ff][Aa][Ll][Ss][Ee]|[Nn][Oo])
		return 1;;
	(1|[Ee][Nn][Aa][Bb][Ll][Ee]|[Oo][Nn]|[Tt][Rr][Uu][Ee]|[Yy][Ee][Ss])
		return 0;;
	(*)
		return 2;;
	esac
}

#
# @FUNCTION: source wrapper
# @ARG: [OPT] FILE
#
DOT()
{
	local arg opt ret
	case "${1}" in
		(-[ed]) opt="${1}"; shift;;
	esac

	for arg; do
		if [ -r "${arg}" ]; then
			if ! . "${arg}"; then
				[ -n "${opt}" ] && error "Failed to source \`${arg}'"
				[ "${opt}" = "-d" ] && return 2
				ret=$((${ret}+2))
			fi
		else
			[ -n "${opt}" ] && error "Failed to found \`${arg}'"
			[ "${opt}" = "-d" ] && return 1
			ret=$((${ret}+1))
		fi
	done
	return ${ret}
}
SOURCE()
{
	DOT "${@}"
}

#
# @FUNCTION: Colors handler
#
eval_colors()
{
	local e f b c
	e='\e[' f='3' b='4'

	for c in 0:blk 1:red 2:grn 3:ylw 4:blu 5:mag 6:cyn 7:wht; do
		eval color_fg_${c#*:}="'${e}1;${f}${c%:*}m'"
		eval color_bg_${c#*:}="'${e}1;${b}${c%:*}m'"
		eval color_fg_${c%:*}="'${e}${f}${c%:*}m'"
		eval color_bg_${c%:*}="'${e}${b}${c%:*}m'"
	done

	color_rst="${e}0m"
	color_bld="${e}1m"
	color_und="${e}4m"
	color_ita="${e}3m"

	if [ "${1}" = 256 ]; then
		local i
		for i in seq 0 255; do
			eval color_bg_${i}="'${e}48;5;${i}m'"
			eval color_fg_${i}="'${e}38;5;${i}m'"
		done
	fi
}

if [ -t 1 ] && yesno "${COLOR:-Yes}"; then
	eval_colors
fi

boot_option()
{
	local cmdline=/proc/cmdline
	[ -e ${cmdline} -a -n "${1}" ] || return 1
	read cmdline <${cmdline}

	for cmdline in ${cmdline}; do
		[ "${1}" = "${cmdline}" ] && return 0
	done
	return 1
}

get_boot_option()
{
	local cmdline=/proc/cmdline
	[ -e ${cmdline} -a -n "${1}" ] || return 1
	read cmdline <${cmdline}

	for cmdline in ${cmdline}; do
		case "${cmdline}" in
			(${1}=*) eval "${cmdline}"; break;;
		esac
	done
	eval printf "\"\$${1}\""
}

#
# @FUNCTION: device info helper
# @ARG: OPTION DEVICE
#
device_info()
{
	local dev ret=0 file files opt=false
	[ -e /proc/devices ] && files=devices
	[ -e /proc/misc    ] && files="${files} misc"
	[ -n "${files}"    ] || return 1
	case "${1}" in
		(-a|--all) opt=true; shift;;
	esac

	for dev; do
		for file in ${files}; do
			grep -qsw "${dev}" /proc/${file}
			case "${?}" in
				(0)
				if ! ${opt}; then
					ret=0
					break
				fi;;
				(*) ret=$((${ret}+1));;
			esac
		done
	done
	return "${ret}"
}

isin()
{
	local sep=' ' val
	case "${1}" in
		(-d|--delimiter) sep="${2}"; shift 2;;
	esac
	val="${1}"
	shift
	case " ${*} " in
		(*"${sep}${val}${sep}"*) return 0;;
		(*)                      return 1;;
	esac
}

fi # __FUNCTIONS__

#
# vim:fenc=utf-8:ft=sh:ci:pi:sts=0:sw=4:ts=4:
#
