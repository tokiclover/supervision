#
# $Id:  @(#) supervision-functions    4.5 2018/08/22 21:09:26         Exp $
# $C$:  Copyright (c) 2015-2018 tokiclover <tokiclover@gmail.com>     Exp $
# $L$:  2-clause/new/simplified BSD License                           Exp $
#

__SUPERVIONS_FUNCTIONS__=1

envdir()
{
	${SV_LIBDIR}/bin/envdir "${@}"
}
envuidgid()
{
	${SV_LIBDIR}/bin/envuidgid "${@}"
}
fghack()
{
	${SV_LIBDIR}/bin/fghack "${@}"
}
pgrphack()
{
	${SV_LIBDIR}/bin/pgrphack "${@}"
}
setlock()
{
	${SV_LIBDIR}/bin/setlock "${@}"
}
setuidgid()
{
	${SV_LIBDIR}/bin/setuidgid "${@}"
}
softlimit()
{
	${SV_LIBDIR}/bin/softlimit "${@}"
}

svc_down()
{
	SVC_DEBUG "function=svc_down( ${@} )"
	echo "" >${SV_RUNDIR}/${SVC_NAME}/down
	eval ${__SVCCMD__} ${__SIGSTOP__} ${SV_RUNDIR}/${SVC_NAME} &&
	svc_status --set -d
}
svc_up()
{
	SVC_DEBUG "function=svc_up( ${@} )"
	rm -f ${SV_RUNDIR}/${SVC_NAME}/down
	eval ${__SVCCMD__} ${__SIGSTRT__} ${SV_RUNDIR}/${SVC_NAME} &&
	svc_status --set -u
}

svc_start()
{
	local val=1 check_pid
	SVC_DEBUG "function=svc_start( ${@} )"

	svc_status -p && return 0
	svc_status --del -f
	cp -HRpu ${__svc__} ${SV_RUNDIR}
	[ -z "${__SCANCMD__}" ] || eval ${__SCANCMD__}

	if eval ${__SVCCMD__} ${__SIGWTUP__:-${__SIGSTRT__}} ${SV_RUNDIR}/${SVC_NAME} >${NULL} 2>&1 ||
		! svc_status -f; then
	#
	# XXX: wait pidfile because sv(8) is unreliable with false negative failures
	#
	if svc_wait -p -t ${SVC_TIMEOUT_UP:-${SV_TIMEOUT_UP:-10}} -f ${SVC_PIDFILE}; then
		val=0
	fi
	fi

	if [ "${val}" = "0" ]; then
		#
		# XXX: {Free,Open,Net}BSD pkill(1) do not have the `-F ${pidfile}'
		#
		if [ "${SV_UNAME}" = "Linux" ]; then
			check_pid='pkill -0 -F ${SVC_PIDFILE} -f ${SVC_CMD}'
		else
			local pid
			check_pid='read pid <${SVC_PIDFILE} && kill -0 ${pid}'
		fi
		if [ -e "${SVC_PIDFILE}" ] && eval ${check_pid}; then
			if svc_command start_post; then
				svc_status --set -s
			else
				svc_status --set -f
				val=2
			fi
		fi
	fi
	return "${val}"
}

svc_stop()
{
	local val=1
	SVC_DEBUG "function=svc_stop( ${@} )"

	svc_status -p || return 0

	if ! svc_command stop_pre; then
		return 2
	fi
	if eval ${__SVCCMD__} ${__SIGWDWN__:-${__SIGSTOP__}} ${SV_RUNDIR}/${SVC_NAME} >${NULL} 2>&1 ||
		! svc_status -f; then
	#
	# XXX: wait pidfile because sv(8) is unreliable with false negative failures
	#
	if svc_wait -E -p -t ${SVC_TIMEOUT_DOWN:-${SV_TIMEOUT_DOWN:-10}} -f ${SVC_PIDFILE}; then
		val=0
	fi
	fi
	if [ "${val}" = "0" ]; then
		if svc_command stop_post; then
			svc_status --del -s
			val=0
		else
			val=2
		fi
	fi
	return "${val}"
}

svc_restart()
{
	SVC_DEBUG "function=svc_restart( ${@} )"
	svc_stop
	svc_remove
	svc_start
}

svc_state()
{
	SVC_DEBUG "function=svc__status_( ${@} )"
	svc_status -p && eval ${__CHKCMD__} "${SV_RUNDIR}/${SVC_NAME}" ||
		{ echo -n stopped; return 1; }
}

svc_reload()
{
	SVC_DEBUG "function=svc_reload( ${@} )"
	if command -v reload >${NULL} 2>&1; then
		reload
	elif [ "${SV_TYPE}" = "rs" ]; then
		if [ -n "${SVC_CMD}"]; then
		svc_sig HUP
		else
		error "invalid command -- no reload command definition found"
		return 1
		fi
	elif [ -n "${__SIGRELD__}" ]; then
		eval ${__SVCCMD__} ${__SIGRELD__} "${SV_RUNDIR}/${SVC_NAME}"
	elif [ -n "${__SIGRHUP__}" ]; then
		eval ${__SVCCMD__} ${__SIGHUP__:-${__SIGEXIT__}} "${SV_RUNDIR}/${SVC_NAME}"
	else
		svc_sig HUP
	fi
}

svc_status()
{
	local arg="${1}"
	SVC_DEBUG "function=svc_status( ${@} )"
	shift
	if [ "${arg}" = "--set" ]; then
	case "${1}" in
		(-f|--fail*) printf "${__cmd__:-$2}" >"${SV_TMPDIR}/fail/${SVC_NAME}";;
		(-d|--down*) printf "" >"${SV_TMPDIR}/down/${SVC_NAME}";;
		(-s|--star*) printf "" >"${SV_TMPDIR}/star/${SVC_NAME}";;
		(-u|--up*)    rm -f "${SV_TMPDIR}/down/${SVC_NAME}";;
	esac
	elif [ "${arg}" = "--del" ]; then
	case "${1}" in
		(-d|--down*)  rm -f "${SV_TMPDIR}/down/${SVC_NAME}";;
		(-f|--fail*)  rm -f "${SV_TMPDIR}/fail/${SVC_NAME}";;
		(-s|--start*) rm -f "${SV_TMPDIR}/star/${SVC_NAME}";;
	esac
	else
	case "${1:-$arg}" in
		(-e|--exist) [ -e "${SV_SVCDIR}/${SVC_NAME}" ];;
		(-a|--acti*) [ -e "${SV_RUNDIR}/${SVC_NAME}" ];;
		(-f|--fail*) [ -e "${SV_TMPDIR}/fail/${SVC_NAME}" ];;
		(-s|--star*) [ -e "${SV_TMPDIR}/star/${SVC_NAME}" ];;
		(-d|--down*) [ -e "${SV_TMPDIR}/down/${SVC_NAME}" ];;
		(-w|--wait*) [ -e "${SV_TMPDIR}/wait/${SVC_NAME}" ];;
		(-p|--pid*)  [ -e "${SV_TMPDIR}/pids/${SVC_NAME}" ];;
	esac
	fi
}

#
# @FUNCTION: Pre-Run handler
#
svc_config()
{
	local x
	SVC_DEBUG "function=svc_config( ${@} )"

	for x in ${SVC_CONFIGFILE} ${SVC_REQUIRED_FILES}; do
		if [ ! -f "${x}" ]; then
			error "Failed to found \`${x}' configuration file"
			return 1
		fi
	done

	for x in ${SVC_CONFIGDIRS}; do
		if [ ! -d "${x}" ]; then
			error "Failed to found \`${x}' configuration directory"
			return 1
		fi
	done

	if [ -n "${SVC_NICE}" ] && [ "${SVC_NICE}" -ge -19 -a "${SVC_NICE}" -le 20 ]; then
		x="$(command -v nice 2>${NULL})"
		[ -n "${x}" -a -x "${x}" ] || return 0
		if [ -z "${PRE_CMD}" ]; then
			PRE_CMD="${x}"
			PRE_OPTS="-n${SVC_NICE}"
		else
			PRE_OPTS="${PRE_OPTS} ${x} -n${SVC_NICE}"
		fi
	fi
}
svc_start_pre()
{
	local SVC_FAILURE val=0
	SVC_FAILURE='{ svc_remove; svc_status --set -f; return ${val}; }'
	SVC_DEBUG "function=svc_add( ${@} )"

	if [ "${SVC_CMD#/}" = "${SVC_CMD}" ]; then
		SVC_CMD=$(command -v ${SVC_CMD} 2>${NULL})
	fi
	if ! [ -n "${SVC_CMD}" -a -x "${SVC_CMD}" ]; then
		error "SVC_CMD -- service command not found/defined"
		val=1
		eval ${SVC_FAILURE}
	fi
	if ! svc_config; then
		error "Configuration files check failed"
		val=2
		eval ${SVC_FAILURE}
	fi
	if ! svc_command start_pre; then
		val=3
		eval ${SVC_FAILURE}
	fi

	#
	# Set up CGroup
	#
	if [ "${SV_UNAME}" = "Linux" ]; then
		if yesno "${SV_CGROUP}"; then
			cgroup_add_service
		fi
	fi
}
svc_remove()
{
	SVC_DEBUG "function=svc_remove( ${@} )"
	rm -fr "${SV_RUNDIR}/${SVC_NAME}"
	svc_zap
}

#
# @FUNCTION: Pre-Finish handler
#
svc_stop_post()
{
	SVC_DEBUG "function=svc_stop_post( ${@} )"
	#
	# Handle run return values
	#
	if [ "${__ret__}" = "0" ]; then
	#
	# Set up CGroup
	#
	if [ "${SV_UNAME}" = "Linux" ]; then
		if yesno "${SV_CGROUP}"; then
			cgroup_remove_service
		fi
	fi

		return 0
	else
		:	${SVC_TRY:=${SV_TRY:-3}}
		__SVC_TRY__=$((${SVC_TRY}+1))
		ENV_SET __SVC_TRY__
		if [ ${__SVC_TRY__:-0} -ge ${SVC_TRY} ]; then
			svc_remove
			svc_status --set -f
			error "Maximum number of starting attempts reached."
		fi
		return 1
	fi
}

#
# @FUNCTION: Handle service deps
#
svc_depend()
{
	local dep
	SVC_DEBUG "function=svc_depend( ${@} )"
	if [ "${1}" = "stop" ]; then
		return 0
	else
		dep=1
	fi

	if yesno "${SVC_DEPS:-${dep}}"; then
	for dep in ${__SV_DEPS_ORDER__%before:BEFORE*}; do
		command -v svc_${dep%:*} >${NULL} 2>&1 || continue
		eval svc_${dep%:*} ${1}
		eval RET_${dep#*:}=${?}
	done
	fi

:	${RET_NEED:=0}
	if [ "${SV_TYPE}" = "sv" ]; then
		SVC_DEPS="${RET_NEED}"
		ENV_SET SVC_DEPS
	fi
	if [ "${RET_NEED}" != 0 ]; then
		error "Failed to set up service dependencies"
	fi
	return ${RET_NEED}
}

svc_need()
{
	SVC_DEBUG "function=svc_need( ${@} )"
	[ -n "${SVC_NEDD}" ] || return 0
	svc_use "${1:-start}" "${2:-${SVC_NEED}}"
}
svc_use()
{
	local ret svc
	SVC_DEBUG "function=svc_use( ${@} )"
	for svc in ${2:-${SVC_USE}}; do
		sv-run -q "${svc}" "${1:-start}"
		ret=$((${ret}+${?}))
	done
	return ${ret}
}

#
# @FUNCTION: Set persistent env between run/finish
#
svc_env()
{
	local opt env
	SVC_DEBUG "function=svc_env( ${@} )"
	case "${1}" in
		(opts/${SVC_NAME}|env) opt="${1}"; shift;;
		(*) opt="opts/${SVC_NAME}";;
	esac
	for env; do
		sed "/^${env}=/d" -i ${SV_TMPDIR}/${opt} >${NULL} 2>&1
	done
	for env; do
		eval echo "${env}=\"'\$${env}'\""
	done >>"${SV_TMPDIR}/${opt}"
}
env_set()
{
	SVC_DEBUG "function=env_set( ${@} )"
	[ -n "${*}" ] && svc_env "opts/${SVC_NAME}" "${@}"
}
ENV_DEL()
{
	SVC_DEBUG "function=ENV_DEL( ${@} )"
	env_del "${@}"
}
ENV_SET()
{
	SVC_DEBUG "function=ENV_SET( ${@} )"
	env_set "${@}"
}
ENV_SVC()
{
	SVC_DEBUG "function=ENV_SVC( ${@} )"
	[ -n "${*}" ] && svc_env "env" "${@}"
}
env_del()
{
	local opt env
	SVC_DEBUG "function=env_del( ${@} )"
	case "${1}" in
		(opts/${SVC_NAME}|env) opt="${1}"; shift;;
		(*) opt="opts/${SVC_NAME}";;
	esac
	for env; do
		sed -e "/^${env}=.*$/d" -i ${SV_TMPDIR}/${opt}
	done
}

svc_scan()
{
	SVC_DEBUG "function=svc_scan( ${@} )"
	SVCDEPS_UPDATE=1 ${SV_LIBDIR}/sh/sv-deps.sh "${SVC_NAME}" "${@}"
}

svc_desc()
{
	local desc
	SVC_DEBUG "function=svc_desc( ${@} )"
	eval desc=\"\${description${1:+_$1}}\"
	if [ -n "${desc}" ]; then
		info ${1:+${1}:} "${desc}"
	else
		warn "No description found"
	fi
}

svc_command()
{
	SVC_DEBUG "function=svc_command( ${@} )"
	if command -v ${1} >${NULL} 2>&1 && ! eval ${1}; then
		error "Failed to execute ${1} shell function"
		return 1
	else
		return 0
	fi
}
#
# @FUNCTION: Handle extra service commands
#
svc_commands()
{
	local cmd="${1}" started=false
	SVC_DEBUG "function=svc_commands( ${@} )"

	svc_status -s || svc_status -p && started=true

	if     isin ${cmd} ${SVC_STARTED_COMMANDS}; then
		if ! ${started}; then
			error "cannot execute \`${cmd}' command -- service is stopped"
			return 2
		fi
	elif   isin ${cmd} ${SVC_STOPPED_COMMANDS}; then
		if ${started}; then
			error "cannot execute \'${cmd}' command -- service is started"
			return 2
		fi
	elif ! isin ${cmd} ${SVC_COMMANDS}; then
		error "cannot execute \'${cmd}' command -- no command definition found"
		return 1
	fi

	if command -v ${cmd} >${NULL} 2>&1; then
		shift
		begin "processing ${cmd} ..."
		eval ${cmd} "${@}"
		end ${?}
	else
		error "\'${cmd}' command definition is not defined."
		return 3
	fi
}

svc_cmd()
{
	local arg cmd opt pfx=svc_
	SVC_DEBUG "function=svc_cmd( ${@} )"
	for arg; do
		case "${1}" in
			(add|del|desc|down|remove|up|zap)  cmd="${1}" ;;
			(reload|restart|start|stop|scan) cmd="${1}" ;;
			(cgroup_remove_service) cmd="${1}" pfx= ;;
			(status) cmd=state ;;
			(*) opt='"${@}"' cmd=commands; break  ;;
		esac
		shift
		opt='"${@}"'
		break
	done

	if [ "${SV_TYPE}" = "rs" ]; then
		case "${cmd}" in
			(restart|start|stop|status) pfx='rs_cmd ';;
		esac
	fi
	case "${cmd}" in
		(down|remove|up)
		svc_status -a || { error "Inactive service"  ; return 3; };;
	esac

	#
	# this is done internaly (rs) already
	#
	if ! svc_wait; then
		error "service is busy -- or remove ${SV_TMPDIR}/wait/${SVC_NAME}?"
		return 1
	fi

	begin "service ${cmd}: "
	eval ${pfx}${cmd} ${opt}
	end "${?}"
}

svc_environ()
{
	local dir file
	SVC_DEBUG "function=svc_environ( ${@} )"

	for dir in ../.env env; do
		[ -d ${dir} ] && ENV_CMD="${ENV_CMD} envdir ${dir}"
	done
	for file in SVC_USER SVC_GROUP; do
		[ -f "${SV_RUNDIR}/${SVC_NAME}/env/${file}" ] &&
			read ${file} <${SV_RUNDIR}/${SVC_NAME}/env/${file}
	done

	if [ -z "${ENV_CMD}" ]; then
	ENV_CMD="${SVC_USER:+envuidgid}"
	ENV_OPTS="${SVC_USER}${SVC_GROUP:+:${SVC_GROUP}}"
	else
	ENV_OPTS="${ENV_OPTS} ${SVC_USER:+envuidgid} ${SVC_USER}${SVC_GROUP:+:${SVC_GROUP}}"
	fi
}

svc_run()
{
	SVC_DEBUG "function=svc_run( ${@} )"
	if [ ${#} -ge 1 ]; then
		svc_cmd "${@}"
		return
	fi
	svc_start_pre || return
	[ "${SVC_DEPS}" = 0 ] || svc_depend || return
	#
	# this is done internaly (rs) already
	#
	if ! svc_wait; then
		error "service is busy -- or remove ${SV_TMPDIR}/wait/${SVC_NAME}?"
		return 1
	fi

	local virt real=${SV_TMPDIR}/star/${SVC_NAME}
	#
	# XXX: workaround for false start failure
	#
	if [ -n "${SVC_PROVIDE}" ]; then
		virt=${SV_TMPDIR}/star/${SVC_PROVIDE}
		if [ -f ${virt} ]; then
			grep -w -q "${SVC_NAME}" <${virt} && virt=
		fi
		if [ -n "${virt}" ]; then
			echo "${SVC_NAME}" >>${virt}
			if [ "$(wc -l <${virt})" -ge 2 ]; then
				virt=
			fi
		fi
	fi
	trap "rm -f ${SVC_PIDFILE} ${real} ${virt}" INT QUIT TERM
	printf "" >${real}
	printf "$$" >${SVC_PIDFILE}

	eval exec ${ENV_CMD} ${ENV_OPTS} ${PRE_CMD} ${PRE_OPTS} ${SVC_CMD:-${SVC_NAME}} ${SVC_OPTS}
	svc_status --set -f
	rm -f ${SVC_PIDFILE} ${virt} ${real}
}

svc_finish()
{
	local __ret__="${2:-$1}"
	SVC_DEBUG "function=svc_finish( ${@} )"
	shift
	svc_stop_post "${@}"

	#
	# XXX: workaround for false start failure
	#
	local virt real=${SV_TMPDIR}/star/${SVC_NAME}
	if [ -n "${SVC_PROVIDE}" ]; then
		virt=${SV_TMPDIR}/star/${SVC_PROVIDE}
		if [ -f ${virt} ]; then
			if [ "$(wc -l <${virt})" -ge 2 ]; then
				sed "/^${SVC_NAME}$/d" -i ${virt}
				virt=
			fi
		fi
	fi
	rm -f ${SVC_PIDFILE} ${virt} ${real}

	[ -n "${FIN_CMD}" ] || return 0
	eval exec ${FIN_CMD} ${FIN_OPTS}
}

svc_log_run()
{
	SVC_DEBUG "function=svc_log_run( ${@} )"
	checkpath -q -d ${LOG_MODE:+-m} ${LOG_MODE} \
		${SVC_USER:+-o} ${SVC_USER} ${SVC_GROUP:+-g} ${SVC_GROUP} ${SVC_LOGDIR}
	svc_command log_start_pre
	if [ "${__SV_NAM__}" = "runit" ]; then
		printf "${LOG_ARGS}\n" >config
	fi
	exec ${LOG_PRE_CMD} ${LOG_PRE_OPTS} ${LOG_CMD} ${LOG_OPTS}
}

svc_log_finish()
{
	SVC_DEBUG "function=svc_log_finish( ${@} )"
	svc_command log_stop_post
	[ -n "${LOG_FIN_CMD}" ] || return 0
	exec ${LOG_FIN_CMD} ${LOG_FIN_OPTS}
}

#
# @FUNCTIONS: service status functions
#
svc_status_start()
{
	svc_status -s
}
svc_status_stop()
{
	svc_started && return 1 || return 0
}
svc_status_active()
{
	svc_status --set
}
svc_status_down()
{
	svc_status -d
}
svc_status_up()
{
	if svc_active; then
		svc_status_down && return 1 || return 0
	else
		return 1
	fi
}
svc_status_exist()
{
	svc_status -e
}
svc_status_pid()
{
	svc_status -p
}

#
# vim:fenc=utf-8:ft=sh:ci:pi:sts=0:sw=4:ts=4:
#
