#
# $Id:  @(#) supervision-functions    4.4 2017/01/12 21:09:26         Exp $
# $C$:  Copyright (c) 2015-2018 tokiclover <tokiclover@gmail.com>     Exp $
# $L$:  2-clause/new/simplified BSD License                           Exp $
#

__SUPERVIONS_FUNCTIONS__=1

envdir()
{
	${SV_LIBDIR}/bin/envdir "${@}"
}
envuidgid()
{
	${SV_LIBDIR}/bin/envuidgid "${@}"
}
fghack()
{
	${SV_LIBDIR}/bin/fghack "${@}"
}
pgrphack()
{
	${SV_LIBDIR}/bin/pgrphack "${@}"
}
setlock()
{
	${SV_LIBDIR}/bin/setlock "${@}"
}
setuidgid()
{
	${SV_LIBDIR}/bin/setuidgid "${@}"
}
softlimit()
{
	${SV_LIBDIR}/bin/softlimit "${@}"
}

#
# @FUNCTION: Create (supervision) service
# @ARG: [SVC_NAME]
#
svc_new()
{
	local cmd svc dir

	while [ ${#} -ge 1 ]; do
		case "${1}" in
			(-l|--log)   log=0;;
			(*)   shift; break;;
		esac
		shift
	done
:	${svc:=${1:-${SVC_NAME}}}
:	${dir:=${SV_SVCDIR}/${svc}}

	[ -e "${dir}"  ] && return 0
	mkdir -p "${dir}${log:+/log}"

	for cmd in finish run ${log:+log/run log/finish}; do
		[ -x "${dir}/${cmd}" ] && continue
		ln -s ${SV_LIBDIR}/sh/cmd "${dir}/${cmd}"
	done
	[ -f ${dir}/OPTIONS ] || sed -e "s|@svc@|${svc}|" \
		${SV_LIBDIR}/sh/SV_OPTIONS.in >${dir}/OPTIONS
}

svc_down()
{
	echo "$(date)" >${SV_RUNDIR}/${SVC_NAME}/down
	eval ${__SVCCMD__} ${__SIGSTOP__} ${SV_RUNDIR}/${SVC_NAME} &&
	svc_mark -d
}
svc_up()
{
	rm -f ${SV_RUNDIR}/${SVC_NAME}/down
	eval ${__SVCCMD__} ${__SIGSTRT__} ${SV_RUNDIR}/${SVC_NAME} &&
	svc_mark -u
}

svc_start()
{
	local val

	svc_state -p && return 0
	cp -HRpu ${__svc__} ${SV_RUNDIR}
	[ -z "${__SCANCMD__}" ] || eval ${__SCANCMD__}

	rm -f ${SV_TMPDIR}/fail/${SVC_NAME}
	eval ${__SVCENV__} ${__SVCCMD__} ${__SIGWTUP__:-${__SIGSTRT__}} "${SV_RUNDIR}/${SVC_NAME}"
	#
	# XXX: wait five seconds
	#
	if svc_state -f; then
		val=1
	elif svc_wait ${SV_WAIT_PIDFILE:-5} ${SVC_PIDFILE}; then
		if [ -e "${SVC_PIDFILE}" ] && pkill -0 -F ${SVC_PIDFILE} -x ${SVC_CMD##*/}; then
			val=0
		else
			val=1
		fi
	else
		val=1
	fi
	if [ "${val}" = 0 ]; then
		svc_command start_post || val=2
	fi
	if [ "${val}" = 0 ]; then
		svc_mark -s
	else
		svc_mark -f
	fi
	return ${val}
}

svc_stop()
{
	local val

	svc_state -p || return 0

	if ! svc_command stop_pre; then
		return 2
	fi
	eval ${__SVCENV__} ${__SVCCMD__} ${__SIGWDWN__:-${__SIGSTOP__}} "${SV_RUNDIR}/${SVC_NAME}"
	if [ "${?}" = 0 ]; then
		svc_mark -S
		return 0
	else
		return 1
	fi
}

svc_restart()
{
	svc_stop
	svc_remove
	svc_start
}

svc_status()
{
	svc_state -p && eval ${__CHKCMD__} "${SV_RUNDIR}/${SVC_NAME}" ||
		{ echo -n stopped; return 1; }
}

svc_reload()
{
	if command -v reload >${NULL} 2>&1; then
		reload
	elif [ "${SV_TYPE}" = "rs" ]; then
		error "invalid command -- no reload command definition found"
		return 1
	elif [ -n "${__SIGRELD__}" ]; then
		eval ${__SVCCMD__} ${__SIGRELD__} "${SV_RUNDIR}/${SVC_NAME}"
	elif [ -n "${__SIGRHUP__}" ]; then
		eval ${__SVCCMD__} ${__SIGHUP__:-${__SIGEXIT__}} "${SV_RUNDIR}/${SVC_NAME}"
	else
		svc_sig HUP
	fi
}

svc_mark()
{
	yesno "${__SVC_WAIT__}" && return 0
	case "${1}" in
		(-f|--fail*) printf "${__cmd__:-$2}" >"${SV_TMPDIR}/fail/${SVC_NAME}";;
		(-d|--down*) printf "" >"${SV_TMPDIR}/down/${SVC_NAME}";;
		(-s|--star*) printf "" >"${SV_TMPDIR}/star/${SVC_NAME}";;
		(-u|--up*)   rm -f "${SV_TMPDIR}/down/${SVC_NAME}";;
		(-S|--stop*) rm -f "${SV_TMPDIR}/star/${SVC_NAME}" \
			               "${SV_TMPDIR}/fail/${SVC_NAME}";;
		(-w|--wait*) rm -f "${SV_TMPDIR}/wait/${SVC_NAME}";;
	esac
}

svc_state()
{
	case "${1}" in
		(-e|--exist) [ -e "${__svc__}" ];;
		(-a|--acti*) [ -e "${SV_RUNDIR}/${SVC_NAME}" ];;
		(-f|--fail*) [ -e "${SV_TMPDIR}/fail/${SVC_NAME}" ];;
		(-s|--star*) [ -e "${SV_TMPDIR}/star/${SVC_NAME}" ];;
		(-d|--down*) [ -e "${SV_TMPDIR}/down/${SVC_NAME}" ];;
		(-w|--wait*) [ -e "${SV_TMPDIR}/wait/${SVC_NAME}" ];;
		(-p|--pid*)  [ -e "${SVC_PIDFILE}" ];;
	esac
}

#
# @FUNCTION: Pre-Run handler
#
svc_config()
{
	local file
	for file in ${SVC_CONFIGFILE} ${SVC_REQUIRED_FILES}; do
		if [ ! -f "${file}" ]; then
			error "\`${file}' required file not found"
			return 1
		fi
	done
}
svc_start_pre()
{
	local SVC_FAILURE val=0
	SVC_FAILURE='{ svc_remove; svc_mark -f; return ${val}; }'

	if [ "${SVC_CMD#/}" = "${SVC_CMD}" ]; then
		SVC_CMD=$(command -v ${SVC_CMD:-${SVC_NAME}} 2>${NULL})
	fi
	if ! [ -n "${SVC_CMD}" -a -x "${SVC_CMD}" ]; then
		error "SVC_CMD -- service command not found/defined"
		val=1
		eval ${SVC_FAILURE}
	fi
	if ! svc_config; then
		error "Configuration files check failed"
		val=2
		eval ${SVC_FAILURE}
	fi
	if ! svc_command start_pre; then
		val=3
		eval ${SVC_FAILURE}
	fi

	#
	# Set up CGroup
	#
	if [ "${OS_NAME}" = "Linux" ]; then
		if yesno "${SV_CGROUP}"; then
			cgroup_add_service
		fi
	fi
}
svc_remove()
{
	rm -fr "${SV_RUNDIR}/${SVC_NAME}"
	svc_zap
}

#
# @FUNCTION: Pre-Finish handler
#
svc_stop_post()
{
	#
	# Handle run return values
	#
	if [ "${__ret__}" = "0" ]; then
	#
	# Set up CGroup
	#
	if [ "${OS_NAME}" = "Linux" ]; then
		if yesno "${SV_CGROUP}"; then
			cgroup_remove_service
		fi
	fi

		return 0
	else
		:	${SVC_TRY:=${SV_TRY:-3}}
		__SVC_TRY__=$((${SVC_TRY}+1))
		env_svc __SVC_TRY__
		if [ ${__SVC_TRY__:-0} -ge ${SVC_TRY} ]; then
			svc_remove
			svc_mark -f
			error "Maximum number of starting attempts reached."
		fi
		return 1
	fi
}

#
# @FUNCTION: Handle service deps
#
svc_depend()
{
	local dep
	if [ "${1}" = "stop" ]; then
		return 0
	else
		dep=1
	fi

	if yesno "${SVC_DEPS:-${dep}}"; then
	for dep in ${__SV_DEPS_ORDER__%before:BEFORE*}; do
		command -v svc_${dep%:*} >${NULL} 2>&1 || continue
		eval svc_${dep%:*} ${1}
		eval RET_${dep#*:}=${?}
	done
	fi

:	${RET_NEED:=0}
	if [ "${SV_TYPE}" = "sv" ]; then
		__SVC_DEPEND__="${RET_NEED}"
		env_svc __SVC_DEPEND__
	fi
	if [ "${RET_NEED}" != 0 ]; then
		error "Failed to set up service dependencies"
	fi
	return ${RET_NEED}
}

svc_need()
{
	[ -n "${SVC_NEDD}" ] || return 0
	svc_use "${1:-start}" "${2:-${SVC_NEED}}"
}
svc_use()
{
	local ret svc
	for svc in ${2:-${SVC_USE}}; do
		service -q "${svc}" "${1:-start}"
		ret=$((${ret}+${?}))
	done
	return ${ret}
}

#
# @FUNCTION: Set persistent env between run/finish
#
svc_env()
{
	local opt env
	case "${1}" in
		(opts/${SVC_NAME}|env) opt="${1}"; shift;;
		(*) opt="opts/${SVC_NAME}";;
	esac
	for env; do
		eval echo "${env}=\"'\$${env}'\""
	done >>"${SV_TMPDIR}/${opt}"
}
env_svc()
{
	[ -n "${*}" ] && svc_env "opts/${SVC_NAME}" "${@}"
}
ENV_SVC()
{
	[ -n "${*}" ] && svc_env "env" "${@}"
}
env_del()
{
	local opt env
	case "${1}" in
		(opts/${SVC_NAME}|env) opt="${1}"; shift;;
		(*) opt="opts/${SVC_NAME}";;
	esac
	for env; do
		sed -e "/^${env}=.*$/d" -i ${SV_TMPDIR}/${opt}
	done
}

svc_scan()
{
	SVCDEPS_UPDATE=1 ${SV_LIBDIR}/sh/depgen "${SVC_NAME}" "${@}"
}

svc_desc()
{
	local desc
	eval desc=\"\${description${1:+_$1}}\"
	if [ -n "${desc}" ]; then
		info ${1:+${1}:} "${desc}"
	else
		warn "No description found"
	fi
}

svc_command()
{
	if command -v ${1} >${NULL} 2>&1 && ! eval ${1}; then
		error "Failed to execute ${1} shell function"
		return 1
	else
		return 0
	fi
}
#
# @FUNCTION: Handle extra service commands
#
svc_commands()
{
	local cmd="${1}" started=false

	svc_state -s || svc_state -p && started=true

	if     isin ${cmd} ${SVC_STARTED_COMMANDS}; then
		if ! ${started}; then
			error "cannot execute \`${cmd}' command -- service is stopped"
			return 2
		fi
	elif   isin ${cmd} ${SVC_STOPPED_COMMANDS}; then
		if ${started}; then
			error "cannot execute \'${cmd}' command -- service is started"
			return 2
		fi
	elif ! isin ${cmd} ${SVC_COMMANDS}; then
		error "cannot execute \'${cmd}' command -- no command definition found"
		return 1
	fi

	if command -v ${cmd} >${NULL} 2>&1; then
		shift
		begin "processing ${cmd} ..."
		eval ${cmd} "${@}"
		end ${?}
	else
		error "\'${cmd}' command definition is not defined."
		return 3
	fi
}

svc_cmd()
{
	local arg cmd opt pfx=svc_
	for arg; do
		case "${1}" in
			(add|del|desc|down|remove|up|zap)  cmd="${1}" ;;
			(reload|restart|start|stop|status) cmd="${1}" ;;
			(cgroup_remove_service) cmd="${1}" pfx= ;;
			(scan) cmd=scan ;;
			(*) opt='"${@}"' cmd=commands; break  ;;
		esac
		shift
		opt='"${@}"'
		break
	done

	if [ "${SV_TYPE}" = "rs" ]; then
		case "${cmd}" in
			(restart|start|stop|status) pfx='rs_cmd ';;
		esac
	fi
	case "${cmd}" in
		(down|remove|up)
		svc_state -a || { error "Inactive service"  ; return 3; };;
	esac

	#
	# this is done internaly (rs) already
	#
	if yesno "${__SVC_WAIT__:-1}"; then
		if ! svc_wait -E ${SV_WAIT_PIDFILE:-5}; then
			error "service is busy -- or remove ${SV_TMPDIR}/wait/${SVC_NAME}?"
			return 1
		fi
		trap "rm -f ${SV_TMPDIR}/wait/${SVC_NAME}" INT QUIT TERM
		if svc_state -w; then
			error "service is busy -- retry later"
			return 1
		else
			svc_mark -w
		fi
	fi

	begin "service ${cmd}: "
	eval ${pfx}${cmd} ${opt}
	end "${?}"
}

svc_environ()
{
	local dir file

	for dir in ../.env env; do
		[ -d ${dir} ] && ENV_CMD="${ENV_CMD} envdir ${dir}"
	done
	for file in SVC_USER SVC_GROUP; do
		[ -f "${SV_RUNDIR}/${SVC_NAME}/env/${file}" ] &&
			read ${file} <${SV_RUNDIR}/${SVC_NAME}/env/${file}
	done

	if [ -z "${ENV_CMD}" ]; then
	ENV_CMD="${SVC_USER:+envuidgid}"
	ENV_OPTS="${SVC_USER}${SVC_GROUP:+:${SVC_GROUP}}"
	else
	ENV_OPTS="${ENV_OPTS} ${SVC_USER:+envuidgid} ${SVC_USER}${SVC_GROUP:+:${SVC_GROUP}}"
	fi
}

svc_run()
{
	if [ ${#} -ge 1 ]; then
		svc_cmd "${@}"
		return
	fi
	svc_start_pre || return
	[ "${__SVC_DEPEND__}" = 0 ] || svc_depend || return

	#
	# XXX: workaround for false start failure
	#
	local virt real=${SV_TMPDIR}/star/${SVC_NAME}
	if [ -n "${SVC_PROVIDE}" ]; then
		virt=${SV_TMPDIR}/star/${SVC_PROVIDE}
	fi
	trap "rm -f ${real} ${virt}" INT QUIT TERM
	[ -n "${virt}" ] && echo "${SVC_NAME}" >${virt}
	echo >${real}
	echo $$ >${SVC_PIDFILE}

	eval exec ${ENV_CMD} ${ENV_OPTS} ${PRE_CMD} ${PRE_OPTS} ${SVC_CMD:-${SVC_NAME}} ${SVC_OPTS}
	svc_state -f
	rm -f ${SVC_PIDFILE} ${virt} ${real}
}

svc_finish()
{
	local __ret__="${1}"
	shift
	svc_stop_post "${@}"

	#
	# XXX: workaround for false start failure
	#
	local virt real=${SV_TMPDIR}/star/${SVC_NAME}
	if [ -n "${SVC_PROVIDE}" ]; then
		virt=${SV_TMPDIR}/star/${SVC_PROVIDE}
	fi
	rm -f ${SVC_PIDFILE} ${virt} ${real}

	[ -n "${FIN_CMD}" ] || return 0
	eval exec ${FIN_CMD} ${FIN_OPTS}
}

svc_log_run()
{
	checkpath -q -d ${LOG_MODE:+-m} ${LOG_MODE} \
		${SVC_USER:+-o} ${SVC_USER} ${SVC_GROUP:+-g} ${SVC_GROUP} ${SVC_LOGDIR}
	svc_command log_start_pre
	if [ "${__SV_NAM__}" = "runit" ]; then
		printf "${LOG_ARGS}\n" >config
	fi
	exec ${LOG_PRE_CMD} ${LOG_PRE_OPTS} ${LOG_CMD} ${LOG_OPTS}
}

svc_log_finish()
{
	svc_command log_stop_post
	[ -n "${LOG_FIN_CMD}" ] || return 0
	exec ${LOG_FIN_CMD} ${LOG_FIN_OPTS}
}

#
# vim:fenc=utf-8:ft=sh:ci:pi:sts=0:sw=4:ts=4:
#
