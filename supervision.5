.\"
.\" CopyLeft (c) 2015-2018 tokiclover <tokiclover@gmail.com>
.\"
.\" Distributed under the terms of the 2-clause BSD License
.\"
.pc
.TH SUPERVISION 5 "2017-01-18" "0.14.0" "File Format Manual"
.SH NAME
supervision \- supervision framework init-system and service-manager
.SH DESCRIPTION
Supervision package aims to provide and easy, simple and efficient
service-manager and init-system build to function with a supervision suite.
Though the init-system part can be bypassed altogether by using only
.I default
runlevel or init-stage and
thus benefit the easy to use the service-management framework for supervision.
.SS SUPERVISION
Supervision aims to provide an easy and efficient way to supervision;
deamontools[-encore], runit and s6 supervisor backends are actually supported.
(Supervision-)services use, by default, a single \fI@SYSCONFDIR@/sv/\fBSERVICE\fI/OPTIONS\fR
file and \fI./{finish,run}\fR command files symlinked to \fI@LIBDIR@/sv/sh/cmd\fR.
The same goes for the log directory.
.I Envdir
variant with a global \fI@SYSCONFDIR@/sv/.env/\fR and local
\fI@SYSCONFDIR@/sv/\fBSERVICE\fI/env/\fR is also supported.
.SS RUNSCRIPT
It also support runscript services that can be used
to finely set up and boot a full system.
The same environment variables are used, minus that, almost only dependencies
and extra commands are usable in this context if no daemon is involved.
(Runscript-)services use a single executable \fI@SYSCONFDIR@/\fBSERVICE\fR file
with an optional configuration file \fI@SYSCONFDIR@/sv.conf.d/\fBSERVICE\fR
which uses the same formating and syntax as improved common
.B rc
script file (e.g. OpenRC.) Meaning that, only functions and dependency are
defined in the files. This is also true for supervision services.
.SH CONFIGURATION
Global configuration can be done with
.I @SYSCONFDIR@/sv.conf
file. Do note that, this will affect every service.
Local, per service, configuration is done with
.I OPTIONS
files. See
.B OPTIONS
sub-section for more information.
.SH "SERVICE COMMANDS"
Standard LSB
.I {start,stop,status}
along with
.I {reload,restart,zap}
and
.I {add,desc,cgroup_remove_service,scan}
extra commands are supported.
Supervision-services also support
.I {new,remove,up,down}
command to create a new service with a template; the other two send the
.I {up,down}
command to the supervisor.
.I reload
command has special meaning for supervision services in that, if no
.I reload
command definition is found and the supervision suite support a
.I reload
command, that command will be used instead.
And then, if not, a
.B SIGHUP
would be sent the supervisor.
Or else, send
.B SIGHUP
directly to the daemon.
The other command remove the service from
.B SV_RUNDIR
(running /service/ directory.)
And the last to remove Control Group PIDs hierarchy.
`\fI@SBINDIR@/rs\fR [OPTIONS] SERVICE COMMAND [ARGUMENTS]' can be used for
any service type and efficiency; or the following for a particular service type.
Some commands, like
.I {add,del}
require a runlevel
`-(0|1|3|4|5)' to get the appropriate result.

Or use \fI$PREFIX/@SYSCONFDIR@/sv\fR service directory when applicable instead
of only \fI@SYSCONFDIR@/sv\fR service directory.

.TP
.B SUPERVISION
And
.B `@SYSCONFDIR@/sv/SERVICE/run [OPTIONS] COMMAND [ARGUMENTS]'
can be used instead for supervision services.
.TP
.B RUNSCRIPT
And
.B `@SYSCONFDIR@/sv/SERVICE COMMAND [ARGUMENTS]'
can be used instead for runscript services.
.SH "SERVICE INSTANCES"
.TP
.B SUPERVISION
Service supporting many instances can be written in a short manner
like a virtual service backend with specific \fIOPTIONS.\fRINSTANCE
file, e.g.
.I syslog
with
.I socklog
backend (suporting extra
.I {inet,ucspi,unix}
instances),
instead of duplicating unecessary directory and symbolic links;
And then a single extra
.B INSTANCE->SERVICE
symbolic link would suffice.
See also
.I getty
for an example of multi-providers/instances with
.I only
a single symlink and a single \fI@SYSCONFDIR@/sv/\fBSERVICE\fI/OPTIONS\fR
file.
.TP
.B RUNSCRIPT
Similarly, runscript service instances use a symlink to the service with an extra
\fI@SYSCONFDIR@/sv.conf.d/\fBINSTANCE\fR configuration file if any.
See
.I networkfs
(instance of
.I localfs
service) or
.I tmpfiles.setup
(instance of
.I tmpfiles.dev
service) for actual examples for this.
.SH "VIRTUAL SERVICES"
Making virtual services is easy as to use
.B SVC_PROVIDE
environment variable, for example,
.I SVC_PROVIDE=dev
for
.I mdev
or
.I udev
service. This will ensure that a specific provider included in an runlevel
will be started instead of
.I any
provider. This solution is more robust in specifying a particular provider for
an runlevel. Choosing a particular provider for a particular service (in the
network sense) is made by adding a particular provider in the runlevel, like
for example, adding
.I dhcp
in
.I sysboot
runlevel for
.I net
(just issue a `rs --sysboot dhcp add' and be done with it.)
.TP
.B SUPERVISION
Another scheme is to use a single directory for multiple providers like,
for example,
.I dns
,
.I ntp
or
.I syslog
or even
.I dhcp
service. This is the old legacy way to make a virtual service. And this manner
is welcomed to enforce a
.I single
instance mode for a particular
.I service
(in the network sense.) So, a
.I single
.B NTP
and
.B DNS
daemon will be started no matter what happen.
This variant is made by using a single directory and a specific
\fIOPTIONS.\fRPROVIDER
file for service that should be in a single instance mode, like
.B syslog
(see
.I syslog
service.)
.B WARNING:
Explicite usage of
\fIname=\fRCOMMAND_NAME
and
\fISVC_CMD=\fRCOMMAND_NAME
in \fIsv/\fRSERVICE\fI/OPTIONS\fR configuration
file is required to get the expected behavior.

Now, this simple scheme may not suffice with complicated service like
.I udev
, which would start any number of daemons as included instaces. This might not
be what is expected. So, use the previous manner by defining
.B SVC_PROVIDE
environment variable.
.TP
.B RUNSCRIPT
Similarly, runscript services use the first way of making a virtual service
described above, namely, by setting
.I SVC_PROVIDE
environment variable. The first variant cannot be used here because runscript
services are execuable files instead of directories.
.SH "APPLICATION USAGE"
Full
.I {after,before,need,use}
service dependencies is supported. See
.B DEPENDENCIES
and
.B RUNLEVELS
for more information.
.TP
.B SUPERVISION
If service dependencies matter, usage of Runit/S6 is recommanded.
Cold system boot should be fine because of priority level scheduling which start
services in parallele depending on the service dependencies; so, services with
dependencies would reliably wait enough if necessary, or else,
.I SV_TRY
or per service
.I SVC_TTRY
(supervision) limit configuration setting would restart (failed) services.
.TP
.B RUNSCRIPT
Now runscript service can be used to start daemons which cannot be kept in the
foreground even with
.B fghack
usage. See
.I {nrpe,nginx}
services for practical examples. Just keep in mind that either
.B SVC_PIDFILE
should be defined and/or enable
.B SV_CGROUP
for that matter.
.B SVC_PIDFILE
definition is enough to stop the service and
.B SV_CGROUP
will clean up every children in the Control Cgroup. This latter usage is more
than necessary when the daemon does not have option to print the PID in a file.
Those two points are all there is to stopping daemons started as
.I runscript
service instead of
.I supervision
one. There is no hack to try to find the PID of a daemon!
This ability was just added to avoid defining
.I ad infinitum
.B {start,stop}()
shell function. Just define at least
.B SVC_{CMD,OPTS}
and be done with it.

.TP
.B SUBSYSTEMS
Support for containrization solutions or \fBsubsystems\fR is available via
\fBkeywords\fR usage, see \fBKEYWORDS\fR subsection and \fI@SYSCONFDIR@/sv.conf\fR
for more information, for
.B docker,
.B LXC,
.B jail,
.B systemd-nspawn,
.B prefix,
.B supervision,
.B UML,
.B VServer
and
.B XEN.
Either the subsystem will be
auto detected or use \fI@SYSCONFDIR@/sv.conf\fR to set a particular subsystem with
.I SV_SYSTEM="${SUBSYSTEM}"
configuration variable...
.I SV_SYSTEM=supervision
for daemon supervision only;
.I SV_SYSTEM=prefix
for an isolated chrooted environment;
.I SV_SYSTEM=docker
for docker containers et al.
Services that have the subsystem keyword will not be started in that particular
subsystem environment.

To have the supervisor \fB({damontools[-encore],runit,s6})\fR executed as \fBPID 1\fR...
Just setup the container or subsystem; once done, use something like
the following for docker: `\fBdocker run [OPTIONS] --env container=docker --tmpfs /run
IMAGE /lib/sv/sh/init-stage --default\fR'; and voila! the supervisor will be executed
as \fIPID 1\fR and another process will handle service management to setup the container.

.SH OPTIONS
.SS ENVIRONMENT
The following environment variables are supported.
.TP
.B SUPERVISION
Supervision services use \fI@SYSCONFDIR@/sv/\fRSERVICE\fI/OPTIONS\fR
file or provider file(s) to define environment variables if necessary.
This where the command and command line options are defined alond with
shell functions for service setup and clean up if necessary.
.TP
.B RUNSCRIPT
Runscript services use \fI@SYSCONFDIR@/sv/\fRSERVICE script to define shell functions and
a default environment; and  \fI@SYSCONFDIR@/sv.conf.d/\fRSERVICE configuration file to
define extra services dependencies and other environment variables and service
options.
.RE
.TS
tab (@);
l lx.
\fBCOLOR=Yes\fR@T{
Enable or disable colored output (default to \fIYES\fR)
T}
\fBSVC_CONFIGFILE\fR@T{
Service configuration file
T}
\fBSVC_COMMANDS\fR@T{
Extra service commands
T}
\fBSVC_STARTED_COMMANDS\fR@T{
Extra started service commands
T}
\fBSVC_STOPPED_COMMANDS\fR@T{
Extra stopped service commands
T}
\fBSVC_DEBUG=Yes\fR@T{
Enable debug per service (default to \fBSV_DEBUG\fR, see \fI@SYSCONFDIR@/sv.conf\fR)
T}
\fBSVC_SYSLOG=Yes\fR@T{
Log service message to system \fIlogger(1)\fR (default to \fBSV_SYSLOG\fR, see \fI@SYSCONFDIR@/sv.conf\fR))
T}
\fBSVC_SYSLOG_INFO=Yes\fR@T{
Log service info message to \fIlogger(1)\fR (default to \fBSV_SYSLOG_INFO\fR, see \fI@SYSCONFDIR@/sv.conf\fR))
T}
\fBSVC_DEPS=No\fR@T{
To disable (or to force for stop phase) dependencies
T}
\fBSVC_NAME\fR@T{
Service name (default to SERVICE directory)
T}
\fBSVC_AFTER\fR@T{
Start service after dependency services
T}
\fBSVC_BEFORE\fR@T{
Start service before dependency services
T}
\fBSVC_USE\fR@T{
Try-to-Start use dependency services if any
T}
\fBSVC_NEED\fR@T{
Require need dependency services to be started
T}
\fBSVC_PROVIDE\fR@T{
Provide this virtual service for dependency use
T}
\fBSVC_KEYWORD\fR@T{
Keyword to enable per service (see \fBKEYWORDS\fR in this subsection)
T}
\fBSVC_TIMEOUT=30\fR@T{
Timeout per service to use when nohang detection is enabled to send signals
T}
\fBSVC_REQUIRED_FILES\fR@T{
Service required file-s
T}
\fBSVC_CMD\fR@T{
Command name (default to SERVICE directory)
T}
\fBSVC_OPTS\fR@T{
Command arguments
T}
\fBSVC_USER\fR@T{
\fBUSER\fR to use to run commands
T}
\fBSVC_GROUP\fR@T{
\fBGROUP\fR to use to run commands
T}
\fBSVC_PIDFILE\fR@T{
PID file of service (OVERRIDED for supervised services)
T}
\fBRC_OPTS=Yes\fR@T{
To enable support for OpenRC configuration files
T}
.TE

The following environment variables are only relevant for
.B SUPERVISION
services; many of which have default sane values (see
.I @SV_LIBDIR@/sh/cmd
for the default values before overriding any.)
Unless runscript services is used to start daemons that cannot be kept in the
foreground, defining the following variables are useless for runscript services.
.RE
.TS
tab (@);
l lx.
\fBSVC_TRY=10\fR@T{
Number of attempts to try start the service before removing from SV_RUNDIR
T}
\fBENV_DIR=Yes\fR@T{
To enable \fIenvdir\fR support mode (or \fIenvuidgid\fR when \fBSVC_{GROUP,USER}\fR are defined)
T}
\fBENV_CMD\fR@T{
Envdir command (default to [\fIenvdir SV_RUNDIR/.env\fR][\fIenvdir SV_RUNDIR/\fRSERVICE\fI/env\fR])
T}
\fBENV_OPTS\fR@T{
Envdir arguments
T}
\fBPRE_CMD\fR@T{
Pre-launch command
T}
\fBPRE_OPTS\fR@T{
Pre-launch arguments
T}
\fBFIN_CMD\fR@T{
Finish command
T}
\fBFIN_OPTS\fR@T{
Finish arguments
T}
\fBLOG_CMD\fR@T{
Log (run) command
T}
\fBLOG_OPTS\fR@T{
Log (run) arguments
T}
\fBLOG_FIN_CMD\fR@T{
Log (finish) command
T}
\fBLOG_FIN_OPTS\fR@T{
Log (finish) arguments
T}
\fBLOG_PRE_CMD\fR@T{
Log Pre-launch command
T}
\fBLOG_PRE_OPTS\fR@T{
Log Pre-launch arguments
T}
\fBLOG_SIZE\fR@T{
File size limit for log rotation (default to \fI2048000\fR)
T}
\fBLOG_STATE\fR@T{
Status prefix to use to set up \fI'+^${LOG_STAT} =${SVC_LOGDIR}/status'\fR option
T}
\fBLOG_PREFIX\fR@T{
Prefix to use for logging (default to \fI${SVC_NAME}\fR)
T}
\fBLOG_PROC\fR@T{
Processor command to use for log rotation (default to \fIgzip -nq\fR)
T}
\fBLOG_ARGS\fR@T{
Base options to use for logging (default to \fI"s${LOG_SIZE} !'${LOG_PROC}'"\fR)
T}
\fBLOGDIR\fR@T{
Default log directory (default to \fI/var/log\fR)
T}
\fBSVC_LOGDIR\fR@T{
Default service log directory (default to \fI${LOGDIR}/${SVC_NAME}\fR)
T}
\fBSVC_TIMEOUT_DOWN\fR@T{
Delay to wait the command to be down (default to \fBSV_TIMEOUT_DOWN=30\fR seconds, see \fI@SYSCONFDIR@/sv.conf\fR)
T}
\fBSVC_TIMEOUT_UP\fR@T{
Delay to wait the command to be up (default to \fBSV_TIMEOUT_UP=10\fR seconds, see \fI@SYSCONFDIR@/sv.conf\fR)
T}
.TE
.SS FUNCTIONS
Extra service commands along with supported commands are defined as shell functions.
.B WARNING:
A few functions starting with
.I {svc,rs}_
prefix are used for internal usage (see \fBBUILTINS\fR);
and thus are reserved for futur usage;
use `sv.vim' file type plugin or look at it to get a list of functions/keywords.
\fIenv_{del,svc}\fR shell functions are also reserved for internal usage.
\fI{checkpath,{fstab,mount}info,service,waitfile}\fR have shell functions of the
same name to bypass shell path look up for efficiency.)
And then, a few functions name have special meaning; read the following for more
information.
.TS
tab (@);
l lx.
\fBreload\fR@T{
Reload function for ./run (supervision) or runscript service
T}
\fBstart_pre\fR@T{
Setup function for ./run (supervision) or start() (runscript)
T}
\fBstart_post\fR@T{
Clean up function for ./run (supervision) or start() (runscript)
T}
\fBstop_pre\fR@T{
Setup function for ./finish (supervision) or stop() (runscript)
T}
\fBstop_post\fR@T{
Clean up function for ./finish (supervision) or stop() (runscript)
T}
.TE

.TP
.B SUPERVISION
Those two shell functions can be used for logdir setup and clean up for supervision
services; there are no meaning for runscript services and thus are not supported.
.TS
tab (@);
l lx.
\fBlog_start_pre\fR@T{
Setup function for (log) ./run
T}
\fBlog_stop_post\fR@T{
Clean up function for (log) ./finish
T}
.TE

See
.I @SV_LIBDIR@/sh/cmd
for the default and
.I OPTIONS
file for services like
.I acpid,
.I cron,
.I cgred,
.I dbus,
.I sshd
for practical examples.
.TP
.B RUNSCRIPT
Standard
.I {restart,start,stop}
along with
.I {start,stop}_{pre,post}
(set/clean up) functions are supported.
.TS
tab (@);
l lx.
\fBstart\fR@T{
Start shell function (preceded and followed by a set/clean up functions if any.)
T}
\fBstop\fR@T{
Same as above for stop shell function.
T}
\fBrestart\fR@T{
Custom stop/start command if any (default is \fI{stop,start}\R)
T}
.TE
.SS DEPENDENCIES
Standard
.I {after,before,need,use}
service dependencies is supported.
.I {after,before}
support a shell still regular expression to specify a broad range of service;
e.g.
.I SVC_AFTER="*"
or
.I SVC_BEFORE="*"
(for \fBgetty\fR or \fIrdonlyfs\fR services.)
Still, supervision scan model has the major advantage of parallel
service management making it simple and cheap to implement but
.I before
dependency type.
And then,
.B SV_PARALLEL
configuration setting can be enabled to start everything
in parallel. Actually a dependency tree is built to start in parallel what could
be untill the dependency of services are satisfied, this is where, everything is
started in parallel.

Mixed service dependencies is also supported. However, this is usable but in
.I sysinit
runlevel because the supervisor is started after
.I sysinit
runlevel.
See the above \fBENVIRONMENT\fR sub-section for more information on the dependency
environment variables.

.SS KEYWORDS
.TP
.B timeout
Disable timeout for \fI{start,stop}\fR command (relevent only when
.B SVC_TIMEOUT
or
.B SV_TIMEOUT
is set to an unsigned or postive integer.)
.TP
.RB shutdown
Disable the service in \fI{reboot,shutdown}\fR runlevels
.TP
.B SUBSYSTEM:
.RB [\| docker \|]
.RB [\| jail \|]
.RB [\| lxc \|]
.RB [\| openvz \|]
.RB [\| prefix \|]
.RB [\| supervision \|]
.RB [\| systemd-nspawn \|]
.RB [\| uml \|]
.RB [\| vserver \|]
.RB [\| xen0 \|]
.RB [\| xenu \|]

Disable the service in the SUBSYSTEM--see \fI@SYSCONFDIR@/sv.conf\fR for valid
subsystem keywords.

.SS ANSI COLORS
.B ANSI
escape sequences are available with
.B color_{b,f}g_<ID>
when \fB<ID>\fR is an integer from 0 to 7 for 8 colors terminal, or 0 to 255
for 256 colors terminals (a `\fIeval_clors 256\fR' is required beforehand.)
There are a few aliases for the base colors and attributes mapped to
\fIcolor_<ALIAS>\fR for the attributes and \fIcolor_{b,f}g_<ALIAS>\fR for colors:
.I und
for underline,
.I rst
for reset,
.I bld
for bold,
.I ita
for italic,
.I blk
for black,
.I red,
for red,
.I grn
for green,
.I ylw
for yellow,
.I blu
for blue,
.I mag
for magenta,
.I cyn
for cyan,
and
.I wht
for white.

.SH BUILTINS
.TS
tab (@);
l lx.
\fBinfo [MESSAGE]\fR@T{
Print notice message to standard output
T}
\fBwarn [MESSAGE]\fR@T{
Print warning message to standard output
T}
\fBerror [MESSAGE]\fR@T{
Print error message to standard error
T}
\fBbegin [MESSAGE]\fR@T{
Print beginning message to standard output
T}
\fBend [MESSAGE]\fR@T{
Print ending message to standard output
T}
\fBfstabinfo [OPTIONS] MOUNTPOINTS\fR@T{
Get information of fstab(5) entries
T}
\fBmountinfo [OPTIONS] MOUNTPOINTS\fR@T{
Get information of current mountpoints
T}
\fBdevice_info [-a|--all] DEVICES\fR@T{
Probe /proc/{devices,misc} device info
T}
\fBSOURCE [-e|-d] FILES\fR@T{
Source wrapper (with file existance check)
T}
\fBenv_svc VARS\fR@T{
Save persistent environment variables
T}
\fBsvc_cmd\fR@T{
Run a supported service command
T}
\fBenv_del VARS\fR@T{
Remove persistent environment variables
T}
\fBsvc_down -(d|r)\fR@T{
Set up a service as down (SUPERVISION)
T}
\fBsvc_mark -(S|d|f|s|u)\fR@T{
Set defined service status
T}
\fBsvc_state -(a|d|e|f|s)\fR@T{
Get defined service status
T}
\fBsvc_del\fR@T{
Remove service from runlevel directory
T}
\fBsvc_remove\fR@T{
Clean up service from running directory
T}
\fBsvc_sig -SIGNAL\fR@T{
Send a particular SIGNAL to the daemon service
T}
\fBsvc_wait [-E] TIMEOUT FILE\fR@T{
Wait a service file to appear or disapear--with \fI-E\fR option
T}
\fBsvc_zap\fR@T{
Remove temporary service files
T}
\fBwaitfile [-m] [-E] TIMEOUT FILE\fR@T{
Wait for file to appear or disapear--with \fI-E\fR option
T}
.TE

.SH RUNLEVELS
Superivision is organized in seven distinct runlevels like the classic SystemV
runlevels but are internaly handled like three init-stage plus system
initialization; one for system boot; second for multi users system;
third for system shutdown; and an extra single user mode and nonetwork for
compatiblity with SystemV or BSD init-system.

.B NOTE:
So, having, say,
.B udev
in
.I sysboot
runlevel would still work as expected because it will be almost the first service
to be started in the runlevel. Putting
.B udev
service in this particular runlevel instead of
.I sysinit
is required if supervising
.B udev
is necessary, because, the supervisor is only started after
.I sysinit
runlevel.

.I {sysinit,sysboot,default,nonetwork,shutdown,reboot,single,nonetwork}
run levels are supported.
Extra services that should be started in
.I single
run levels should be added into
.I single
runlevel like
.I sulogin
service or a shell for BSD OSs.
Just issue the classic command to add a service to
.B single
runlevel: `\fIrs --single sulogin add\fR'; however, this is already done in the
default installation process.
.B sysinit
runlevel is the initialization init-stage;
.B sysboot
runlevel is the first init-stage;
.B default
(multi users mode) runlevel is the
.I default
init-stage;
.B {nonetwork,single}
are only a modified
.B sysboot
runlevels without network services. So, in practice,
.B {nonetwork,single}
replace
.B sysboot
runlevel to be able to repair a system.
See \fBsv-stage\gR(8) for more inforation about runlevels.
.SH CONTROL GROUPS RESOURCE MANAGEMENT
.SS OVERVIEW
Supervision Framework support CGroup. CGroup support is autodected on
start up on Linux. Just enable kernel CGroup support to benefit CGroup resource
management. Or else, forcibly disable in
.B @SYSCONFDIR@/sv.conf
by setting
.B SV_CGROUP=No.
Set
.B CGROUP_INHERIT=Yes
to inherit other CGroups, and/or
.B CGROUP_CLEANUP=Yes
to clean up child processes of a \fIgroup\fR or supervised process (in ./finish.)

Global
.B @SYSCONFDIR@/sv.conf
and Local
.B (@SYSCONFDIR@/SERVICE/OPTIONS files for supervised services
or @SYSCOnFDIR@/sv.conf.d/SERVICE for runscript services)
Resource Management Settings is supported e.g.
.RB CGROUP_CPU='cpu.shares\ 256'.
Multi-value of a parameter is supported along with sets of multi-parameter-value.
.SS ENVIRONMENT
See the following table and Linux Documentation for more info on Resource Controllers.
.TS
tab (@);
l lx.
\fBCGROUP_BLKIO\fR@T{
Use Block IO Controller to manage resource for service(s)
T}
\fBCGROUP_CPU\fR@T{
Use CPU Controller to manage resource for service(s)
T}
\fBCGROUP_CPUACCT\fR@T{
Use CPU Accounting Controller to manage resource for service(s)
T}
\fBCGROUP_CPUSET\fR@T{
Use CPU Sets Controller to manage resource for service(s)
T}
\fBCGROUP_DEVICES\fR@T{
Use Device Whitlist Controller to manage resource for service(s)
T}
\fBCGROUP_MEMORY\fR@T{
Use Memory Controller to manage resource for service(s)
T}
\fBCGROUP_NET_CLS\fR@T{
Use Network Classifier to manage resource for service(s)
T}
\fBCGROUP_NET_PRIO\fR@T{
Use Network Priority to manage resource for service(s)
T}
.TE
.SS SERVICE
CGRED (CGroup Rules Engine Daemon) service is another alternative to CGroup
with finely grained rules and automatic PIDs classification.
However, libcgroup should be installed beforehand.

Something like the following can be used to put supervisor processes in CGroup:
.nf
--[cgconfig.conf]--
group supervisor {
  "name=supervision" {
  }
}
--[EOF]--
--[cgrules.conf]--
*:runsv  supervision   supervisor/
--[EOF]--
.fi
Replace
.IR runsv
with
.IR supervise
for daemontools[-encore] or
.IR s6-supervise
for S6.
See cgconfig.conf(5) and enable cgred service.

This is only necessary if not using the bundled Init-Stage-2 which have CGroup
support: child process (supervisor) will naturally inherit supervision CGroup.
.SH FILES
.SS @SBINDIR@
.TP
.I @SBINDIR@/rs
Multi-purpose binary to run either an init-stage or runlevel or service command, e.g.
`rs --sysboot zramfs add' to add
.B zramfs
service to syteme boot runlevel); `rs acpid start' or `rsv-stage --default' to start
daemons and default services (default runlevel) in multi users mode.
.SS @SYSCONFDIR@
.TP
.I @SYSCONFDIR@/sv.conf
Supervision global configuration file
.TP
.B \fI@SYSCONFDIR@/sv.conf.d\fR (\fBSV_CONFDIR\fR)
Runscript local configuration files directory
.TP
.B \fI@SYSCONFDIR@/sv.init.d\fR
Runlevel directory
.TP
.B \fI@SYSCONFDIR@/sv\fR (\fBSV_SVCDIR\fR)
See SV_SVCDIR/.RUNLEVEL for active services.
Use `rs -(0|1||3|4|5) SERVICE add` to add a particular service to a particular
init-stage or runlevel.
.B sysinit
is ready to use;
.B sysboot
can be modified to include services like
.B {zramfs,zfs,zpool,unionfs,device-mapper,dmraid,mdadm}
and so on; likewise for
.B default
runlevel.
.TP
.B "RUNSCRIPT SERVICES"
.RB [\| clock \|]\ \c
.RB [\| console \|]\ \c
.RB [\| devfs \|]\ \c
.RB [\| dmesg \|]\ \c
.RB [\| hostname \|]\ \c
.RB [\| kmod-static-nodes \|]\ \c
.RB [\| localfs \|]\ \c
.RB [\| loopback \|]\ \c
.RB [\| miscfs \|]\ \c
.RB [\| mtab \|]\ \c
.RB [\| networkfs \|]\ \c
.RB [\| nginx \|]\ \c
.RB [\| nrpe \|]\ \c
.RB [\| procfs \|]\ \c
.RB [\| rootfs \|]\ \c
.RB [\| swaps \|]\ \c
.RB [\| swapfiles \|]\ \c
.RB [\| sysctl \|]\ \c
.RB [\| sysfs \|]\ \c
.RB [\| tmpdirs \|]\ \c
.RB [\| tmpfiles.dev \|]\ \c
.RB [\| tmpfiles.setup \|]\ \c
.RB [\| zfs \|]\ \c
.RB [\| zfs-share \|]\ \c
.RB [\| zpool \|]\ \c
.RB (LINUX:[\| device-mapper \|]\ \c
.RB [\| dmcrypt \|]\ \c
.RB [\| dmraid \|]\ \c
.RB [\| kmod \|]\ \c
.RB [\| ipset \|]\ \c
.RB [\| ip[6]tables \|]\ \c
.RB [\| lvm \|]\ \c
.RB [\| lvm-monitor \|]\ \c
.RB [\| mdadm \|]\ \c
.RB [\| mdev \|]\ \c
.RB [\| qemu-binfmt \|]\ \c
.RB [\| qemu-vlan.vnet{0,4} \|]\ \c
.RB [\| unionfs \|]\ \c
.RB [\| zramfs \|])
.TP
.B "SUPERVISION SERVICES"
.RB [\| apache2 \|]\ \c
.RB [\| atd \|]\ \c
.RB [\| cron \|]\ \c
.RB [\| cupsd \|]\ \c
.RB [\| cups-browsed \|]\ \c
.RB [\| dhcp \|]\ \c
.RB [\| dhcpd \|]\ \c
.RB [\| dhcrelay \|]\ \c
.RB [\| dbus \|]\ \c
.RB [\| dns \|]\ \c
.RB [\| getty \|]\ \c
.RB [\| git-daemon \|]\ \c
.RB [\| gpm \|]\ \c
.RB [\| hostapd \|]\ \c
.RB [\| inetd \|]\ \c
.RB [\| initctl \|]\ \c
.RB [\| libvirtd \|]\ \c
.RB [\| httpd \|]\ \c
.RB [\| mysql \|]\ \c
.RB [\| nagios \|]\ \c
.RB [\| npcd \|]\ \c
.RB [\| ntp \|]\ \c
.RB [\| pcscd \|]\ \c
.RB [\| php-fpm \|]\ \c
.RB [\| postgresql \|]\ \c
.RB [\| rrdcached \|]\ \c
.RB [\| rsync-daemon \|]\ \c
.RB [\| saned \|]\ \c
.RB [\| sshd \|]\ \c
.RB [\| spawn-fcgi.nginx \|]\ \c
.RB [\| snmpd \|]\ \c
.RB [\| snmptrapd \|]\ \c
.RB [\| syslog \|]\ \c
.RB [\| virtlockd \|]\ \c
.RB [\| virtlogd \|]\ \c
.RB [\| wpa_supplicant \|]\ \c
.RB [\| xdm \|]\ \c
.RB [\| zed \|]\ \c
.RB (LINUX:\ [\| acpid \|]\ \c
.RB [\| cgred \|]\ \c
.RB [\| docker \|]\ \c
.RB [\| dmeventd \|]\ \c
.RB [\| lvmetad \|]\ \c
.RB [\| sulogin \|]\ \c
.RB [\| udev \|]\ \c
.RB [\| udev-monitor \|])
.TP
.I @SYSCONFDIR@/runit/{1,2,3,ctraltdel}
init-stage-{1,2,3} files to handle system boot/shutdown and supervisor; and
C-ALT-DEL signal handler for shutdown and reboot.
.TP
.I @SYSCONFDIR@/s6/{init,crash,finish}
Init-stage-{1,2,3} files to handle system boot, reboot and shutdown and
supervisor crashes.
.SS SV_RUNDIR: @RUNDIR@/sv
Default run time '/service/' directory
.SS SV_LIBDIR: \fI@LIBDIR@/sv\fR
SUPERVISION library directory
.SS SV_LIBDIR/bin: \fI@LIBDIR@/sv/bin\fR
.TP
.I @LIBDIR@/sv/bin/checkpath
Simple and cheap checkpath/mktemp binary
.TP
.I @LIBDIR@/sv/bin/fstabinfo
Simple and cheap fstab(5) utility
.TP
.I @LIBDIR@/sv/bin/mountinfo
Simple and cheap mountpoints utility
.TP
.I @LIBDIR@/sv/bin/waitfile
Simple and cheap wait file utility (alternative to \fIsvc_wait\fR shell function)
.TP
.B SYMLINKS\ (backend binary symlinks)
.RB \| @LIBDIR@/sv/bin/envdir \|\ \c
.RB \| @LIBDIR@/sv/bin/envuidgid \|\ \c
.RB \| @LIBDIR@/sv/bin/fghack \|\ \c
.RB \| @LIBDIR@/sv/bin/pgrphack \|\ \c
.RB \| @LIBDIR@/sv/bin/setlock \|\ \c
.RB \| @LIBDIR@/sv/bin/setuidgid \|\ \c
.RB \| @LIBDIR@/sv/bin/softlimit \|
.SS SV_LIBDIR/sbin: \fI@LIBDIR@/sv/sbin\fR
.TP
.I @LIBDIR@/sv/sbin/service
Compatiblity system utility symlink so that `servce SERVICE COMMAND' would work as
expected. This symlink may copied to
.I @SBINDIR@
system directory or the add \fI@LIBDIR@/sv/bin:@LIBDIR@/sv/sbin\fR to \fBPATH\fR environment variable.
.TP
.I @LIBDIR@/sv/sbin/sv-config
`\fI@LIBDIR@/sv/sbin/sv-config [--log] \fBSERVICE\fI new\fR' to create a new supervision service;
and ``fI@LIBDIR@/sv/sbin/sv-config -S runit\fR' to set up specific supervision backend (supervision suite).
.TP
.I @LIBDIR@/sv/sbin/sv-shutdown
Simple utility to handle system halt or reboot. It could be symlinked to
.B @SBINDIR@/sbin/{halt,shutdown,reboot}
to get SystemV or BSD interface... minor no compatible command line options.
.TP
.I @LIBDIR@/sv/sbin/{halt,poweroff,reboot,shutdown}
.B sv-shutdown
standard aliases for system shutdown (with default action.)
.SS SV_LIBDIR/sh: @LIBDIR@/sv/sh
.TP
.I @LIBDIR@/sv/sh/SV_CONFIG
Specific supervision (backend) environment
.TP
.I @LIBDIR@/sv/sh/cmd
Default sv/SERVICE/{,log/}{finish,run} command file
.TP
.I @LIBDIR@/sv/sh/depgen
Simple script to list dependencies
.TP
.I @LIBDIR@/sv/sh/cgroup-release-agent
CGroup Release Agent script
.TP
.I @LIBDIR@/sv/sh/init-stage
Init-stage-{1,2,3} handler for supervision
.TP
.I @LIBDIR@/sv/sh/cgroup-functions
CGroup Functions/helper library
.TP
.I @LIBDIR@/sv/sh/functions
Generic Functions/Helpers library
.TP
.I @LIBDIR@/sv/sh/runscript
Run-script helper utility
.TP
.I @LIBDIR@/sv/sh/runscript-functions
Run-script Functions/helpers library
.TP
.I @LIBDIR@/sv/sh/supervision-functions
Supervision Functions/Helpers library
.TP
.I @LIBDIR@/sv/sh/tmpfiles
Tmpfiles utility for SystemD tmpfiles.d compatiblity
.SH "SEE ALSO"
.BR rs (8),
.BR sv-stage (8),
.BR sv-shutdown (8),
.BR sh (1p)
.BR \%svc (8),
.BR \%multilog (8),
.BR \%svscan (8),
.BR \%sv (8),
.BR \%svlogd (8),
.BR \%runsvdir (8),
.BR \%s6-svc (8),
.BR \%s6-log (8),
.BR \%s6-svscan (8),
.SH AUTHORS
tokiclover <tokiclover@supervision.project>
.\"
.\" vim:fenc=utf-8:ft=groff:ci:pi:sts=2:sw=2:ts=2:expandtab:
.\"
