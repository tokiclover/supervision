.\"
.\" CopyLeft (c) 2015-2018 tokiclover <tokiclover@gmail.com>
.\"
.\" Distributed under the terms of the 2-clause BSD License
.\"
.pc
.TH SUPERVISION 5 "2018-08-30" "0.14.0" "File Format Manual"
.SH NAME
supervision \- supervision framework init-system and service-manager
.SH DESCRIPTION
Supervision provide an easy, simple and efficient
service-manager and init-system build to function with any supervisor.
Though the init-system part can be bypassed altogether by using only
.I default
run level or init-stage-2 and
thus benefit the easy to use supervised service-management.
A daemon could be supervised easily up to a single line service definition\-\-\c
defining only \fBSVC_OPTS=--foregroud\fR would suffice to manage and supervise
\fBacpid\fR service, or defining \fBSVC_OPTS='-f -d'\fR would suffice to manage
and supervise atd service.
.SS SUPERVISION SERVICE
Supervision service provide an easy and efficient way to supervise daemons;
deamontools[-encore], runit and s6 supervisor are actually supported.
(Supervision-)services use, by default, an \fI@SYSCONFDIR@/sv/\fBSERVICE\fI/OPTIONS\fR
file for service definition
and
.RB \./{\| finish , run \|}
command files symlinked to \fI@LIBDIR@/sv/sh/run\fR.
The same goes for the log directory for \fI./{run,finish}\fR command files.
.I Envdir
directory with a global \fI@SYSCONFDIR@/sv/.env/\fR and local
\fI@SYSCONFDIR@/sv/\fBSERVICE\fI/env/\fR is also supported.
.SS RUNSCRIPT SERVICE
It also support runscript services that can be used
to finely set up and boot a full system.
The same environment variables are used, minus that, almost only dependencies
and extra commands are usable in this context if no daemon is involved.
(Runscript-)services use a single executable \fI@SYSCONFDIR@/sv/\fBSERVICE\fR file
with an optional configuration file \fI@SYSCONFDIR@/sv.conf.d/\fBSERVICE\fR
which uses the same format and syntax as an improved common
.B rc
script file (e.g. OpenRC or the {Open,Net,Free}BSD like system.)
Meaning that, only functions and dependency are
defined in the files. This is also true for supervision services.
.SH CONFIGURATION
Global configuration can be done with
.I @SYSCONFDIR@/sv.conf
configuration file. Do note that, this will affect every service.
Local, per service, configuration is done with
\fI@SYSCONFDIR@/sv/\fBSERVICE\fI/OPTIONS\fR
file for supervision service and \fI@SYSCONFDIR@/sv.conf.d/\fBSERVICE\fR for runscript
service. See
.B OPTIONS
sub-section for more information.
Any service type support a local configuration file in \fI@SYSCONFDIR@/sv.conf.local.d/\fBSERVICE\fR as well.
.SH "SERVICE COMMANDS"
Standard service commands
.RB {(\| start ),( stop ), status ,( reload ),( restart ),( desc ), scan , zap \|}
and special supervised service commands
.RB {\| add ,( cgroup_remove_service \|)}
extra commands are supported.
Supervision-services also support
.RB {\| new , remove , up , down \|}
command to create a new service with a template; the other two send the
.RB {\| up , down \|}
command to the supervisor.
.I reload
command has special meaning for supervision services in that, if no
.I reload
command definition is found and the supervisor support a
.I reload
command, that command will be used instead.
And then, if not, a
.B SIGHUP
would be sent the supervisor.
This special meaning is also used for runscript service if used to manage a daemon.
The other command remove the service from
.B SV_RUNDIR
(running /service/ directory.)
And the last to remove Control Group hierarchy for linux systems.
.B @EXEC_PREFIX@@SBINDIR@/sv-run
.RB [\| OPTIONS \|]
.RB \| SERVICE \|
.RB \| COMMAND \|
.RB [\| ARGUMENTS \|]
can be used for
any service type and efficiency; or the following for a particular service type.
Some commands, like
.RB {\| add , del \|}
require a runlevel command line argument
.RB (\| \-0 | \-1 | \-3 | \-4 | \-5 \|)
to get the appropriate result.

Commands with parenthesis are optional. This is more true with runscript service.
If such a command is not defined in the service when the service is not used to
manage a daemon, no such command(s) are available.

.B restart
command is special in that, if no definition is found, a stop-start sequence will
replace the command as the following:
.RB {(\| stop_pre ),( stop ),( stop_post ),( start_pre ),( start ),( start_post \|)}
would follow in that exact sequence if the commands are defined (shell functions.)
Replace the
.RB {\| stop , start \|}
commands with the supervisor commands for supervision service which are always defined for
this type of service.

.B desc
command is available only if a \fIdescription\fR variable is defined in the service;
exra command(s) description is available if a \fIdescription_\fBCOMMAND\fR definition
is found for each extra command supported by the service. And then a
.B sv-run
.RB \| SERVICE \|
.RB \| desc \|
.RB \| COMMAND \|
can de used to display the command
description.

.TP
.B SUPERVISION SERVICE
And
.B @SYSCONFDIR@/sv/SERVICE/run
.RB [\| OPTIONS \|]
.RB \| COMMAND \|
.RB [\| ARGUMENTS \|]
can be used instead for supervision services,
which is strongly discouraged.
.TP
.B RUNSCRIPT SERVICE
And
.B @SYSCONFDIR@/sv/SERVICE
.RB \| COMMAND \|
.RB [\| ARGUMENTS \|]
can be used instead for runscript services.
.SH "SERVICE INSTANCES"
.TP
.B SUPERVISION SERVICE
Service supporting many instances can be written in a short manner
like a virtual service (see dns or dhcp service) with specific \fIOPTIONS.\fBINSTANCE\fR
file(s), like
.I syslog
with
.I socklog
provider (which support extra
.RB {\| inet , ucspi , unix \|}
instances),
instead of duplicating unecessary directory and symbolic links to \fI./{run,finish}\fR.
And then a single extra
`\fBln -s SERVICE INSTANCE\fR'
symbolic link in th eservice directory would suffice.
See also
.I getty
for an example of multi-providers/instances with
.I only
a single symlink and a single \fI@SYSCONFDIR@/sv/\fBSERVICE\fI/OPTIONS\fR
file.
.TP
.B RUNSCRIPT SERVICE
Similarly, runscript service instances use a symlink to the service with an extra
\fI@SYSCONFDIR@/sv.conf.d/\fBINSTANCE\fR configuration file if any.
See
.I networkfs
(instance of
.I localfs
service) or
.I tmpfiles.setup
(instance of
.I tmpfiles.dev
service) for actual examples for this.
.SH "VIRTUAL SERVICES"
Making virtual services is easy as to use
.B SVC_PROVIDE
environment variable, for example,
.I SVC_PROVIDE=dev
for
.I mdev
or
.I udev
service. This will ensure that a specific provider included in an runlevel
will be started instead of
.I any
provider. This solution is more robust in specifying a particular provider for
an runlevel. Choosing a particular provider for a particular service (in the
network sense) is made by adding a particular provider in the runlevel, like
for example, adding
.I dhcp
in
.I sysboot
runlevel for
.I net
(just issue a `sv-run --sysboot dhcp add' and be done with it.)
.TP
.B SUPERVISION SERVICE
Another scheme is to use a single directory for multiple providers like,
for example,
.I dns
,
.I ntp
or
.I syslog
or even
.I dhcp
service. This is the old legacy way to make a virtual service. And this manner
is welcomed to enforce a
.I single
instance mode for a particular
.I service
(in the network sense.) So, a
.I single
.B NTP
and
.B DNS
daemon will be started no matter what happen.
This variant is made by using a single directory and a specific
\fIOPTIONS.\fBPROVIDER\fR
file for service that should be in a single instance mode, like
.B syslog
(see
.I syslog
service.)
.B WARNING:
Explicite usage of
\fIname=\fRCOMMAND_NAME
and
\fISVC_CMD=\fRCOMMAND_NAME
in \fIsv/\fRSERVICE\fI/OPTIONS\fR configuration
file is required to get the expected behavior.

Now, this simple scheme may not suffice with complicated service like
.I udev
, which would start any number of daemons as included instaces. This might not
be what is expected. So, use the previous manner by defining
.B SVC_PROVIDE
environment variable.
.TP
.B RUNSCRIPT SERVICE
Similarly, runscript services use the first way of making a virtual service
described above, namely, by setting
.I SVC_PROVIDE
environment variable. The first variant cannot be used here because runscript
services are execuable files instead of directories.
.SH "APPLICATION USAGE"
Full
.RB {\| after , before , need , use \|}
service dependencies is supported. See
.B DEPENDENCIES
and
.B RUNLEVELS
for more information.
.TP
.B SUPERVISION SERVICE
If service dependencies matter, usage of Runit/S6 is recommanded.
Cold system boot should be fine because of priority level scheduling which start
services in parallele depending on the service dependencies; so, services with
dependencies would reliably wait enough if necessary, or else,
.I SV_TRY
or per service
.I SVC_TTRY
(supervision service) limit configuration setting would restart (failed) services.
.TP
.B RUNSCRIPT SERVICE
Now runscript service can be used to start daemons which cannot be kept in the
foreground even with
.B fghack
usage. See
.RB {\| nrpe , nginx \|}
services for practical examples. Just keep in mind that either
.B SVC_PIDFILE
should be defined and/or enable
.B SV_CGROUP
for that matter.
.B SVC_PIDFILE
definition is enough to stop the service and
.B SV_CGROUP
will clean up every children in the Control Cgroup. This latter usage is more
than necessary when the daemon does not have option to print the PID in a file.
Those two points are all there is to stopping daemons started as
.I runscript
service instead of
.I supervision
one. There is no hack to try to find the PID of a daemon!
This ability was just added to avoid defining
.I ad infinitum
.RB {\| start , stop \|}
shell function. Just define at least
.RB {\| SVC_CMD , SVC_OPTS \|}
and be done with it.

.TP
.B SUBSYSTEMS
Support for containrization solutions or \fBsubsystems\fR is available via
\fBkeywords\fR usage, see \fBKEYWORDS\fR subsection and \fI@SYSCONFDIR@/sv.conf\fR
for more information, for
.B docker,
.B LXC,
.B jail,
.B systemd-nspawn,
.B prefix,
.B supervision,
.B UML,
.B VServer
and
.B XEN.
Either the subsystem will be
auto detected or use \fI@SYSCONFDIR@/sv.conf\fR to set a particular subsystem with
.I SV_SYSTEM="${SUBSYSTEM}"
configuration variable...
.I SV_SYSTEM=supervision
for daemon supervision only;
.I SV_SYSTEM=prefix
for an isolated chrooted environment;
.I SV_SYSTEM=docker
for docker containers et al.
Services that have the subsystem keyword will not be started in that particular
subsystem environment.

To have the supervisor
.RB ({\| damontools[-encore] , runit , s6 \|})
executed as \fBPID 1\fR...
Just setup the container or subsystem; once done, use something like
the following for docker: `\fBdocker run [OPTIONS] --env container=docker --tmpfs /run
IMAGE /lib/sv/sh/sv-init.sh --default\fR'; and voila! the supervisor will be executed
as \fIPID 1\fR and another process will handle service management to setup the container.

.SH OPTIONS
.SS ENVIRONMENT
The following environment variables are supported.
.TP
.B SUPERVISION SERVICE
Supervision services use \fI@SYSCONFDIR@/sv/\fRSERVICE\fI/OPTIONS\fR
file or provider file(s) to define environment variables if necessary.
This where the command and command line options are defined alond with
shell functions for service setup and clean up if necessary.
.TP
.B RUNSCRIPT SERVICE
Runscript services use \fI@SYSCONFDIR@/sv/\fRSERVICE script to define shell functions and
a default environment; and  \fI@SYSCONFDIR@/sv.conf.d/\fRSERVICE configuration file to
define extra services dependencies and other environment variables and service
options.
.RE
.TS
tab (@);
l lx.
\fBCOLOR=Yes\fR@T{
Enable or disable colored output (default to \fIYES\fR)
T}
\fBSVC_CONFIGFILE\fR@T{
Service configuration file
T}
\fBSVC_CONFIGDIRS\fR@T{
Service configuration or required directory-ies
T}
\fBSVC_COMMANDS\fR@T{
Extra service commands
T}
\fBSVC_STARTED_COMMANDS\fR@T{
Extra started service commands
T}
\fBSVC_STOPPED_COMMANDS\fR@T{
Extra stopped service commands
T}
\fBSVC_DEBUG=Yes\fR@T{
Enable debug per service (default to \fBSV_DEBUG\fR, see \fI@SYSCONFDIR@/sv.conf\fR)
T}
\fBSVC_SYSLOG=Yes\fR@T{
Log service message to system \fIlogger(1)\fR (default to \fBSV_SYSLOG\fR, see \fI@SYSCONFDIR@/sv.conf\fR))
T}
\fBSVC_SYSLOG_INFO=Yes\fR@T{
Log service info message to \fIlogger(1)\fR (default to \fBSV_SYSLOG_INFO\fR, see \fI@SYSCONFDIR@/sv.conf\fR))
T}
\fBSVC_DEPS=No\fR@T{
To disable service dependencies
T}
\fBSVC_NAME\fR@T{
Service name (default to \fBSERVICE\fR)
T}
\fBSVC_AFTER\fR@T{
Start service after dependency services
T}
\fBSVC_BEFORE\fR@T{
Start service before dependency services
T}
\fBSVC_USE\fR@T{
Try-to-Start use dependency services if any
T}
\fBSVC_NEED\fR@T{
Require need dependency services to be started
T}
\fBSVC_PROVIDE\fR@T{
Provide this virtual service for dependency use
T}
\fBSVC_KEYWORD\fR@T{
Keyword to enable per service (see \fBKEYWORDS\fR in this subsection)
T}
\fBSVC_TIMEOUT=30\fR@T{
Timeout per service to use when nohang detection is enabled to send signals to kill the hanging service
T}
\fBSVC_REQUIRED_FILES\fR@T{
Service required files
T}
\fBSVC_CMD\fR@T{
Command name (default to SERVICE)
T}
\fBSVC_OPTS\fR@T{
Command arguments
T}
\fBSVC_USER\fR@T{
\fBUSER\fR to use to run commands
T}
\fBSVC_GROUP\fR@T{
\fBGROUP\fR to use to run commands
T}
\fBSVC_NICE\fR@T{
Niceness value to apply to daemon \fB+19\fR (low priority) to \fB-20\fR (high priority)
T}
\fBSVC_PIDFILE\fR@T{
PID file of service (default to \fB__SVC_PIDFILE__=${SV_TMPDIR}/pids/${SVC_NAME}\fR for supervised services)
T}
\fBRC_OPTS=Yes\fR@T{
To enable support for OpenRC service configuration files
T}
\fBSVC_PROVIDER\fR@T{
This variable is set to the provider of the service (readonly) {SUPERVISION}
T}
\fBSVC_INSTANCE\fR@T{
This variable is set to the instance of the service (readonly) {equal to \fBSVC_PROVIDER\fR for SUPERVISION}
T}
.TE

The following environment variables are only relevant for
.B SUPERVISION
services; many of which have default sane values (see
.I @SV_LIBDIR@/sh/run
for the default values before overriding any.)
Unless runscript services is used to start daemons that cannot be kept in the
foreground, defining the following variables are useless for runscript services.
.RE
.TS
tab (@);
l lx.
\fBSVC_TRY=10\fR@T{
Number of attempts to try start the service before removing from SV_RUNDIR
T}
\fBENV_DIR=Yes\fR@T{
To enable \fIenvdir\fR support mode (or \fIenvuidgid\fR when \fBSVC_{GROUP,USER}\fR are defined)
T}
\fBENV_CMD\fR@T{
Envdir command (default to [\fIenvdir SV_RUNDIR/.env\fR][\fIenvdir SV_RUNDIR/\fRSERVICE\fI/env\fR])
T}
\fBENV_OPTS\fR@T{
Envdir arguments
T}
\fBPRE_CMD\fR@T{
Pre-launch command
T}
\fBPRE_OPTS\fR@T{
Pre-launch arguments
T}
\fBFIN_CMD\fR@T{
Finish command
T}
\fBFIN_OPTS\fR@T{
Finish arguments
T}
\fBLOG_CMD\fR@T{
Log (run) command
T}
\fBLOG_OPTS\fR@T{
Log (run) arguments
T}
\fBLOG_FIN_CMD\fR@T{
Log (finish) command
T}
\fBLOG_FIN_OPTS\fR@T{
Log (finish) arguments
T}
\fBLOG_PRE_CMD\fR@T{
Log Pre-launch command
T}
\fBLOG_PRE_OPTS\fR@T{
Log Pre-launch arguments
T}
\fBLOG_SIZE\fR@T{
File size limit for log rotation (default to \fI2048000\fR)
T}
\fBLOG_STATE\fR@T{
Status prefix to use to set up \fI'+^${LOG_STAT} =${SVC_LOGDIR}/status'\fR option
T}
\fBLOG_PREFIX\fR@T{
Prefix to use for logging (default to \fI${SVC_NAME}\fR)
T}
\fBLOG_PROC\fR@T{
Processor command to use for log rotation (default to \fIgzip -nq\fR)
T}
\fBLOG_ARGS\fR@T{
Base options to use for logging (default to \fI"s${LOG_SIZE} !'${LOG_PROC}'"\fR)
T}
\fBLOGDIR\fR@T{
Default log directory (default to \fI/var/log\fR)
T}
\fBSVC_LOGDIR\fR@T{
Default service log directory (default to \fI${LOGDIR}/${SVC_NAME}\fR)
T}
\fBSVC_TIMEOUT_DOWN\fR@T{
Delay to wait the command to be down (default to \fBSV_TIMEOUT_DOWN=30\fR seconds, see \fI@SYSCONFDIR@/sv.conf\fR)
T}
\fBSVC_TIMEOUT_UP\fR@T{
Delay to wait the command to be up (default to \fBSV_TIMEOUT_UP=10\fR seconds, see \fI@SYSCONFDIR@/sv.conf\fR)
T}
.TE
.SS FUNCTIONS
Extra service commands along with supported commands are defined as shell functions.
.B WARNING:
A few functions starting with
.RB {\| svc_ , rs_ \|}
prefix are used for internal usage (see \fBBUILTINS\fR);
and thus are reserved for futur usage;
use `sv.vim' file type plugin or look at it to get a list of functions/keywords.
.RB {\| env_del , env_set \|}
shell functions are also reserved for internal usage.
.RB {\| checkpath , fstabinfo , mountinfo , service , waitfile \|}
have shell functions of the
same name to bypass shell path look up for efficiency.)
And then, a few functions name have special meaning; read the following for more
information.
.TS
tab (@);
l lx.
\fBreload\fR@T{
Reload function for ./run (supervision) or runscript service
T}
\fBstart_pre\fR@T{
Setup function for ./run (supervision) or start() (runscript)
T}
\fBstart_post\fR@T{
Clean up function for ./run (supervision) or start() (runscript)
T}
\fBstop_pre\fR@T{
Setup function for ./finish (supervision) or stop() (runscript)
T}
\fBstop_post\fR@T{
Clean up function for ./finish (supervision) or stop() (runscript)
T}
.TE

.TP
.B SUPERVISION SERVICE
Those two shell functions can be used for logging directory setup and clean up for supervision
services; there are no meaning for runscript services and thus are not supported.
.TS
tab (@);
l lx.
\fBlog_start_pre\fR@T{
Setup function for (log) ./run
T}
\fBlog_stop_post\fR@T{
Clean up function for (log) ./finish
T}
.TE

See
.RB @EXEC_PREFIX@@LIBDIR@/sv/sh/run
for the default and
.I OPTIONS
file for services like
.I acpid,
.I cron,
.I cgred,
.I dbus,
.I sshd
for practical examples.
.TP
.B RUNSCRIPT SERVICE
Standard
.RB {\| restart , start , stop \|}
along with
.RB {\| start_pre , start_post , stop_pre , stop_post \|}
(set/clean up) functions are supported.
.TS
tab (@);
l lx.
\fBstart\fR@T{
Start shell function (preceded and followed by a set/clean up functions if any.)
T}
\fBstop\fR@T{
Same as above for stop shell function.
T}
\fBrestart\fR@T{
Custom stop/start command if any (default is \fI{stop,start}\R)
T}
.TE
.SS DEPENDENCIES
Standard
.RB {\| after , before , need , use \|}
service dependencies is supported.
.RB {\| after , before \|}
support \fI*\R shell regular expression to specify a broad range of service;
like
.I SVC_AFTER="*"
or
.I SVC_BEFORE="*"
(for \fBgetty\fR or \fIrdonlyfs\fR services.)
Still, supervision scan model has the major advantage of parallel
service management making it simple and cheap to implement but
.I before
dependency type.
And then,
.B SV_PARALLEL
configuration setting can be enabled to start everything
in parallel. Actually a dependency tree is built to start in parallel what could
be untill the dependency of services are satisfied, this is where, everything is
started in parallel.

Mixed service dependencies is also supported. However, this is usable but in
.I sysinit
runlevel because the supervisor is started after
.I sysinit
runlevel.
See the above \fBENVIRONMENT\fR sub-section for more information on the dependency
environment variables.

.SS KEYWORDS
.TP
.B timeout
Disable timeout for any service command (relevent only when
.B SV_TIMEOUT
or
.B SVC_TIEOUT
is set to an unsigned or postive integer.)
.TP
.B shutdown
Disable the service in
.RB {\| reboot , shutdown \|}
runlevels
or simply, disable the \fBstop\fR service command.
.TP
.B SUBSYSTEM:
.RB [\| docker \|]
.RB [\| jail \|]
.RB [\| lxc \|]
.RB [\| openvz \|]
.RB [\| prefix \|]
.RB [\| supervision \|]
.RB [\| systemd-nspawn \|]
.RB [\| uml \|]
.RB [\| vserver \|]
.RB [\| xen0 \|]
.RB [\| xenu \|]

Disable the service in the SUBSYSTEM--see \fI@SYSCONFDIR@/sv.conf\fR for valid
subsystem keywords.

.SS ANSI COLORS ESCAPE SEQUENCES
.B ANSI
escape sequences are available with
.RB {\| color_bg_COLOR , color_fg_COLOR \|}
when \fBCOLOR\fR is an integer from 0 to 7 for 8 colors terminal, or 0 to 255
for 256 colors terminals (a `\fIeval_clors 256\fR' is required beforehand.)
There are a few aliases for the base colors and attributes mapped to
\fIcolor_ATTRIBUTE\fR for the attributes:
.I und
for underline,
.I rst
for reset,
.I bld
for bold,
.I ita
for italic,
and
.RB {\| color_bg_COLOR , color_fg_COLOR \|}
for colors:
.I blk
for black,
.I red,
for red,
.I grn
for green,
.I ylw
for yellow,
.I blu
for blue,
.I mag
for magenta,
.I cyn
for cyan,
and
.I wht
for white.

.SH BUILTINS
.TP
.B info
.RB [\| MESSAGE \|]
Print notice message to standard output
.TP
.B warn
.RB [\| MESSAGE \|]
Print warning message to standard output
.TP
.B error
.RB [\| MESSAGE \|]
Print error message to standard error
.TP
.B begin
.RB [\| MESSAGE \|]
Print beginning message to standard output
.TP
.B end
.RB [\| MESSAGE \|]
Print ending message to standard output
.TP
.BR fstabinfo \ \| [ OPTIONS ] \ MOUNTPOINTS \|
Get information of
.BR fstab (5)
entries
(see \fB@LIBDIR@/sv/bin/fstabinfo --help\fR for more inforamtion)


.RB \| \-m | \-\-mount \|
Mount the entry;
.rb
.RB \| \-r | \-\-remount \|
Remount the entry;
.rb
.RB \| \-d | \-\-device \|
Print device node;
.rb
.RB \| \-o | \-\-options \|
Print the mount options;
.rb
.RB \| \-t | \-\-fstype \|
Print the file system type;
.rb
.RB \| \-a | \-\-mntargs \|
Print
.BR mount (8)
command line arguments;
.rb
.RB \| \-q | \-\-quiet \|
Enable quiet mode;

.TP
.BR mountinfo \ \| [ OPTIONS ] \ MOUNTPOINTS \|
Get information of current
.BR mount (8)
points
(see \fB@LIBDIR@/sv/bin/mountinfo --help\fR for more information)

.RB \| \-D | \-\-device-skip-regex \ ARGUMENT \|
Device node regex to skip;
.rb
.RB \| \-O | \-\-optionsèskip-regex \ ARGUMANT \|
Mount options regex to skip;
.rb
.RB \| \-T | \-\-fstype-skip-regex \ ARGUMENT \|
File system type regex to skip;
.rb
.RB \| \-P | \-\-mpoint-skip-regex \ ARGUMENT \|
Mount point regex to skip;
.rb
.RB \| \-d | \-\-device-regex \ ARGUMENT \|
Device regex to match;
.rb
.RB \| \-o | \-\-options-regex \ ARGUMENT \|
Mount options regex to match;
.rb
.RB \| \-t | \-\-fstype-regex \ ARGUMENT \|
File system type regex to match;
.rb
.RB \| \-p | \-\-mpoint-regx \|
Mount point regex to match;
.rb
.RB \| \-m | \-\-options \|
Print mount options;
.rb
.RB \| \-b | \-\-device \|
Print device node;
.rb
.RB \| \-f | \-\-fstype \|
Print file system type;
.rb
.RB \| \-n | \-\-netdev \|
Match network device(s);
.rb
.RB \| \-N | \-\-nonetdev \|
Match no network devices(s);
.rb
.RB \| \-q | \-\-quiet \|
Enable quiet mode;
.rb
.RB \| \-r | \-\-reverse \|
Print in reverse order;

.TP
.BR device_info \ \| [ \-a | \-\-all ] \ DEVICES \|
Probe /proc/{devices,misc} device info
.TP
.BR DOT \ \| [ \-e | \-d ] \ FILES \|
Dot or source builtin wrapper (\fI-e|-d\fR to print errors and \fI-d\fR to return ASAP
if an error occur); \fBSOURCE\fR is an alias of this builtin
.TP
.BR ENV_SET \ \| VAR1 \ VAR2 \ ... \|
Save persistent environment variables (\fIenv_set\fR alias)
.TP
.RB \| svc_cmd | rs_cmd \|
Run a supported service command (the first for SUPERVISION and the second for RUNSCRIPT service)
.TP
.BR ENV_DEL \ \| VAR1 \ VAR2 \ ... \|
Remove persistent environment variables (\fIenv_del\fR alias)
.TP
.BR svc_down
Set up a service as down (SUPERVISION)

.TP
.B svc_del
Remove service from runlevel directory
.TP
.B svc_remove
Clean up service from running directory
.TP
.BR svc_sig \ \| \-SIGNAL \|
Send a particular SIGNAL to the daemon service
.TP
.BR svc_wait \ \| [ \-E ] \ [ \-p ] \ TIMEOUT \ FILE \|
Wait a service file to appear or disapear--with \fI-E\fR option; add \fI-p\fR for
PID checking
.TP
.B svc_zap
Remove temporary service files
.TP
.BR waitfile \ \| [ OPTIONS ] \ [ \-E ] \ [ \-t ] \  TIMEOUT \ [ \-f ] \  FILE \|
Wait for file to appear or disapear--with \fI-E\fR argument;

.RB \| \-E | \-\-noexist \|
Wait the disppearance of the file instead of the appearance;
.rb
.RB [\| \-p | \-\-pid \|]
Check the pid(file);
.rb
.RB \| [ \-t | \-\-timeout ] \ TIMEOUT \|
Timeout to use in seconds;
.rb
.RB \| [ \-f | \-\-file ] \ FILE \|
File name to wait for;

see \fI@LIBDIR@/sv/bin/waitfile --help\fR for more information.
.TP
.BR svc_status \ [ \-\-set | \-\-del ] \ (\| \-a | \-d | \-e | \-f | | \-p | \-s \|)
Get, set (with
.RB \| \-\-set \|
command line argument)
or delete (with
.RB \| \-\-del \|
command line argument)
defined service status.

.RB \| \-s | \-\-start \|
Test, set or delete service status to \fIstart\fR;
.rb
.RB \| \-d | \-\-down \|
Test, set or delete the service status to \fIdown\fR;
.rb
.RB \| \-f | \-\-fail \|
Test, set or delete service status to \ffail\fR;
.rb
.RB \| \-u | \-\-up \|
Test, set or delete service status to \fIup\fR;
.rb
.RB \| \-a | \-\-active\|
Test service status to \fIactive\fR;
.rb
.RB \| \-p | \-\-pid \|
Test service status to pid(file);

.TP
.B svc_status_start
Test service status to started status (\fB svc_status \-\-start\fR alias)
.TP
.B svc_status_stop
Test service status to stopped status (\fB!svc_status \-\-start\fR alias)
.TP
.B svc_status_active
Test service status to active status (\fBsvc_status \-\-active\fR alias) {SUPERVISION}
.TP
.B svc_status_down
Test service status to down status (\fBsvc_status \-\-down\fR alias) {SUPERVISION}
.TP
.B svc_status_up
Test service status to up status (\fB!svc_stat \-\-down\fR alias) {SUPERVISION}
.TP
.B svc_status_exist
Test service status to exist status (\fBsvc_status \-\-exist\fR alias)
.TP
.B svc_status_pid
Test service status to pidfile status (\fBsvc_status \-\-pid\fR alias)

.SH RUNLEVELS
Superivision is organized in seven distinct runlevels like the classic SystemV
runlevels but are internaly handled like three run levels plus system
initialization; one for system boot; second for multi users system;
third for system shutdown; and an extra single user mode and nonetwork for
compatiblity with SystemV or BSD init-system.

.B NOTE:
So, having, say,
.B udev
in
.I sysboot
runlevel would still work as expected because it will be almost the first service
to be started in the runlevel. Putting
.B udev
service in this particular runlevel instead of
.I sysinit
is required if supervising
.B udev
is necessary, because, the supervisor is only started after
.I sysinit
runlevel.

.RB {\| sysinit , sysboot , default , nonetwork , shutdown , reboot , single , nonetwork \|}
run levels are supported.
Extra services that should be started in
.I single
run levels should be added into
.I single
runlevel like
.I sulogin
service or a shell for BSD like systems.
Just issue the classic command to add a service to
.B single
runlevel: `\fIsv-run --single sulogin add\fR'; however, this is already done in the
default installation process.
.B sysinit
runlevel is the initialization init stage;
.B sysboot
runlevel is the first init stage;
.B default
(multi users mode) runlevel is the
.I default
init stage;
.RB {\| nonetwork , single \|}
are only a modified
.B sysboot
runlevels without network services. So, in practice,
.RB {\| nonetwork , single \|}
replace
.B sysboot
runlevel to be able to repair a system.
See
.BR sv-rc (8)
for more inforation about runlevels.
.SH CONTROL GROUPS RESOURCE MANAGEMENT
.SS OVERVIEW
Supervision support Control Group. CGroup support is autodected on
Linux systems. Just enable kernel Control Group support to benefit CGroup resource
management. Or else, forcibly disable in
.B @SYSCONFDIR@/sv.conf
by setting
.B SV_CGROUP=DISABLE\fR.
Set
.B CGROUP_INHERIT=Yes
to inherit other CGroups, and/or
.B CGROUP_CLEANUP=Yes
to clean up child processes of a \fIgroup\fR or supervised processes.

Global
.B @SYSCONFDIR@/sv.conf
configuration file
and local configuration file(s)
(\fI@SYSCONFDIR@/sv/\fBSERVICE\fI/OPTIONS\fR files for supervised services
or \fI@SYSCOnFDIR@/sv.conf.d/\fBSERVICE\fR for runscript services)
or \fI@SYSCOnFDIR@/sv.conf.local.d/\fBSERVICE\fR for any service type)
Resource Management Settings is supported like
.RB CGROUP_CPU='cpu.shares\ 256'\fR.
Multi-value of a parameter is supported along with sets of multi-parameter-value.
.SS ENVIRONMENT
See the following table and Linux Documentation for more info on Resource Controllers.
.TS
tab (@);
l lx.
\fBCGROUP_BLKIO\fR@T{
Use Block IO Controller to manage resource for service(s)
T}
\fBCGROUP_CPU\fR@T{
Use CPU Controller to manage resource for service(s)
T}
\fBCGROUP_CPUACCT\fR@T{
Use CPU Accounting Controller to manage resource for service(s)
T}
\fBCGROUP_CPUSET\fR@T{
Use CPU Sets Controller to manage resource for service(s)
T}
\fBCGROUP_DEVICES\fR@T{
Use Device Whitlist Controller to manage resource for service(s)
T}
\fBCGROUP_FREEZER\fR@T{
Use Freezer controler to freeze and unfreeze tasks for service(s)
T}
\fBCGROUP_HUGELTB\fR@T{
Use HugeTLB page limits to manage resource for service(s)
.B WARNING:
A SIGBUS will be sent to processes bypassing this limit.
T}
\fBCGROUP_MEMORY\fR@T{
Use Memory Controller to limit resources used by service(s)
T}
\fBCGROUP_NET_CLS\fR@T{
Use Network Classifier to manage resource for service(s)
T}
\fBCGROUP_NET_PRIO\fR@T{
Use Network Priority to manage resource for service(s)
T}
\fBCGROUP_PIDS\fR@T{
Use Process number (fork) limits to manage resources used by service(s)
T}
\fBCGROUP_RDMA\fR@T{
Use RDMA resources to enforce resource management for service(s)
T}
.TE
.SS SERVICE
CGRED (CGroup Rules Engine Daemon) service is another alternative to Control Group
with finely grained rules and automatic PIDs classification.
However, libcgroup should be installed beforehand.

Something like the following can be used to put supervisor processes in CGroup:
.nf
\fB** @SYSCONFDIR@/cgroup/cgconfig.conf **\fR
group supervisor {
  "name=supervision" {
  }
}
\fB** FILE_EOF **\fR
\fB** @SYSCONFDIR@/cgroup/cgrules.conf **\fR
*:runsv  supervision   supervisor/
\fB** FILE_EOF **\fR
.fi
Replace
.IR runsv
with
.IR supervise
for daemontools[-encore] or
.IR s6-supervise
for S6.
See
.BR cgconfig.conf (5)
and enable cgred service.

This is only necessary if not using the bundled init-stage-2 (default run level) which have CGroup
support: child process (supervisor) will naturally inherit supervision CGroup.
.SH FILES
.SS @EXEC_PREFIX@@SBINDIR@
.TP
.I @EXEC_PREFIX@@SBINDIR@/sv-run
Multi-purpose binary to run either an init stage or run level or service command, e.g.
`\fBsv-run \-\-sysboot zramfs add\fR' to add
.B zramfs
service to systeme boot runlevel); `\fBsv-run acpid start\fR' or `\fBsv-rc default\fR' to start
daemons and default services (default runlevel) in multi users mode.
.TP
.I @EXEC_PREFIX@@SBINDIR@/sv-rc
.RB [\| sv\- \|] rc (8)
init-stage or runlevel handler;
see
.BR sv-rc (8)
for more information.
.TP
.I @EXEC_PREFIX@@SBINDIR@/sv-shutdown
System
.BR shutdown (8),
.BR reboot (8),
.BR halt (8),
.BR poweroff (8)
handlers;
see
.BR sv-shutdown (8)
for more information.
.SS @SYSCONFDIR@
.TP
.I @SYSCONFDIR@/sv.conf
Supervision global configuration file
.TP
.B \fI@SYSCONFDIR@/sv.conf.d\fR (\fBSV_CONFDIR\fR)
Runscript configuration files directory
.TP
.B \fI@SYSCONFDIR@/sv.conf.local.d\fR (\fBSV_CONFLOCAL\fR)
Local configuration files directory for any service type
.TP
.B \fI@SYSCONFDIR@/sv.init.d\fR
Runlevel directory
.TP
.B \fI@SYSCONFDIR@/sv\fR (\fBSV_SVCDIR\fR)
See \fB ${SV_SVCDIR}/sv.init.d/RUNLEVEL\fR for active services.
Use
.B sv-run
.RB \| \-0 | \-1 | \-2 | \-3 | \-4 | \-5 \|
.RB \| SERVICE \|
.RB \| add \|
to add a particular service to a particular
init stage or run level.
.B sysinit
is ready to use;
.B sysboot
can be modified to include services like
.B {zramfs,zfs,zpool,unionfs,device-mapper,dmraid,mdadm}
and so on; likewise for
.B default
runlevel.

.B RUNSCRIPT\-SERVICES:
.RB [\| hwclock \|]
.RB [\| console \|]
.RB [\| devfs \|]
.RB [\| dmesg \|]
.RB [\| hostname \|]
.RB [\| kmod-static-nodes \|]
.RB [\| local \|]
.RB [\| localfs \|]
.RB [\| loopback \|]
.RB [\| miscfs \|]
.RB [\| mtab \|]
.RB [\| networkfs \|]
.RB [\| nginx \|]
.RB [\| nrpe \|]
.RB [\| procfs \|]
.RB [\| rootfs \|]
.RB [\| swaps \|]
.RB [\| swapfiles \|]
.RB [\| sysctl \|]
.RB [\| sysfs \|]
.RB [\| tmpdirs \|]
.RB [\| tmpfiles.dev \|]
.RB [\| tmpfiles.setup \|]
.RB [\| zfs \|]
.RB [\| zfs-share \|]
.RB [\| zpool \|]
.RB (LINUX:[\| device-mapper \|]
.RB [\| dmcrypt \|]
.RB [\| dmraid \|]
.RB [\| kmod \|]
.RB [\| ipset \|]
.RB [\| ip[6]tables \|]
.RB [\| lvm \|]
.RB [\| lvm-monitor \|]
.RB [\| mdadm \|]
.RB [\| mdev \|]
.RB [\| qemu-binfmt \|]
.RB [\| qemu-vlan.vnet{0,4} \|]
.RB [\| unionfs \|]
.RB [\| zramfs \|])

.B SUPERVISION\-SERVICES:
.RB [\| apache2 \|]
.RB [\| atd \|]
.RB [\| cron \|]
.RB [\| cupsd \|]
.RB [\| cups-browsed \|]
.RB [\| dhcp \|]
.RB [\| dhcpd \|]
.RB [\| dhcrelay \|]
.RB [\| dbus \|]
.RB [\| dns \|]
.RB [\| getty \|]
.RB [\| git-daemon \|]
.RB [\| gpm \|]
.RB [\| hostapd \|]
.RB [\| inetd \|]
.RB [\| initctl \|]
.RB [\| libvirtd \|]
.RB [\| httpd \|]
.RB [\| mysql \|]
.RB [\| nagios \|]
.RB [\| npcd \|]
.RB [\| ntp \|]
.RB [\| pcscd \|]
.RB [\| php-fpm \|]
.RB [\| postgresql \|]
.RB [\| rrdcached \|]
.RB [\| rsync-daemon \|]
.RB [\| saned \|]
.RB [\| sshd \|]
.RB [\| spawn-fcgi.nginx \|]
.RB [\| snmpd \|]
.RB [\| snmptrapd \|]
.RB [\| sulogin \|]
.RB [\| syslog \|]
.RB [\| virtlockd \|]
.RB [\| virtlogd \|]
.RB [\| wpa_supplicant \|]
.RB [\| xdm \|]
.RB [\| zed \|]
.RB (LINUX:\ [\| acpid \|]
.RB [\| cgred \|]
.RB [\| docker \|]
.RB [\| dmeventd \|]
.RB [\| lvmetad \|]
.RB [\| udev \|]
.RB [\| udev-monitor \|])
.TP
.I /usr/local/@SYSCONFDIR@/sv \fBSV_SVCDIR_LOCAL_fR
Local service directory
.SS SV_RUNDIR: @RUNDIR@/sv
Default run time '/service/' directory
.SS SV_LIBDIR: \fI@LIBDIR@/sv\fR
SUPERVISION library directory
.SS SV_LIBDIR/bin: \fI@LIBDIR@/sv/bin\fR
.TP
.I @LIBDIR@/sv/bin/checkpath
Simple and cheap checkpath/mktemp binary
.TP
.I @LIBDIR@/sv/bin/fstabinfo
Simple and cheap fstab(5) utility
.TP
.I @LIBDIR@/sv/bin/mountinfo
Simple and cheap mountpoints utility
.TP
.I @LIBDIR@/sv/bin/waitfile
Simple and cheap wait file utility (the binary behind \fIsvc_wait\fR shell function)
.TP
.B SYMLINKS:
.RB \| @LIBDIR@/sv/bin/envdir \|
.RB \| @LIBDIR@/sv/bin/envuidgid \|
.RB \| @LIBDIR@/sv/bin/fghack \|
.RB \| @LIBDIR@/sv/bin/pgrphack \|
.RB \| @LIBDIR@/sv/bin/setlock \|
.RB \| @LIBDIR@/sv/bin/setuidgid \|
.RB \| @LIBDIR@/sv/bin/softlimit \|
.SS SV_LIBDIR/sbin: \fI@LIBDIR@/sv/sbin\fR
.TP
.I @LIBDIR@/sv/sbin/service
Compatiblity system utility symlink so that `servce SERVICE COMMAND' would work as
expected. This symlink may copied to
.I @EXEC_PREFIX@@SBINDIR@
system directory or the add \fI@LIBDIR@/sv/bin:@LIBDIR@/sv/sbin\fR to \fBPATH\fR environment variable.
.TP
.I @LIBDIR@/sv/sbin/sv-config
`\fI@LIBDIR@/sv/sbin/sv-config [--log] \fBSERVICE\fI new\fR' to create a new supervision service;
and
.B @LIBDIR@/sv/sbin/sv-config
.RB \| \-\-config \|
.RB \| runit \|
to set up runit supervisor; or
.B @LIBDIR@/sv/sbin/sv-config
.RB \| \-\-update \|
after updating the package
.TP
.I @LIBDIR@/sv/sbin/sv-shutdown
Simple utility to handle system halt or reboot. It could be symlinked to
.B @EXEC_PREFIX@@SBINDIR@/sbin/{halt,shutdown,reboot}
to get SystemV or BSD interface... minor no compatible command line options.
.TP
.I @LIBDIR@/sv/sbin/{halt,poweroff,reboot,shutdown}
.B sv-shutdown
standard aliases for system shutdown (with default action.)
.SS SV_LIBDIR/sh: @LIBDIR@/sv/sh
.TP
.I @LIBDIR@/sv/sh/SV-CONFIG
Commands definition for supervision (services)
.TP
.I @LIBDIR@/sv/sh/run
Default
.B @SYSCONFDIR@/sv/\c
.RB \| SERVICE/ { log/ }{ finish , run } \|
command utility
.TP
.I @LIBDIR@/sv/sh/sv-deps.sh
Shell script to list dependencies
.TP
.I @LIBDIR@/sv/sh/cgroup-release-agent
CGroup Release Agent script
.TP
.I @LIBDIR@/sv/sh/sv-init.sh
Init-stage or runlevel handler for supervision
.TP
.I @LIBDIR@/sv/sh/cgroup-functions
CGroup Functions/helper library
.TP
.I @LIBDIR@/sv/sh/functions
Generic Functions/Helpers library
.TP
.I @LIBDIR@/sv/sh/sv-run.sh
Runscript shell script utility
.TP
.I @LIBDIR@/sv/sh/runscript-functions
Runscript Functions/helpers library
.TP
.I @LIBDIR@/sv/sh/supervision-functions
Supervision Functions/Helpers library
.TP
.I @LIBDIR@/sv/sh/tmpfiles
Tmpfiles utility for SystemD tmpfiles.d compatiblity
.SH "SEE ALSO"
.BR sv-run (8),
.BR sv-rc (8),
.BR sv-shutdown (8),
.SH AUTHORS
tokiclover <tokiclover@supervision.project>
.\"
.\" vim:fenc=utf-8:ft=groff:ci:pi:sts=2:sw=2:ts=2:expandtab:
.\"
